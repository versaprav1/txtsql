2025-04-30 18:09:15,508 - INFO - QUERY START: list all tables
2025-04-30 18:09:15,510 - INFO - QUERY ID: 1746029355-548089
2025-04-30 18:09:15,511 - INFO - START TIME: 2025-04-30 18:09:15.503003
2025-04-30 18:09:15,512 - INFO - Starting workflow execution for: 'list all tables'
2025-04-30 18:09:15,518 - INFO - Initial state validated successfully
2025-04-30 18:09:15,519 - INFO - Using recursion limit: 40
2025-04-30 18:09:15,522 - INFO - Starting workflow stream
2025-04-30 18:09:15,557 - DEBUG - STDOUT: 
==== PLANNER NODE START ====
2025-04-30 18:09:15,571 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:15,573 - DEBUG - STDOUT: Current execution path: []
2025-04-30 18:09:15,573 - DEBUG - STDOUT: Processing user question: 'list all tables'
2025-04-30 18:09:15,583 - DEBUG - STDOUT: Successfully initialized database metadata store and discovery service
2025-04-30 18:09:15,586 - DEBUG - STDOUT: Successfully initialized PlannerAgent with database capabilities using model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:15,590 - DEBUG - STDOUT: PlannerAgent is using LLM to analyze the query and determine the appropriate database tables and columns
2025-04-30 18:09:15,594 - DEBUG - STDOUT: Invoking PlannerAgent with question: 'list all tables'
2025-04-30 18:09:15,649 - DEBUG - STDOUT: Invoking Planner with question: list all tables...
2025-04-30 18:09:16,678 - DEBUG - STDOUT: Raw Planner response: {
    "query_type": "sql",
    "primary_table_or_datasource": "information_schema.tables",
    "relevant_columns": ["table_schema", "table_name"],
    "filtering_conditions": "table_type = 'BASE TABLE'",
    "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the SQL database."
}
2025-04-30 18:09:16,686 - DEBUG - STDOUT: Discovering database structure for 'new', force_refresh=False
2025-04-30 18:09:16,732 - DEBUG - STDOUT: Discovered schemas: ['dev']
2025-04-30 18:09:16,732 - DEBUG - STDOUT: Discovering tables in schema 'dev' of database 'new'
2025-04-30 18:09:16,732 - DEBUG - STDOUT: Using cached metadata for schema 'dev', found 138 tables
2025-04-30 18:09:16,732 - DEBUG - STDOUT: First 10 tables: ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps']
2025-04-30 18:09:16,732 - DEBUG - STDOUT: ...and 128 more tables
2025-04-30 18:09:16,746 - DEBUG - STDOUT: Schema 'dev' has 138 tables
2025-04-30 18:09:16,749 - DEBUG - STDOUT: First 10 tables in schema 'dev': ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps']
2025-04-30 18:09:16,751 - DEBUG - STDOUT: ...and 128 more tables
2025-04-30 18:09:16,753 - DEBUG - STDOUT: Discovering tables in schema 'dev' of database 'new'
2025-04-30 18:09:16,754 - DEBUG - STDOUT: Using cached metadata for schema 'dev', found 138 tables
2025-04-30 18:09:16,755 - DEBUG - STDOUT: First 10 tables: ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps']
2025-04-30 18:09:16,757 - DEBUG - STDOUT: ...and 128 more tables
2025-04-30 18:09:16,765 - DEBUG - STDOUT: PlannerAgent returned plan: {
  "query_type": "sql",
  "primary_table_or_datasource": "information_schema.tables",
  "relevant_columns": [
    "table_schema",
    "table_name"
  ],
  "filtering_conditions": "table_type = 'BASE TABLE'",
  "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the SQL database.",
  "validated": true,
  "all_tables": {
    "dev": [
      "azure_standard_apps",
      "btp_cloud_integration_message_store_entries",
      "azure_event_grid_event_subscriptions",
      "btp_cloud_integration_credentials",
      "pro_communication_parties",
      "abap_soap_service_bindings",
      "data_sources",
      "pro_performance_queries",
      "abap_odata_services",
      "azure_logic_app_integration_account_maps",
      "pro_integrated_configuration_rules",
      "abap_systems",
      "abap_rfc_destination_options",
      "azure_logic_app_integration_account_partner_metadata",
      "data_source_proxy_headers",
      "abap_ports",
      "btp_cloud_integration_connections",
      "azure_logic_app_integration_accounts",
      "pro_configuration_scenarios",
      "abap_rfc_destinations",
      "azure_standard_app_workflows",
      "btp_cloud_integration_package_tags",
      "log_entries",
      "properties",
      "azure_api_management_subscriptions",
      "lean_ix_tenants",
      "pro_performance_measure_points",
      "pro_integrated_configuration_interfaces",
      "btp_cloud_integration_service_endpoints",
      "azure_logic_app_integration_account_agreements",
      "abap_partner_profiles",
      "btp_cloud_integration_configurations",
      "abap_inbound_partner_profiles",
      "azure_api_management_api_revisions",
      "pro_agreements",
      "pro_configuration_scenario_receiver_agreements",
      "sessions",
      "btp_event_mesh_queue_topics",
      "data_source_access_tokens",
      "btp_event_mesh_queues",
      "azure_event_grid_domain_topics",
      "azure_logic_app_workflow_versions",
      "pro_adapter_attributes",
      "data_flow_items",
      "pro_integrated_configurations",
      "btp_cloud_integration_artefacts",
      "azure_api_management_api_products",
      "azure_event_grid_partner_namespace_channels",
      "system_mappings",
      "pro_communication_components",
      "btp_cloud_integration_message_properties",
      "azure_service_bus_topics",
      "pro_performance_data",
      "pro_configuration_scenario_components",
      "pro_configuration_scenario_parties",
      "pro_software_components",
      "data_flows",
      "data_source_oauth2credentials",
      "btp_api_management_product_rate_plans",
      "azure_event_grid_system_topics",
      "btp_cloud_integration_messages",
      "btp_cloud_integration_runtime_artefacts",
      "pro_adapter_modules",
      "pro_configuration_scenario_sender_agreements",
      "azure_api_management_services",
      "lean_ix_fields",
      "pro_configuration_scenario_configurations",
      "azure_logic_app_workflows",
      "data_source_api_keys",
      "pro_integrated_configuration_sender_agreements",
      "azure_event_grid_partner_registrations",
      "metadata",
      "abap_integration_engine_interfaces",
      "azure_api_management_apis",
      "btp_cloud_integration_resources",
      "azure_event_grid_topics",
      "lean_ix_tags",
      "abap_soap_service_binding_properties",
      "hopex_tenants",
      "azure_logic_app_integration_account_schemas",
      "btp_api_management_product_applications",
      "btp_api_management_products",
      "btp_api_management_providers",
      "azure_api_management_backend_parameters",
      "azure_service_bus_topic_subscriptions",
      "task_runs",
      "azure_service_bus_queues",
      "abap_qrfc_destinations",
      "luy_tenants",
      "tasks",
      "abap_soap_services",
      "abap_paths",
      "azure_logic_app_integration_account_certificates",
      "btp_event_mesh_webhooks",
      "pro_communication_channels",
      "azure_tenants",
      "pro_integrated_configuration_receiver_agreements",
      "btp_event_mesh_topics",
      "data_source_proxies",
      "pro_performance_stats",
      "systems",
      "pro_integrated_configuration_receivers",
      "log_entry_attributes",
      "inventories",
      "anypoint_assets",
      "azure_api_management_policy_properties",
      "btp_cloud_integration_message_attachments",
      "pro_adapter_module_parameters",
      "azure_api_management_backends",
      "data_source_basic_auth_credentials",
      "azure_api_management_api_operation_parameters",
      "azure_event_grid_domains",
      "azure_service_bus_topic_subscription_rules",
      "azure_event_grid_partner_topics",
      "abap_outbound_partner_profiles",
      "azure_subscriptions",
      "anypoint_organisations",
      "pro_configuration_scenario_channels",
      "btp_tenants",
      "btp_api_management_proxy_products",
      "azure_api_management_products",
      "azure_event_grid_partner_namespaces",
      "user_sessions",
      "azure_logic_app_integration_account_sessions",
      "azure_logic_app_integration_account_partner_identities",
      "azure_logic_app_integration_account_partners",
      "btp_cloud_integration_participants",
      "azure_service_bus_namespaces",
      "btp_cloud_integration_oauth2credentials",
      "users",
      "azure_api_management_api_operation_replies",
      "azure_service_bus_authorization_rules",
      "btp_api_management_proxies",
      "property_types",
      "azure_api_management_api_operations",
      "azure_api_management_policies",
      "btp_cloud_integration_packages",
      "azure_resource_groups"
    ]
  },
  "timestamp": "2025-04-30 18:09:16.764520",
  "agent": "planner",
  "user_question": "list all tables",
  "database_context": {
    "database": "new",
    "schema": "dev",
    "metadata_available": true,
    "last_updated": "2025-04-30T12:57:32.798365"
  }
}
2025-04-30 18:09:16,832 - DEBUG - STDOUT: Planner node output: current_agent=selector
2025-04-30 18:09:16,832 - DEBUG - STDOUT: Planner response being sent to selector: {
  "query_type": "sql",
  "primary_table_or_datasource": "information_schema.tables",
  "relevant_columns": [
    "table_schema",
    "table_name"
  ],
  "filtering_conditions": "table_type = 'BASE TABLE'",
  "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the SQL database.",
  "validated": true,
  "all_tables": {
    "dev": [
      "azure_standard_apps",
      "btp_cloud_integration_message_store_entries",
      "azure_event_grid_event_subscriptions",
      "btp_cloud_integration_credentials",
      "pro_communication_parties",
      "abap_soap_service_bindings",
      "data_sources",
      "pro_performance_queries",
      "abap_odata_services",
      "azure_logic_app_integration_account_maps",
      "pro_integrated_configuration_rules",
      "abap_systems",
      "abap_rfc_destination_options",
      "azure_logic_app_integration_account_partner_metadata",
      "data_source_proxy_headers",
      "abap_ports",
      "btp_cloud_integration_connections",
      "azure_logic_app_integration_accounts",
      "pro_configuration_scenarios",
      "abap_rfc_destinations",
      "azure_standard_app_workflows",
      "btp_cloud_integration_package_tags",
      "log_entries",
      "properties",
      "azure_api_management_subscriptions",
      "lean_ix_tenants",
      "pro_performance_measure_points",
      "pro_integrated_configuration_interfaces",
      "btp_cloud_integration_service_endpoints",
      "azure_logic_app_integration_account_agreements",
      "abap_partner_profiles",
      "btp_cloud_integration_configurations",
      "abap_inbound_partner_profiles",
      "azure_api_management_api_revisions",
      "pro_agreements",
      "pro_configuration_scenario_receiver_agreements",
      "sessions",
      "btp_event_mesh_queue_topics",
      "data_source_access_tokens",
      "btp_event_mesh_queues",
      "azure_event_grid_domain_topics",
      "azure_logic_app_workflow_versions",
      "pro_adapter_attributes",
      "data_flow_items",
      "pro_integrated_configurations",
      "btp_cloud_integration_artefacts",
      "azure_api_management_api_products",
      "azure_event_grid_partner_namespace_channels",
      "system_mappings",
      "pro_communication_components",
      "btp_cloud_integration_message_properties",
      "azure_service_bus_topics",
      "pro_performance_data",
      "pro_configuration_scenario_components",
      "pro_configuration_scenario_parties",
      "pro_software_components",
      "data_flows",
      "data_source_oauth2credentials",
      "btp_api_management_product_rate_plans",
      "azure_event_grid_system_topics",
      "btp_cloud_integration_messages",
      "btp_cloud_integration_runtime_artefacts",
      "pro_adapter_modules",
      "pro_configuration_scenario_sender_agreements",
      "azure_api_management_services",
      "lean_ix_fields",
      "pro_configuration_scenario_configurations",
      "azure_logic_app_workflows",
      "data_source_api_keys",
      "pro_integrated_configuration_sender_agreements",
      "azure_event_grid_partner_registrations",
      "metadata",
      "abap_integration_engine_interfaces",
      "azure_api_management_apis",
      "btp_cloud_integration_resources",
      "azure_event_grid_topics",
      "lean_ix_tags",
      "abap_soap_service_binding_properties",
      "hopex_tenants",
      "azure_logic_app_integration_account_schemas",
      "btp_api_management_product_applications",
      "btp_api_management_products",
      "btp_api_management_providers",
      "azure_api_management_backend_parameters",
      "azure_service_bus_topic_subscriptions",
      "task_runs",
      "azure_service_bus_queues",
      "abap_qrfc_destinations",
      "luy_tenants",
      "tasks",
      "abap_soap_services",
      "abap_paths",
      "azure_logic_app_integration_account_certificates",
      "btp_event_mesh_webhooks",
      "pro_communication_channels",
      "azure_tenants",
      "pro_integrated_configuration_receiver_agreements",
      "btp_event_mesh_topics",
      "data_source_proxies",
      "pro_performance_stats",
      "systems",
      "pro_integrated_configuration_receivers",
      "log_entry_attributes",
      "inventories",
      "anypoint_assets",
      "azure_api_management_policy_properties",
      "btp_cloud_integration_message_attachments",
      "pro_adapter_module_parameters",
      "azure_api_management_backends",
      "data_source_basic_auth_credentials",
      "azure_api_management_api_operation_parameters",
      "azure_event_grid_domains",
      "azure_service_bus_topic_subscription_rules",
      "azure_event_grid_partner_topics",
      "abap_outbound_partner_profiles",
      "azure_subscriptions",
      "anypoint_organisations",
      "pro_configuration_scenario_channels",
      "btp_tenants",
      "btp_api_management_proxy_products",
      "azure_api_management_products",
      "azure_event_grid_partner_namespaces",
      "user_sessions",
      "azure_logic_app_integration_account_sessions",
      "azure_logic_app_integration_account_partner_identities",
      "azure_logic_app_integration_account_partners",
      "btp_cloud_integration_participants",
      "azure_service_bus_namespaces",
      "btp_cloud_integration_oauth2credentials",
      "users",
      "azure_api_management_api_operation_replies",
      "azure_service_bus_authorization_rules",
      "btp_api_management_proxies",
      "property_types",
      "azure_api_management_api_operations",
      "azure_api_management_policies",
      "btp_cloud_integration_packages",
      "azure_resource_groups"
    ]
  },
  "timestamp": "2025-04-30 18:09:16.764520",
  "agent": "planner",
  "user_question": "list all tables",
  "database_context": {
    "database": "new",
    "schema": "dev",
    "metadata_available": true,
    "last_updated": "2025-04-30T12:57:32.798365"
  }
}
2025-04-30 18:09:16,903 - DEBUG - STDOUT: ==== PLANNER NODE END ====
2025-04-30 18:09:16,912 - INFO - Processing agent: planner
2025-04-30 18:09:16,912 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:16,912 - DEBUG - Event keys: dict_keys(['planner'])
2025-04-30 18:09:16,912 - DEBUG - Execution path: ['planner']
2025-04-30 18:09:16,912 - DEBUG - planner response: {'query_type': 'sql', 'primary_table_or_datasource': 'information_schema.tables', 'relevant_columns': ['table_schema', 'table_name'], 'filtering_conditions': "table_type = 'BASE TABLE'", 'processing_instructions': 'Query the information_schema.tables to list all base tables across all schemas in the SQL database.', 'validated': True, 'all_tables': {'dev': ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps', 'pro_integrated_configuration_rules', 'abap_systems', 'abap_rfc_destination_options', 'azure_logic_app_integration_account_partner_metadata', 'data_source_proxy_headers', 'abap_ports', 'btp_cloud_integration_connections', 'azure_logic_app_integration_accounts', 'pro_configuration_scenarios', 'abap_rfc_destinations', 'azure_standard_app_workflows', 'btp_cloud_integration_package_tags', 'log_entries', 'properties', 'azure_api_management_subscriptions', 'lean_ix_tenants', 'pro_performance_measure_points', 'pro_integrated_configuration_interfaces', 'btp_cloud_integration_service_endpoints', 'azure_logic_app_integration_account_agreements', 'abap_partner_profiles', 'btp_cloud_integration_configurations', 'abap_inbound_partner_profiles', 'azure_api_management_api_revisions', 'pro_agreements', 'pro_configuration_scenario_receiver_agreements', 'sessions', 'btp_event_mesh_queue_topics', 'data_source_access_tokens', 'btp_event_mesh_queues', 'azure_event_grid_domain_topics', 'azure_logic_app_workflow_versions', 'pro_adapter_attributes', 'data_flow_items', 'pro_integrated_configurations', 'btp_cloud_integration_artefacts', 'azure_api_management_api_products', 'azure_event_grid_partner_namespace_channels', 'system_mappings', 'pro_communication_components', 'btp_cloud_integration_message_properties', 'azure_service_bus_topics', 'pro_performance_data', 'pro_configuration_scenario_components', 'pro_configuration_scenario_parties', 'pro_software_components', 'data_flows', 'data_source_oauth2credentials', 'btp_api_management_product_rate_plans', 'azure_event_grid_system_topics', 'btp_cloud_integration_messages', 'btp_cloud_integration_runtime_artefacts', 'pro_adapter_modules', 'pro_configuration_scenario_sender_agreements', 'azure_api_management_services', 'lean_ix_fields', 'pro_configuration_scenario_configurations', 'azure_logic_app_workflows', 'data_source_api_keys', 'pro_integrated_configuration_sender_agreements', 'azure_event_grid_partner_registrations', 'metadata', 'abap_integration_engine_interfaces', 'azure_api_management_apis', 'btp_cloud_integration_resources', 'azure_event_grid_topics', 'lean_ix_tags', 'abap_soap_service_binding_properties', 'hopex_tenants', 'azure_logic_app_integration_account_schemas', 'btp_api_management_product_applications', 'btp_api_management_products', 'btp_api_management_providers', 'azure_api_management_backend_parameters', 'azure_service_bus_topic_subscriptions', 'task_runs', 'azure_service_bus_queues', 'abap_qrfc_destinations', 'luy_tenants', 'tasks', 'abap_soap_services', 'abap_paths', 'azure_logic_app_integration_account_certificates', 'btp_event_mesh_webhooks', 'pro_communication_channels', 'azure_tenants', 'pro_integrated_configuration_receiver_agreements', 'btp_event_mesh_topics', 'data_source_proxies', 'pro_performance_stats', 'systems', 'pro_integrated_configuration_receivers', 'log_entry_attributes', 'inventories', 'anypoint_assets', 'azure_api_management_policy_properties', 'btp_cloud_integration_message_attachments', 'pro_adapter_module_parameters', 'azure_api_management_backends', 'data_source_basic_auth_credentials', 'azure_api_management_api_operation_parameters', 'azure_event_grid_domains', 'azure_service_bus_topic_subscription_rules', 'azure_event_grid_partner_topics', 'abap_outbound_partner_profiles', 'azure_subscriptions', 'anypoint_organisations', 'pro_configuration_scenario_channels', 'btp_tenants', 'btp_api_management_proxy_products', 'azure_api_management_products', 'azure_event_grid_partner_namespaces', 'user_sessions', 'azure_logic_app_integration_account_sessions', 'azure_logic_app_integration_account_partner_identities', 'azure_logic_app_integration_account_partners', 'btp_cloud_integration_participants', 'azure_service_bus_namespaces', 'btp_cloud_integration_oauth2credentials', 'users', 'azure_api_management_api_operation_replies', 'azure_service_bus_authorization_rules', 'btp_api_management_proxies', 'property_types', 'azure_api_management_api_operations', 'azure_api_management_policies', 'btp_cloud_integration_packages', 'azure_resource_groups']}, 'timestamp': '2025-04-30 18:09:16.764520', 'agent': 'planner', 'user_question': 'list all tables', 'database_context': {'database': 'new', 'schema': 'dev', 'metadata_available': True, 'last_updated': '2025-04-30T12:57:32.798365'}}
2025-04-30 18:09:16,930 - DEBUG - STDOUT: 
==== SELECTOR NODE START ====
2025-04-30 18:09:16,930 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:16,930 - DEBUG - STDOUT: Current execution path: ['planner']
2025-04-30 18:09:16,930 - DEBUG - STDOUT: Planner response received: {
  "query_type": "sql",
  "primary_table_or_datasource": "information_schema.tables",
  "relevant_columns": [
    "table_schema",
    "table_name"
  ],
  "filtering_conditions": "table_type = 'BASE TABLE'",
  "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the SQL database.",
  "validated": true,
  "all_tables": {
    "dev": [
      "azure_standard_apps",
      "btp_cloud_integration_message_store_entries",
      "azure_event_grid_event_subscriptions",
      "btp_cloud_integration_credentials",
      "pro_communication_parties",
      "abap_soap_service_bindings",
      "data_sources",
      "pro_performance_queries",
      "abap_odata_services",
      "azure_logic_app_integration_account_maps",
      "pro_integrated_configuration_rules",
      "abap_systems",
      "abap_rfc_destination_options",
      "azure_logic_app_integration_account_partner_metadata",
      "data_source_proxy_headers",
      "abap_ports",
      "btp_cloud_integration_connections",
      "azure_logic_app_integration_accounts",
      "pro_configuration_scenarios",
      "abap_rfc_destinations",
      "azure_standard_app_workflows",
      "btp_cloud_integration_package_tags",
      "log_entries",
      "properties",
      "azure_api_management_subscriptions",
      "lean_ix_tenants",
      "pro_performance_measure_points",
      "pro_integrated_configuration_interfaces",
      "btp_cloud_integration_service_endpoints",
      "azure_logic_app_integration_account_agreements",
      "abap_partner_profiles",
      "btp_cloud_integration_configurations",
      "abap_inbound_partner_profiles",
      "azure_api_management_api_revisions",
      "pro_agreements",
      "pro_configuration_scenario_receiver_agreements",
      "sessions",
      "btp_event_mesh_queue_topics",
      "data_source_access_tokens",
      "btp_event_mesh_queues",
      "azure_event_grid_domain_topics",
      "azure_logic_app_workflow_versions",
      "pro_adapter_attributes",
      "data_flow_items",
      "pro_integrated_configurations",
      "btp_cloud_integration_artefacts",
      "azure_api_management_api_products",
      "azure_event_grid_partner_namespace_channels",
      "system_mappings",
      "pro_communication_components",
      "btp_cloud_integration_message_properties",
      "azure_service_bus_topics",
      "pro_performance_data",
      "pro_configuration_scenario_components",
      "pro_configuration_scenario_parties",
      "pro_software_components",
      "data_flows",
      "data_source_oauth2credentials",
      "btp_api_management_product_rate_plans",
      "azure_event_grid_system_topics",
      "btp_cloud_integration_messages",
      "btp_cloud_integration_runtime_artefacts",
      "pro_adapter_modules",
      "pro_configuration_scenario_sender_agreements",
      "azure_api_management_services",
      "lean_ix_fields",
      "pro_configuration_scenario_configurations",
      "azure_logic_app_workflows",
      "data_source_api_keys",
      "pro_integrated_configuration_sender_agreements",
      "azure_event_grid_partner_registrations",
      "metadata",
      "abap_integration_engine_interfaces",
      "azure_api_management_apis",
      "btp_cloud_integration_resources",
      "azure_event_grid_topics",
      "lean_ix_tags",
      "abap_soap_service_binding_properties",
      "hopex_tenants",
      "azure_logic_app_integration_account_schemas",
      "btp_api_management_product_applications",
      "btp_api_management_products",
      "btp_api_management_providers",
      "azure_api_management_backend_parameters",
      "azure_service_bus_topic_subscriptions",
      "task_runs",
      "azure_service_bus_queues",
      "abap_qrfc_destinations",
      "luy_tenants",
      "tasks",
      "abap_soap_services",
      "abap_paths",
      "azure_logic_app_integration_account_certificates",
      "btp_event_mesh_webhooks",
      "pro_communication_channels",
      "azure_tenants",
      "pro_integrated_configuration_receiver_agreements",
      "btp_event_mesh_topics",
      "data_source_proxies",
      "pro_performance_stats",
      "systems",
      "pro_integrated_configuration_receivers",
      "log_entry_attributes",
      "inventories",
      "anypoint_assets",
      "azure_api_management_policy_properties",
      "btp_cloud_integration_message_attachments",
      "pro_adapter_module_parameters",
      "azure_api_management_backends",
      "data_source_basic_auth_credentials",
      "azure_api_management_api_operation_parameters",
      "azure_event_grid_domains",
      "azure_service_bus_topic_subscription_rules",
      "azure_event_grid_partner_topics",
      "abap_outbound_partner_profiles",
      "azure_subscriptions",
      "anypoint_organisations",
      "pro_configuration_scenario_channels",
      "btp_tenants",
      "btp_api_management_proxy_products",
      "azure_api_management_products",
      "azure_event_grid_partner_namespaces",
      "user_sessions",
      "azure_logic_app_integration_account_sessions",
      "azure_logic_app_integration_account_partner_identities",
      "azure_logic_app_integration_account_partners",
      "btp_cloud_integration_participants",
      "azure_service_bus_namespaces",
      "btp_cloud_integration_oauth2credentials",
      "users",
      "azure_api_management_api_operation_replies",
      "azure_service_bus_authorization_rules",
      "btp_api_management_proxies",
      "property_types",
      "azure_api_management_api_operations",
      "azure_api_management_policies",
      "btp_cloud_integration_packages",
      "azure_resource_groups"
    ]
  },
  "timestamp": "2025-04-30 18:09:16.764520",
  "agent": "planner",
  "user_question": "list all tables",
  "database_context": {
    "database": "new",
    "schema": "dev",
    "metadata_available": true,
    "last_updated": "2025-04-30T12:57:32.798365"
  }
}
2025-04-30 18:09:17,006 - DEBUG - STDOUT: Selector is processing planner response for question: 'list all tables'
2025-04-30 18:09:17,008 - DEBUG - STDOUT: NOTE: The selector node is currently simplified and doesn't use LLM.
2025-04-30 18:09:17,009 - DEBUG - STDOUT: It simply passes through to the SQLGenerator without making actual selections.
2025-04-30 18:09:17,010 - DEBUG - STDOUT: Selector node output: current_agent=SQLGenerator
2025-04-30 18:09:17,016 - DEBUG - STDOUT: Selector response being sent to SQLGenerator: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "information_schema.tables",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [
      "table_schema",
      "table_name"
    ],
    "filters": "table_type = 'BASE TABLE'"
  }
}
2025-04-30 18:09:17,021 - DEBUG - STDOUT: ==== SELECTOR NODE END ====
2025-04-30 18:09:17,023 - INFO - Processing agent: selector
2025-04-30 18:09:17,023 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:17,024 - DEBUG - Event keys: dict_keys(['selector'])
2025-04-30 18:09:17,025 - DEBUG - Execution path: ['planner', 'selector']
2025-04-30 18:09:17,026 - DEBUG - selector response: {'raw': 'Selection completed', 'selected_schemas': {}, 'selected_tool': 'sql_query', 'selected_datasource': 'information_schema.tables', 'information_needed': 'Table listing', 'reason_for_selection': 'Direct database query is the most efficient way to list tables', 'query_parameters': {'columns': ['table_schema', 'table_name'], 'filters': "table_type = 'BASE TABLE'"}}
2025-04-30 18:09:17,027 - DEBUG - STDOUT: 
==== SQL GENERATOR NODE START ====
2025-04-30 18:09:17,029 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:17,033 - DEBUG - STDOUT: Current execution path: ['planner', 'selector']
2025-04-30 18:09:17,034 - DEBUG - STDOUT: Selector response received: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "information_schema.tables",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [
      "table_schema",
      "table_name"
    ],
    "filters": "table_type = 'BASE TABLE'"
  }
}
2025-04-30 18:09:17,039 - DEBUG - STDOUT: Detected 'list all tables' query, generating standard query WITHOUT using LLM
2025-04-30 18:09:17,039 - DEBUG - STDOUT: This is a hardcoded response for a common query pattern
2025-04-30 18:09:17,041 - DEBUG - STDOUT: SQL Generator node output for 'list all tables': current_agent=reviewer
2025-04-30 18:09:17,042 - DEBUG - STDOUT: SQL query generated: SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;
2025-04-30 18:09:17,043 - DEBUG - STDOUT: SQL Generator response being sent to reviewer: {
  "sql_query": "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;",
  "explanation": "This query lists all tables in the database by querying the information_schema.tables view, which contains metadata about all tables in the database. It filters for base tables only (excluding views) and orders the results by schema and table name for better readability.",
  "validation_checks": [
    "Query targets information_schema which exists in all PostgreSQL databases",
    "Filtering on table_type ensures only actual tables are returned (not views)",
    "Results are ordered for better readability"
  ],
  "query_type": "SELECT",
  "estimated_complexity": "LOW",
  "required_indexes": []
}
2025-04-30 18:09:17,054 - DEBUG - STDOUT: ==== SQL GENERATOR NODE END ====
2025-04-30 18:09:17,055 - INFO - Processing agent: SQLGenerator
2025-04-30 18:09:17,056 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:17,058 - DEBUG - Event keys: dict_keys(['SQLGenerator'])
2025-04-30 18:09:17,058 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:17,059 - DEBUG - SQLGenerator response: {'sql_query': "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;", 'explanation': 'This query lists all tables in the database by querying the information_schema.tables view, which contains metadata about all tables in the database. It filters for base tables only (excluding views) and orders the results by schema and table name for better readability.', 'validation_checks': ['Query targets information_schema which exists in all PostgreSQL databases', 'Filtering on table_type ensures only actual tables are returned (not views)', 'Results are ordered for better readability'], 'query_type': 'SELECT', 'estimated_complexity': 'LOW', 'required_indexes': []}
2025-04-30 18:09:17,065 - DEBUG - STDOUT: 
==== REVIEWER NODE START ====
2025-04-30 18:09:17,068 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:17,068 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:17,069 - DEBUG - STDOUT: SQL query to review: SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;
2025-04-30 18:09:17,071 - DEBUG - STDOUT: SQLGenerator response received: {
  "sql_query": "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;",
  "explanation": "This query lists all tables in the database by querying the information_schema.tables view, which contains metadata about all tables in the database. It filters for base tables only (excluding views) and orders the results by schema and table name for better readability.",
  "validation_checks": [
    "Query targets information_schema which exists in all PostgreSQL databases",
    "Filtering on table_type ensures only actual tables are returned (not views)",
    "Results are ordered for better readability"
  ],
  "query_type": "SELECT",
  "estimated_complexity": "LOW",
  "required_indexes": []
}
2025-04-30 18:09:17,083 - DEBUG - STDOUT: Reviewer is analyzing SQL query for question: 'list all tables'
2025-04-30 18:09:17,085 - DEBUG - STDOUT: Using LLM-based ReviewerAgent to analyze the SQL query
2025-04-30 18:09:17,087 - DEBUG - STDOUT: Created ReviewerAgent with model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:17,088 - DEBUG - STDOUT: Invoking ReviewerAgent with user_question: 'list all tables' and sql_query: 'SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;'
2025-04-30 18:09:18,806 - DEBUG - STDOUT: ReviewerAgent returned review: {
  "reviewer_response": {
    "is_correct": true,
    "issues": [],
    "suggestions": [],
    "explanation": "SQL query validated successfully",
    "security_concerns": [],
    "performance_impact": "LOW",
    "confidence_score": 0.8,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:18.806058",
      "query_complexity": "UNKNOWN",
      "review_version": "1.0"
    },
    "recommendations": [],
    "risk_assessment": {
      "overall_risk_level": "LOW",
      "risk_breakdown": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0
      },
      "requires_immediate_attention": false
    }
  }
}
2025-04-30 18:09:18,830 - DEBUG - STDOUT: Reviewer node output: current_agent=sql_executor
2025-04-30 18:09:18,831 - DEBUG - STDOUT: Reviewer response being sent to sql_executor: {
  "reviewer_response": {
    "is_correct": true,
    "issues": [],
    "suggestions": [],
    "explanation": "SQL query validated successfully",
    "security_concerns": [],
    "performance_impact": "LOW",
    "confidence_score": 0.8,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:18.806058",
      "query_complexity": "UNKNOWN",
      "review_version": "1.0"
    },
    "recommendations": [],
    "risk_assessment": {
      "overall_risk_level": "LOW",
      "risk_breakdown": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0
      },
      "requires_immediate_attention": false
    }
  }
}
2025-04-30 18:09:18,839 - DEBUG - STDOUT: ==== REVIEWER NODE END ====
2025-04-30 18:09:18,844 - INFO - Processing agent: reviewer
2025-04-30 18:09:18,845 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:18,846 - DEBUG - Event keys: dict_keys(['reviewer'])
2025-04-30 18:09:18,847 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:18,847 - DEBUG - reviewer response: {'reviewer_response': {'is_correct': True, 'issues': [], 'suggestions': [], 'explanation': 'SQL query validated successfully', 'security_concerns': [], 'performance_impact': 'LOW', 'confidence_score': 0.8, 'metadata': {'reviewed_at': '2025-04-30T18:09:18.806058', 'query_complexity': 'UNKNOWN', 'review_version': '1.0'}, 'recommendations': [], 'risk_assessment': {'overall_risk_level': 'LOW', 'risk_breakdown': {'critical': 0, 'high': 0, 'medium': 0, 'low': 0}, 'requires_immediate_attention': False}}}
2025-04-30 18:09:18,849 - DEBUG - STDOUT: 
==== SQL EXECUTOR NODE START ====
2025-04-30 18:09:18,850 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:18,851 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:18,853 - DEBUG - STDOUT: SQL query to execute: SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;
2025-04-30 18:09:18,854 - DEBUG - STDOUT: Reviewer response received: {
  "reviewer_response": {
    "is_correct": true,
    "issues": [],
    "suggestions": [],
    "explanation": "SQL query validated successfully",
    "security_concerns": [],
    "performance_impact": "LOW",
    "confidence_score": 0.8,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:18.806058",
      "query_complexity": "UNKNOWN",
      "review_version": "1.0"
    },
    "recommendations": [],
    "risk_assessment": {
      "overall_risk_level": "LOW",
      "risk_breakdown": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0
      },
      "requires_immediate_attention": false
    }
  }
}
2025-04-30 18:09:18,866 - DEBUG - STDOUT: SQL Executor is processing SQL query: 'SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;'
2025-04-30 18:09:18,889 - DEBUG - STDOUT: Executing SQL query against database: 'SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;'
2025-04-30 18:09:18,891 - DEBUG - STDOUT: NOTE: SQL Executor does not use LLM. It directly executes the SQL query against the database.
2025-04-30 18:09:18,894 - DEBUG - STDOUT: Attempting database connection to localhost:5432/new as postgres
2025-04-30 18:09:19,041 - DEBUG - STDOUT: Successfully connected to database new at localhost:5432
2025-04-30 18:09:19,056 - DEBUG - STDOUT: Database is available
2025-04-30 18:09:19,056 - DEBUG - STDOUT: Attempting database connection to localhost:5432/new as postgres
2025-04-30 18:09:19,116 - DEBUG - STDOUT: Successfully connected to database new at localhost:5432
2025-04-30 18:09:19,188 - DEBUG - STDOUT: Successfully executed query against actual database
2025-04-30 18:09:19,190 - DEBUG - STDOUT: SQL query execution results: {
  "column_names": [
    "table_schema",
    "table_name"
  ],
  "rows": [
    [
      "dev",
      "abap_inbound_partner_profiles"
    ],
    [
      "dev",
      "abap_integration_engine_interfaces"
    ],
    [
      "dev",
      "abap_odata_services"
    ],
    [
      "dev",
      "abap_outbound_partner_profiles"
    ],
    [
      "dev",
      "abap_partner_profiles"
    ],
    [
      "dev",
      "abap_paths"
    ],
    [
      "dev",
      "abap_ports"
    ],
    [
      "dev",
      "abap_qrfc_destinations"
    ],
    [
      "dev",
      "abap_rfc_destination_options"
    ],
    [
      "dev",
      "abap_rfc_destinations"
    ],
    [
      "dev",
      "abap_soap_service_binding_properties"
    ],
    [
      "dev",
      "abap_soap_service_bindings"
    ],
    [
      "dev",
      "abap_soap_services"
    ],
    [
      "dev",
      "abap_systems"
    ],
    [
      "dev",
      "anypoint_assets"
    ],
    [
      "dev",
      "anypoint_organisations"
    ],
    [
      "dev",
      "azure_api_management_api_operation_parameters"
    ],
    [
      "dev",
      "azure_api_management_api_operation_replies"
    ],
    [
      "dev",
      "azure_api_management_api_operations"
    ],
    [
      "dev",
      "azure_api_management_api_products"
    ],
    [
      "dev",
      "azure_api_management_api_revisions"
    ],
    [
      "dev",
      "azure_api_management_apis"
    ],
    [
      "dev",
      "azure_api_management_backend_parameters"
    ],
    [
      "dev",
      "azure_api_management_backends"
    ],
    [
      "dev",
      "azure_api_management_policies"
    ],
    [
      "dev",
      "azure_api_management_policy_properties"
    ],
    [
      "dev",
      "azure_api_management_products"
    ],
    [
      "dev",
      "azure_api_management_services"
    ],
    [
      "dev",
      "azure_api_management_subscriptions"
    ],
    [
      "dev",
      "azure_event_grid_domain_topics"
    ],
    [
      "dev",
      "azure_event_grid_domains"
    ],
    [
      "dev",
      "azure_event_grid_event_subscriptions"
    ],
    [
      "dev",
      "azure_event_grid_partner_namespace_channels"
    ],
    [
      "dev",
      "azure_event_grid_partner_namespaces"
    ],
    [
      "dev",
      "azure_event_grid_partner_registrations"
    ],
    [
      "dev",
      "azure_event_grid_partner_topics"
    ],
    [
      "dev",
      "azure_event_grid_system_topics"
    ],
    [
      "dev",
      "azure_event_grid_topics"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_agreements"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_certificates"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_maps"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_partner_identities"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_partner_metadata"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_partners"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_schemas"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_sessions"
    ],
    [
      "dev",
      "azure_logic_app_integration_accounts"
    ],
    [
      "dev",
      "azure_logic_app_workflow_versions"
    ],
    [
      "dev",
      "azure_logic_app_workflows"
    ],
    [
      "dev",
      "azure_resource_groups"
    ],
    [
      "dev",
      "azure_service_bus_authorization_rules"
    ],
    [
      "dev",
      "azure_service_bus_namespaces"
    ],
    [
      "dev",
      "azure_service_bus_queues"
    ],
    [
      "dev",
      "azure_service_bus_topic_subscription_rules"
    ],
    [
      "dev",
      "azure_service_bus_topic_subscriptions"
    ],
    [
      "dev",
      "azure_service_bus_topics"
    ],
    [
      "dev",
      "azure_standard_app_workflows"
    ],
    [
      "dev",
      "azure_standard_apps"
    ],
    [
      "dev",
      "azure_subscriptions"
    ],
    [
      "dev",
      "azure_tenants"
    ],
    [
      "dev",
      "btp_api_management_product_applications"
    ],
    [
      "dev",
      "btp_api_management_product_rate_plans"
    ],
    [
      "dev",
      "btp_api_management_products"
    ],
    [
      "dev",
      "btp_api_management_providers"
    ],
    [
      "dev",
      "btp_api_management_proxies"
    ],
    [
      "dev",
      "btp_api_management_proxy_products"
    ],
    [
      "dev",
      "btp_cloud_integration_artefacts"
    ],
    [
      "dev",
      "btp_cloud_integration_configurations"
    ],
    [
      "dev",
      "btp_cloud_integration_connections"
    ],
    [
      "dev",
      "btp_cloud_integration_credentials"
    ],
    [
      "dev",
      "btp_cloud_integration_message_attachments"
    ],
    [
      "dev",
      "btp_cloud_integration_message_properties"
    ],
    [
      "dev",
      "btp_cloud_integration_message_store_entries"
    ],
    [
      "dev",
      "btp_cloud_integration_messages"
    ],
    [
      "dev",
      "btp_cloud_integration_oauth2credentials"
    ],
    [
      "dev",
      "btp_cloud_integration_package_tags"
    ],
    [
      "dev",
      "btp_cloud_integration_packages"
    ],
    [
      "dev",
      "btp_cloud_integration_participants"
    ],
    [
      "dev",
      "btp_cloud_integration_resources"
    ],
    [
      "dev",
      "btp_cloud_integration_runtime_artefacts"
    ],
    [
      "dev",
      "btp_cloud_integration_service_endpoints"
    ],
    [
      "dev",
      "btp_event_mesh_queue_topics"
    ],
    [
      "dev",
      "btp_event_mesh_queues"
    ],
    [
      "dev",
      "btp_event_mesh_topics"
    ],
    [
      "dev",
      "btp_event_mesh_webhooks"
    ],
    [
      "dev",
      "btp_tenants"
    ],
    [
      "dev",
      "data_flow_items"
    ],
    [
      "dev",
      "data_flows"
    ],
    [
      "dev",
      "data_source_access_tokens"
    ],
    [
      "dev",
      "data_source_api_keys"
    ],
    [
      "dev",
      "data_source_basic_auth_credentials"
    ],
    [
      "dev",
      "data_source_oauth2credentials"
    ],
    [
      "dev",
      "data_source_proxies"
    ],
    [
      "dev",
      "data_source_proxy_headers"
    ],
    [
      "dev",
      "data_sources"
    ],
    [
      "dev",
      "hopex_tenants"
    ],
    [
      "dev",
      "inventories"
    ],
    [
      "dev",
      "lean_ix_fields"
    ],
    [
      "dev",
      "lean_ix_tags"
    ],
    [
      "dev",
      "lean_ix_tenants"
    ],
    [
      "dev",
      "log_entries"
    ],
    [
      "dev",
      "log_entry_attributes"
    ],
    [
      "dev",
      "luy_tenants"
    ],
    [
      "dev",
      "metadata"
    ],
    [
      "dev",
      "pro_adapter_attributes"
    ],
    [
      "dev",
      "pro_adapter_module_parameters"
    ],
    [
      "dev",
      "pro_adapter_modules"
    ],
    [
      "dev",
      "pro_agreements"
    ],
    [
      "dev",
      "pro_communication_channels"
    ],
    [
      "dev",
      "pro_communication_components"
    ],
    [
      "dev",
      "pro_communication_parties"
    ],
    [
      "dev",
      "pro_configuration_scenario_channels"
    ],
    [
      "dev",
      "pro_configuration_scenario_components"
    ],
    [
      "dev",
      "pro_configuration_scenario_configurations"
    ],
    [
      "dev",
      "pro_configuration_scenario_parties"
    ],
    [
      "dev",
      "pro_configuration_scenario_receiver_agreements"
    ],
    [
      "dev",
      "pro_configuration_scenario_sender_agreements"
    ],
    [
      "dev",
      "pro_configuration_scenarios"
    ],
    [
      "dev",
      "pro_integrated_configuration_interfaces"
    ],
    [
      "dev",
      "pro_integrated_configuration_receiver_agreements"
    ],
    [
      "dev",
      "pro_integrated_configuration_receivers"
    ],
    [
      "dev",
      "pro_integrated_configuration_rules"
    ],
    [
      "dev",
      "pro_integrated_configuration_sender_agreements"
    ],
    [
      "dev",
      "pro_integrated_configurations"
    ],
    [
      "dev",
      "pro_performance_data"
    ],
    [
      "dev",
      "pro_performance_measure_points"
    ],
    [
      "dev",
      "pro_performance_queries"
    ],
    [
      "dev",
      "pro_performance_stats"
    ],
    [
      "dev",
      "pro_software_components"
    ],
    [
      "dev",
      "properties"
    ],
    [
      "dev",
      "property_types"
    ],
    [
      "dev",
      "sessions"
    ],
    [
      "dev",
      "system_mappings"
    ],
    [
      "dev",
      "systems"
    ],
    [
      "dev",
      "task_runs"
    ],
    [
      "dev",
      "tasks"
    ],
    [
      "dev",
      "user_sessions"
    ],
    [
      "dev",
      "users"
    ],
    [
      "information_schema",
      "sql_features"
    ],
    [
      "information_schema",
      "sql_implementation_info"
    ],
    [
      "information_schema",
      "sql_parts"
    ],
    [
      "information_schema",
      "sql_sizing"
    ],
    [
      "pg_catalog",
      "pg_aggregate"
    ],
    [
      "pg_catalog",
      "pg_am"
    ],
    [
      "pg_catalog",
      "pg_amop"
    ],
    [
      "pg_catalog",
      "pg_amproc"
    ],
    [
      "pg_catalog",
      "pg_attrdef"
    ],
    [
      "pg_catalog",
      "pg_attribute"
    ],
    [
      "pg_catalog",
      "pg_auth_members"
    ],
    [
      "pg_catalog",
      "pg_authid"
    ],
    [
      "pg_catalog",
      "pg_cast"
    ],
    [
      "pg_catalog",
      "pg_class"
    ],
    [
      "pg_catalog",
      "pg_collation"
    ],
    [
      "pg_catalog",
      "pg_constraint"
    ],
    [
      "pg_catalog",
      "pg_conversion"
    ],
    [
      "pg_catalog",
      "pg_database"
    ],
    [
      "pg_catalog",
      "pg_db_role_setting"
    ],
    [
      "pg_catalog",
      "pg_default_acl"
    ],
    [
      "pg_catalog",
      "pg_depend"
    ],
    [
      "pg_catalog",
      "pg_description"
    ],
    [
      "pg_catalog",
      "pg_enum"
    ],
    [
      "pg_catalog",
      "pg_event_trigger"
    ],
    [
      "pg_catalog",
      "pg_extension"
    ],
    [
      "pg_catalog",
      "pg_foreign_data_wrapper"
    ],
    [
      "pg_catalog",
      "pg_foreign_server"
    ],
    [
      "pg_catalog",
      "pg_foreign_table"
    ],
    [
      "pg_catalog",
      "pg_index"
    ],
    [
      "pg_catalog",
      "pg_inherits"
    ],
    [
      "pg_catalog",
      "pg_init_privs"
    ],
    [
      "pg_catalog",
      "pg_language"
    ],
    [
      "pg_catalog",
      "pg_largeobject"
    ],
    [
      "pg_catalog",
      "pg_largeobject_metadata"
    ],
    [
      "pg_catalog",
      "pg_namespace"
    ],
    [
      "pg_catalog",
      "pg_opclass"
    ],
    [
      "pg_catalog",
      "pg_operator"
    ],
    [
      "pg_catalog",
      "pg_opfamily"
    ],
    [
      "pg_catalog",
      "pg_parameter_acl"
    ],
    [
      "pg_catalog",
      "pg_partitioned_table"
    ],
    [
      "pg_catalog",
      "pg_policy"
    ],
    [
      "pg_catalog",
      "pg_proc"
    ],
    [
      "pg_catalog",
      "pg_publication"
    ],
    [
      "pg_catalog",
      "pg_publication_namespace"
    ],
    [
      "pg_catalog",
      "pg_publication_rel"
    ],
    [
      "pg_catalog",
      "pg_range"
    ],
    [
      "pg_catalog",
      "pg_replication_origin"
    ],
    [
      "pg_catalog",
      "pg_rewrite"
    ],
    [
      "pg_catalog",
      "pg_seclabel"
    ],
    [
      "pg_catalog",
      "pg_sequence"
    ],
    [
      "pg_catalog",
      "pg_shdepend"
    ],
    [
      "pg_catalog",
      "pg_shdescription"
    ],
    [
      "pg_catalog",
      "pg_shseclabel"
    ],
    [
      "pg_catalog",
      "pg_statistic"
    ],
    [
      "pg_catalog",
      "pg_statistic_ext"
    ],
    [
      "pg_catalog",
      "pg_statistic_ext_data"
    ],
    [
      "pg_catalog",
      "pg_subscription"
    ],
    [
      "pg_catalog",
      "pg_subscription_rel"
    ],
    [
      "pg_catalog",
      "pg_tablespace"
    ],
    [
      "pg_catalog",
      "pg_transform"
    ],
    [
      "pg_catalog",
      "pg_trigger"
    ],
    [
      "pg_catalog",
      "pg_ts_config"
    ],
    [
      "pg_catalog",
      "pg_ts_config_map"
    ],
    [
      "pg_catalog",
      "pg_ts_dict"
    ],
    [
      "pg_catalog",
      "pg_ts_parser"
    ],
    [
      "pg_catalog",
      "pg_ts_template"
    ],
    [
      "pg_catalog",
      "pg_type"
    ],
    [
      "pg_catalog",
      "pg_user_mapping"
    ]
  ],
  "row_count": 206,
  "execution_time": 0.069775,
  "query": "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;",
  "status": "success"
}
2025-04-30 18:09:19,430 - DEBUG - STDOUT: SQL Executor node output: current_agent=router
2025-04-30 18:09:19,431 - DEBUG - STDOUT: SQL query results summary: status=success, rows=206
2025-04-30 18:09:19,432 - DEBUG - STDOUT: ==== SQL EXECUTOR NODE END ====
2025-04-30 18:09:19,434 - INFO - Processing agent: sql_executor
2025-04-30 18:09:19,434 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:19,434 - DEBUG - Event keys: dict_keys(['sql_executor'])
2025-04-30 18:09:19,434 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor']
2025-04-30 18:09:19,434 - DEBUG - STDOUT: 
==== ROUTER NODE START ====
2025-04-30 18:09:19,434 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:19,434 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor']
2025-04-30 18:09:19,434 - DEBUG - STDOUT: RouterAgent returned decision: {
  "router_response": {
    "route_to": "planner",
    "reason": "Starting new workflow",
    "feedback": "Initializing workflow with planner",
    "state_updates": {
      "workflow_started": true,
      "start_time": "2025-04-30T18:09:19.434210"
    },
    "confidence_score": 1.0,
    "requires_human_input": false
  }
}
2025-04-30 18:09:19,445 - DEBUG - STDOUT: Route decision: planner
2025-04-30 18:09:19,447 - DEBUG - STDOUT: Router node output: current_agent=planner
2025-04-30 18:09:19,450 - DEBUG - STDOUT: Router response: {
  "route_to": "planner",
  "reason": "Starting new workflow",
  "feedback": "Initializing workflow with planner",
  "state_updates": {
    "workflow_started": true,
    "start_time": "2025-04-30T18:09:19.434210"
  },
  "confidence_score": 1.0,
  "requires_human_input": false
}
2025-04-30 18:09:19,454 - DEBUG - STDOUT: ==== ROUTER NODE END ====
2025-04-30 18:09:19,455 - DEBUG - STDOUT: ROUTE DECISION: planner -> to_planner
2025-04-30 18:09:19,464 - INFO - Processing agent: router
2025-04-30 18:09:19,465 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:19,466 - DEBUG - Event keys: dict_keys(['router'])
2025-04-30 18:09:19,467 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router']
2025-04-30 18:09:19,468 - DEBUG - router response: {'route_to': 'planner', 'reason': 'Starting new workflow', 'feedback': 'Initializing workflow with planner', 'state_updates': {'workflow_started': True, 'start_time': '2025-04-30T18:09:19.434210'}, 'confidence_score': 1.0, 'requires_human_input': False}
2025-04-30 18:09:19,469 - DEBUG - STDOUT: 
==== PLANNER NODE START ====
2025-04-30 18:09:19,471 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:19,473 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router']
2025-04-30 18:09:19,474 - DEBUG - STDOUT: Processing user question: 'list all tables'
2025-04-30 18:09:19,481 - DEBUG - STDOUT: Successfully initialized database metadata store and discovery service
2025-04-30 18:09:19,483 - DEBUG - STDOUT: Successfully initialized PlannerAgent with database capabilities using model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:19,484 - DEBUG - STDOUT: PlannerAgent is using LLM to analyze the query and determine the appropriate database tables and columns
2025-04-30 18:09:19,485 - DEBUG - STDOUT: Invoking PlannerAgent with question: 'list all tables'
2025-04-30 18:09:19,485 - DEBUG - STDOUT: Invoking Planner with question: list all tables...
2025-04-30 18:09:20,205 - DEBUG - STDOUT: Raw Planner response: {
    "query_type": "sql",
    "primary_table_or_datasource": "information_schema.tables",
    "relevant_columns": ["table_schema", "table_name"],
    "filtering_conditions": "table_type = 'BASE TABLE'",
    "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database."
}
2025-04-30 18:09:20,214 - DEBUG - STDOUT: Discovering database structure for 'new', force_refresh=False
2025-04-30 18:09:20,217 - DEBUG - STDOUT: Discovered schemas: ['dev']
2025-04-30 18:09:20,218 - DEBUG - STDOUT: Discovering tables in schema 'dev' of database 'new'
2025-04-30 18:09:20,220 - DEBUG - STDOUT: Using cached metadata for schema 'dev', found 138 tables
2025-04-30 18:09:20,221 - DEBUG - STDOUT: First 10 tables: ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps']
2025-04-30 18:09:20,224 - DEBUG - STDOUT: ...and 128 more tables
2025-04-30 18:09:20,225 - DEBUG - STDOUT: Schema 'dev' has 138 tables
2025-04-30 18:09:20,228 - DEBUG - STDOUT: First 10 tables in schema 'dev': ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps']
2025-04-30 18:09:20,231 - DEBUG - STDOUT: ...and 128 more tables
2025-04-30 18:09:20,232 - DEBUG - STDOUT: Discovering tables in schema 'dev' of database 'new'
2025-04-30 18:09:20,233 - DEBUG - STDOUT: Using cached metadata for schema 'dev', found 138 tables
2025-04-30 18:09:20,234 - DEBUG - STDOUT: First 10 tables: ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps']
2025-04-30 18:09:20,237 - DEBUG - STDOUT: ...and 128 more tables
2025-04-30 18:09:20,239 - DEBUG - STDOUT: PlannerAgent returned plan: {
  "query_type": "sql",
  "primary_table_or_datasource": "information_schema.tables",
  "relevant_columns": [
    "table_schema",
    "table_name"
  ],
  "filtering_conditions": "table_type = 'BASE TABLE'",
  "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database.",
  "validated": true,
  "all_tables": {
    "dev": [
      "azure_standard_apps",
      "btp_cloud_integration_message_store_entries",
      "azure_event_grid_event_subscriptions",
      "btp_cloud_integration_credentials",
      "pro_communication_parties",
      "abap_soap_service_bindings",
      "data_sources",
      "pro_performance_queries",
      "abap_odata_services",
      "azure_logic_app_integration_account_maps",
      "pro_integrated_configuration_rules",
      "abap_systems",
      "abap_rfc_destination_options",
      "azure_logic_app_integration_account_partner_metadata",
      "data_source_proxy_headers",
      "abap_ports",
      "btp_cloud_integration_connections",
      "azure_logic_app_integration_accounts",
      "pro_configuration_scenarios",
      "abap_rfc_destinations",
      "azure_standard_app_workflows",
      "btp_cloud_integration_package_tags",
      "log_entries",
      "properties",
      "azure_api_management_subscriptions",
      "lean_ix_tenants",
      "pro_performance_measure_points",
      "pro_integrated_configuration_interfaces",
      "btp_cloud_integration_service_endpoints",
      "azure_logic_app_integration_account_agreements",
      "abap_partner_profiles",
      "btp_cloud_integration_configurations",
      "abap_inbound_partner_profiles",
      "azure_api_management_api_revisions",
      "pro_agreements",
      "pro_configuration_scenario_receiver_agreements",
      "sessions",
      "btp_event_mesh_queue_topics",
      "data_source_access_tokens",
      "btp_event_mesh_queues",
      "azure_event_grid_domain_topics",
      "azure_logic_app_workflow_versions",
      "pro_adapter_attributes",
      "data_flow_items",
      "pro_integrated_configurations",
      "btp_cloud_integration_artefacts",
      "azure_api_management_api_products",
      "azure_event_grid_partner_namespace_channels",
      "system_mappings",
      "pro_communication_components",
      "btp_cloud_integration_message_properties",
      "azure_service_bus_topics",
      "pro_performance_data",
      "pro_configuration_scenario_components",
      "pro_configuration_scenario_parties",
      "pro_software_components",
      "data_flows",
      "data_source_oauth2credentials",
      "btp_api_management_product_rate_plans",
      "azure_event_grid_system_topics",
      "btp_cloud_integration_messages",
      "btp_cloud_integration_runtime_artefacts",
      "pro_adapter_modules",
      "pro_configuration_scenario_sender_agreements",
      "azure_api_management_services",
      "lean_ix_fields",
      "pro_configuration_scenario_configurations",
      "azure_logic_app_workflows",
      "data_source_api_keys",
      "pro_integrated_configuration_sender_agreements",
      "azure_event_grid_partner_registrations",
      "metadata",
      "abap_integration_engine_interfaces",
      "azure_api_management_apis",
      "btp_cloud_integration_resources",
      "azure_event_grid_topics",
      "lean_ix_tags",
      "abap_soap_service_binding_properties",
      "hopex_tenants",
      "azure_logic_app_integration_account_schemas",
      "btp_api_management_product_applications",
      "btp_api_management_products",
      "btp_api_management_providers",
      "azure_api_management_backend_parameters",
      "azure_service_bus_topic_subscriptions",
      "task_runs",
      "azure_service_bus_queues",
      "abap_qrfc_destinations",
      "luy_tenants",
      "tasks",
      "abap_soap_services",
      "abap_paths",
      "azure_logic_app_integration_account_certificates",
      "btp_event_mesh_webhooks",
      "pro_communication_channels",
      "azure_tenants",
      "pro_integrated_configuration_receiver_agreements",
      "btp_event_mesh_topics",
      "data_source_proxies",
      "pro_performance_stats",
      "systems",
      "pro_integrated_configuration_receivers",
      "log_entry_attributes",
      "inventories",
      "anypoint_assets",
      "azure_api_management_policy_properties",
      "btp_cloud_integration_message_attachments",
      "pro_adapter_module_parameters",
      "azure_api_management_backends",
      "data_source_basic_auth_credentials",
      "azure_api_management_api_operation_parameters",
      "azure_event_grid_domains",
      "azure_service_bus_topic_subscription_rules",
      "azure_event_grid_partner_topics",
      "abap_outbound_partner_profiles",
      "azure_subscriptions",
      "anypoint_organisations",
      "pro_configuration_scenario_channels",
      "btp_tenants",
      "btp_api_management_proxy_products",
      "azure_api_management_products",
      "azure_event_grid_partner_namespaces",
      "user_sessions",
      "azure_logic_app_integration_account_sessions",
      "azure_logic_app_integration_account_partner_identities",
      "azure_logic_app_integration_account_partners",
      "btp_cloud_integration_participants",
      "azure_service_bus_namespaces",
      "btp_cloud_integration_oauth2credentials",
      "users",
      "azure_api_management_api_operation_replies",
      "azure_service_bus_authorization_rules",
      "btp_api_management_proxies",
      "property_types",
      "azure_api_management_api_operations",
      "azure_api_management_policies",
      "btp_cloud_integration_packages",
      "azure_resource_groups"
    ]
  },
  "timestamp": "2025-04-30 18:09:20.239065",
  "agent": "planner",
  "user_question": "list all tables",
  "database_context": {
    "database": "new",
    "schema": "dev",
    "metadata_available": true,
    "last_updated": "2025-04-30T12:57:32.798365"
  }
}
2025-04-30 18:09:20,298 - DEBUG - STDOUT: Planner node output: current_agent=selector
2025-04-30 18:09:20,299 - DEBUG - STDOUT: Planner response being sent to selector: {
  "query_type": "sql",
  "primary_table_or_datasource": "information_schema.tables",
  "relevant_columns": [
    "table_schema",
    "table_name"
  ],
  "filtering_conditions": "table_type = 'BASE TABLE'",
  "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database.",
  "validated": true,
  "all_tables": {
    "dev": [
      "azure_standard_apps",
      "btp_cloud_integration_message_store_entries",
      "azure_event_grid_event_subscriptions",
      "btp_cloud_integration_credentials",
      "pro_communication_parties",
      "abap_soap_service_bindings",
      "data_sources",
      "pro_performance_queries",
      "abap_odata_services",
      "azure_logic_app_integration_account_maps",
      "pro_integrated_configuration_rules",
      "abap_systems",
      "abap_rfc_destination_options",
      "azure_logic_app_integration_account_partner_metadata",
      "data_source_proxy_headers",
      "abap_ports",
      "btp_cloud_integration_connections",
      "azure_logic_app_integration_accounts",
      "pro_configuration_scenarios",
      "abap_rfc_destinations",
      "azure_standard_app_workflows",
      "btp_cloud_integration_package_tags",
      "log_entries",
      "properties",
      "azure_api_management_subscriptions",
      "lean_ix_tenants",
      "pro_performance_measure_points",
      "pro_integrated_configuration_interfaces",
      "btp_cloud_integration_service_endpoints",
      "azure_logic_app_integration_account_agreements",
      "abap_partner_profiles",
      "btp_cloud_integration_configurations",
      "abap_inbound_partner_profiles",
      "azure_api_management_api_revisions",
      "pro_agreements",
      "pro_configuration_scenario_receiver_agreements",
      "sessions",
      "btp_event_mesh_queue_topics",
      "data_source_access_tokens",
      "btp_event_mesh_queues",
      "azure_event_grid_domain_topics",
      "azure_logic_app_workflow_versions",
      "pro_adapter_attributes",
      "data_flow_items",
      "pro_integrated_configurations",
      "btp_cloud_integration_artefacts",
      "azure_api_management_api_products",
      "azure_event_grid_partner_namespace_channels",
      "system_mappings",
      "pro_communication_components",
      "btp_cloud_integration_message_properties",
      "azure_service_bus_topics",
      "pro_performance_data",
      "pro_configuration_scenario_components",
      "pro_configuration_scenario_parties",
      "pro_software_components",
      "data_flows",
      "data_source_oauth2credentials",
      "btp_api_management_product_rate_plans",
      "azure_event_grid_system_topics",
      "btp_cloud_integration_messages",
      "btp_cloud_integration_runtime_artefacts",
      "pro_adapter_modules",
      "pro_configuration_scenario_sender_agreements",
      "azure_api_management_services",
      "lean_ix_fields",
      "pro_configuration_scenario_configurations",
      "azure_logic_app_workflows",
      "data_source_api_keys",
      "pro_integrated_configuration_sender_agreements",
      "azure_event_grid_partner_registrations",
      "metadata",
      "abap_integration_engine_interfaces",
      "azure_api_management_apis",
      "btp_cloud_integration_resources",
      "azure_event_grid_topics",
      "lean_ix_tags",
      "abap_soap_service_binding_properties",
      "hopex_tenants",
      "azure_logic_app_integration_account_schemas",
      "btp_api_management_product_applications",
      "btp_api_management_products",
      "btp_api_management_providers",
      "azure_api_management_backend_parameters",
      "azure_service_bus_topic_subscriptions",
      "task_runs",
      "azure_service_bus_queues",
      "abap_qrfc_destinations",
      "luy_tenants",
      "tasks",
      "abap_soap_services",
      "abap_paths",
      "azure_logic_app_integration_account_certificates",
      "btp_event_mesh_webhooks",
      "pro_communication_channels",
      "azure_tenants",
      "pro_integrated_configuration_receiver_agreements",
      "btp_event_mesh_topics",
      "data_source_proxies",
      "pro_performance_stats",
      "systems",
      "pro_integrated_configuration_receivers",
      "log_entry_attributes",
      "inventories",
      "anypoint_assets",
      "azure_api_management_policy_properties",
      "btp_cloud_integration_message_attachments",
      "pro_adapter_module_parameters",
      "azure_api_management_backends",
      "data_source_basic_auth_credentials",
      "azure_api_management_api_operation_parameters",
      "azure_event_grid_domains",
      "azure_service_bus_topic_subscription_rules",
      "azure_event_grid_partner_topics",
      "abap_outbound_partner_profiles",
      "azure_subscriptions",
      "anypoint_organisations",
      "pro_configuration_scenario_channels",
      "btp_tenants",
      "btp_api_management_proxy_products",
      "azure_api_management_products",
      "azure_event_grid_partner_namespaces",
      "user_sessions",
      "azure_logic_app_integration_account_sessions",
      "azure_logic_app_integration_account_partner_identities",
      "azure_logic_app_integration_account_partners",
      "btp_cloud_integration_participants",
      "azure_service_bus_namespaces",
      "btp_cloud_integration_oauth2credentials",
      "users",
      "azure_api_management_api_operation_replies",
      "azure_service_bus_authorization_rules",
      "btp_api_management_proxies",
      "property_types",
      "azure_api_management_api_operations",
      "azure_api_management_policies",
      "btp_cloud_integration_packages",
      "azure_resource_groups"
    ]
  },
  "timestamp": "2025-04-30 18:09:20.239065",
  "agent": "planner",
  "user_question": "list all tables",
  "database_context": {
    "database": "new",
    "schema": "dev",
    "metadata_available": true,
    "last_updated": "2025-04-30T12:57:32.798365"
  }
}
2025-04-30 18:09:20,354 - DEBUG - STDOUT: ==== PLANNER NODE END ====
2025-04-30 18:09:20,354 - INFO - Processing agent: planner
2025-04-30 18:09:20,354 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:20,357 - DEBUG - Event keys: dict_keys(['planner'])
2025-04-30 18:09:20,357 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner']
2025-04-30 18:09:20,359 - DEBUG - planner response: {'query_type': 'sql', 'primary_table_or_datasource': 'information_schema.tables', 'relevant_columns': ['table_schema', 'table_name'], 'filtering_conditions': "table_type = 'BASE TABLE'", 'processing_instructions': 'Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database.', 'validated': True, 'all_tables': {'dev': ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps', 'pro_integrated_configuration_rules', 'abap_systems', 'abap_rfc_destination_options', 'azure_logic_app_integration_account_partner_metadata', 'data_source_proxy_headers', 'abap_ports', 'btp_cloud_integration_connections', 'azure_logic_app_integration_accounts', 'pro_configuration_scenarios', 'abap_rfc_destinations', 'azure_standard_app_workflows', 'btp_cloud_integration_package_tags', 'log_entries', 'properties', 'azure_api_management_subscriptions', 'lean_ix_tenants', 'pro_performance_measure_points', 'pro_integrated_configuration_interfaces', 'btp_cloud_integration_service_endpoints', 'azure_logic_app_integration_account_agreements', 'abap_partner_profiles', 'btp_cloud_integration_configurations', 'abap_inbound_partner_profiles', 'azure_api_management_api_revisions', 'pro_agreements', 'pro_configuration_scenario_receiver_agreements', 'sessions', 'btp_event_mesh_queue_topics', 'data_source_access_tokens', 'btp_event_mesh_queues', 'azure_event_grid_domain_topics', 'azure_logic_app_workflow_versions', 'pro_adapter_attributes', 'data_flow_items', 'pro_integrated_configurations', 'btp_cloud_integration_artefacts', 'azure_api_management_api_products', 'azure_event_grid_partner_namespace_channels', 'system_mappings', 'pro_communication_components', 'btp_cloud_integration_message_properties', 'azure_service_bus_topics', 'pro_performance_data', 'pro_configuration_scenario_components', 'pro_configuration_scenario_parties', 'pro_software_components', 'data_flows', 'data_source_oauth2credentials', 'btp_api_management_product_rate_plans', 'azure_event_grid_system_topics', 'btp_cloud_integration_messages', 'btp_cloud_integration_runtime_artefacts', 'pro_adapter_modules', 'pro_configuration_scenario_sender_agreements', 'azure_api_management_services', 'lean_ix_fields', 'pro_configuration_scenario_configurations', 'azure_logic_app_workflows', 'data_source_api_keys', 'pro_integrated_configuration_sender_agreements', 'azure_event_grid_partner_registrations', 'metadata', 'abap_integration_engine_interfaces', 'azure_api_management_apis', 'btp_cloud_integration_resources', 'azure_event_grid_topics', 'lean_ix_tags', 'abap_soap_service_binding_properties', 'hopex_tenants', 'azure_logic_app_integration_account_schemas', 'btp_api_management_product_applications', 'btp_api_management_products', 'btp_api_management_providers', 'azure_api_management_backend_parameters', 'azure_service_bus_topic_subscriptions', 'task_runs', 'azure_service_bus_queues', 'abap_qrfc_destinations', 'luy_tenants', 'tasks', 'abap_soap_services', 'abap_paths', 'azure_logic_app_integration_account_certificates', 'btp_event_mesh_webhooks', 'pro_communication_channels', 'azure_tenants', 'pro_integrated_configuration_receiver_agreements', 'btp_event_mesh_topics', 'data_source_proxies', 'pro_performance_stats', 'systems', 'pro_integrated_configuration_receivers', 'log_entry_attributes', 'inventories', 'anypoint_assets', 'azure_api_management_policy_properties', 'btp_cloud_integration_message_attachments', 'pro_adapter_module_parameters', 'azure_api_management_backends', 'data_source_basic_auth_credentials', 'azure_api_management_api_operation_parameters', 'azure_event_grid_domains', 'azure_service_bus_topic_subscription_rules', 'azure_event_grid_partner_topics', 'abap_outbound_partner_profiles', 'azure_subscriptions', 'anypoint_organisations', 'pro_configuration_scenario_channels', 'btp_tenants', 'btp_api_management_proxy_products', 'azure_api_management_products', 'azure_event_grid_partner_namespaces', 'user_sessions', 'azure_logic_app_integration_account_sessions', 'azure_logic_app_integration_account_partner_identities', 'azure_logic_app_integration_account_partners', 'btp_cloud_integration_participants', 'azure_service_bus_namespaces', 'btp_cloud_integration_oauth2credentials', 'users', 'azure_api_management_api_operation_replies', 'azure_service_bus_authorization_rules', 'btp_api_management_proxies', 'property_types', 'azure_api_management_api_operations', 'azure_api_management_policies', 'btp_cloud_integration_packages', 'azure_resource_groups']}, 'timestamp': '2025-04-30 18:09:20.239065', 'agent': 'planner', 'user_question': 'list all tables', 'database_context': {'database': 'new', 'schema': 'dev', 'metadata_available': True, 'last_updated': '2025-04-30T12:57:32.798365'}}
2025-04-30 18:09:20,368 - DEBUG - STDOUT: 
==== SELECTOR NODE START ====
2025-04-30 18:09:20,368 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:20,368 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner']
2025-04-30 18:09:20,373 - DEBUG - STDOUT: Planner response received: {
  "query_type": "sql",
  "primary_table_or_datasource": "information_schema.tables",
  "relevant_columns": [
    "table_schema",
    "table_name"
  ],
  "filtering_conditions": "table_type = 'BASE TABLE'",
  "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database.",
  "validated": true,
  "all_tables": {
    "dev": [
      "azure_standard_apps",
      "btp_cloud_integration_message_store_entries",
      "azure_event_grid_event_subscriptions",
      "btp_cloud_integration_credentials",
      "pro_communication_parties",
      "abap_soap_service_bindings",
      "data_sources",
      "pro_performance_queries",
      "abap_odata_services",
      "azure_logic_app_integration_account_maps",
      "pro_integrated_configuration_rules",
      "abap_systems",
      "abap_rfc_destination_options",
      "azure_logic_app_integration_account_partner_metadata",
      "data_source_proxy_headers",
      "abap_ports",
      "btp_cloud_integration_connections",
      "azure_logic_app_integration_accounts",
      "pro_configuration_scenarios",
      "abap_rfc_destinations",
      "azure_standard_app_workflows",
      "btp_cloud_integration_package_tags",
      "log_entries",
      "properties",
      "azure_api_management_subscriptions",
      "lean_ix_tenants",
      "pro_performance_measure_points",
      "pro_integrated_configuration_interfaces",
      "btp_cloud_integration_service_endpoints",
      "azure_logic_app_integration_account_agreements",
      "abap_partner_profiles",
      "btp_cloud_integration_configurations",
      "abap_inbound_partner_profiles",
      "azure_api_management_api_revisions",
      "pro_agreements",
      "pro_configuration_scenario_receiver_agreements",
      "sessions",
      "btp_event_mesh_queue_topics",
      "data_source_access_tokens",
      "btp_event_mesh_queues",
      "azure_event_grid_domain_topics",
      "azure_logic_app_workflow_versions",
      "pro_adapter_attributes",
      "data_flow_items",
      "pro_integrated_configurations",
      "btp_cloud_integration_artefacts",
      "azure_api_management_api_products",
      "azure_event_grid_partner_namespace_channels",
      "system_mappings",
      "pro_communication_components",
      "btp_cloud_integration_message_properties",
      "azure_service_bus_topics",
      "pro_performance_data",
      "pro_configuration_scenario_components",
      "pro_configuration_scenario_parties",
      "pro_software_components",
      "data_flows",
      "data_source_oauth2credentials",
      "btp_api_management_product_rate_plans",
      "azure_event_grid_system_topics",
      "btp_cloud_integration_messages",
      "btp_cloud_integration_runtime_artefacts",
      "pro_adapter_modules",
      "pro_configuration_scenario_sender_agreements",
      "azure_api_management_services",
      "lean_ix_fields",
      "pro_configuration_scenario_configurations",
      "azure_logic_app_workflows",
      "data_source_api_keys",
      "pro_integrated_configuration_sender_agreements",
      "azure_event_grid_partner_registrations",
      "metadata",
      "abap_integration_engine_interfaces",
      "azure_api_management_apis",
      "btp_cloud_integration_resources",
      "azure_event_grid_topics",
      "lean_ix_tags",
      "abap_soap_service_binding_properties",
      "hopex_tenants",
      "azure_logic_app_integration_account_schemas",
      "btp_api_management_product_applications",
      "btp_api_management_products",
      "btp_api_management_providers",
      "azure_api_management_backend_parameters",
      "azure_service_bus_topic_subscriptions",
      "task_runs",
      "azure_service_bus_queues",
      "abap_qrfc_destinations",
      "luy_tenants",
      "tasks",
      "abap_soap_services",
      "abap_paths",
      "azure_logic_app_integration_account_certificates",
      "btp_event_mesh_webhooks",
      "pro_communication_channels",
      "azure_tenants",
      "pro_integrated_configuration_receiver_agreements",
      "btp_event_mesh_topics",
      "data_source_proxies",
      "pro_performance_stats",
      "systems",
      "pro_integrated_configuration_receivers",
      "log_entry_attributes",
      "inventories",
      "anypoint_assets",
      "azure_api_management_policy_properties",
      "btp_cloud_integration_message_attachments",
      "pro_adapter_module_parameters",
      "azure_api_management_backends",
      "data_source_basic_auth_credentials",
      "azure_api_management_api_operation_parameters",
      "azure_event_grid_domains",
      "azure_service_bus_topic_subscription_rules",
      "azure_event_grid_partner_topics",
      "abap_outbound_partner_profiles",
      "azure_subscriptions",
      "anypoint_organisations",
      "pro_configuration_scenario_channels",
      "btp_tenants",
      "btp_api_management_proxy_products",
      "azure_api_management_products",
      "azure_event_grid_partner_namespaces",
      "user_sessions",
      "azure_logic_app_integration_account_sessions",
      "azure_logic_app_integration_account_partner_identities",
      "azure_logic_app_integration_account_partners",
      "btp_cloud_integration_participants",
      "azure_service_bus_namespaces",
      "btp_cloud_integration_oauth2credentials",
      "users",
      "azure_api_management_api_operation_replies",
      "azure_service_bus_authorization_rules",
      "btp_api_management_proxies",
      "property_types",
      "azure_api_management_api_operations",
      "azure_api_management_policies",
      "btp_cloud_integration_packages",
      "azure_resource_groups"
    ]
  },
  "timestamp": "2025-04-30 18:09:20.239065",
  "agent": "planner",
  "user_question": "list all tables",
  "database_context": {
    "database": "new",
    "schema": "dev",
    "metadata_available": true,
    "last_updated": "2025-04-30T12:57:32.798365"
  }
}
2025-04-30 18:09:20,422 - DEBUG - STDOUT: Selector is processing planner response for question: 'list all tables'
2025-04-30 18:09:20,423 - DEBUG - STDOUT: NOTE: The selector node is currently simplified and doesn't use LLM.
2025-04-30 18:09:20,424 - DEBUG - STDOUT: It simply passes through to the SQLGenerator without making actual selections.
2025-04-30 18:09:20,426 - DEBUG - STDOUT: Selector node output: current_agent=SQLGenerator
2025-04-30 18:09:20,428 - DEBUG - STDOUT: Selector response being sent to SQLGenerator: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "information_schema.tables",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [
      "table_schema",
      "table_name"
    ],
    "filters": "table_type = 'BASE TABLE'"
  }
}
2025-04-30 18:09:20,435 - DEBUG - STDOUT: ==== SELECTOR NODE END ====
2025-04-30 18:09:20,435 - INFO - Processing agent: selector
2025-04-30 18:09:20,435 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:20,438 - DEBUG - Event keys: dict_keys(['selector'])
2025-04-30 18:09:20,438 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector']
2025-04-30 18:09:20,439 - DEBUG - selector response: {'raw': 'Selection completed', 'selected_schemas': {}, 'selected_tool': 'sql_query', 'selected_datasource': 'information_schema.tables', 'information_needed': 'Table listing', 'reason_for_selection': 'Direct database query is the most efficient way to list tables', 'query_parameters': {'columns': ['table_schema', 'table_name'], 'filters': "table_type = 'BASE TABLE'"}}
2025-04-30 18:09:20,440 - DEBUG - STDOUT: 
==== SQL GENERATOR NODE START ====
2025-04-30 18:09:20,443 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:20,446 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector']
2025-04-30 18:09:20,447 - DEBUG - STDOUT: Selector response received: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "information_schema.tables",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [
      "table_schema",
      "table_name"
    ],
    "filters": "table_type = 'BASE TABLE'"
  }
}
2025-04-30 18:09:20,449 - DEBUG - STDOUT: Detected 'list all tables' query, generating standard query WITHOUT using LLM
2025-04-30 18:09:20,449 - DEBUG - STDOUT: This is a hardcoded response for a common query pattern
2025-04-30 18:09:20,454 - DEBUG - STDOUT: SQL Generator node output for 'list all tables': current_agent=reviewer
2025-04-30 18:09:20,455 - DEBUG - STDOUT: SQL query generated: SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;
2025-04-30 18:09:20,456 - DEBUG - STDOUT: SQL Generator response being sent to reviewer: {
  "sql_query": "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;",
  "explanation": "This query lists all tables in the database by querying the information_schema.tables view, which contains metadata about all tables in the database. It filters for base tables only (excluding views) and orders the results by schema and table name for better readability.",
  "validation_checks": [
    "Query targets information_schema which exists in all PostgreSQL databases",
    "Filtering on table_type ensures only actual tables are returned (not views)",
    "Results are ordered for better readability"
  ],
  "query_type": "SELECT",
  "estimated_complexity": "LOW",
  "required_indexes": []
}
2025-04-30 18:09:20,467 - DEBUG - STDOUT: ==== SQL GENERATOR NODE END ====
2025-04-30 18:09:20,468 - INFO - Processing agent: SQLGenerator
2025-04-30 18:09:20,469 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:20,469 - DEBUG - Event keys: dict_keys(['SQLGenerator'])
2025-04-30 18:09:20,470 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:20,471 - DEBUG - SQLGenerator response: {'sql_query': "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;", 'explanation': 'This query lists all tables in the database by querying the information_schema.tables view, which contains metadata about all tables in the database. It filters for base tables only (excluding views) and orders the results by schema and table name for better readability.', 'validation_checks': ['Query targets information_schema which exists in all PostgreSQL databases', 'Filtering on table_type ensures only actual tables are returned (not views)', 'Results are ordered for better readability'], 'query_type': 'SELECT', 'estimated_complexity': 'LOW', 'required_indexes': []}
2025-04-30 18:09:20,473 - DEBUG - STDOUT: 
==== REVIEWER NODE START ====
2025-04-30 18:09:20,476 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:20,478 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:20,479 - DEBUG - STDOUT: SQL query to review: SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;
2025-04-30 18:09:20,481 - DEBUG - STDOUT: SQLGenerator response received: {
  "sql_query": "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;",
  "explanation": "This query lists all tables in the database by querying the information_schema.tables view, which contains metadata about all tables in the database. It filters for base tables only (excluding views) and orders the results by schema and table name for better readability.",
  "validation_checks": [
    "Query targets information_schema which exists in all PostgreSQL databases",
    "Filtering on table_type ensures only actual tables are returned (not views)",
    "Results are ordered for better readability"
  ],
  "query_type": "SELECT",
  "estimated_complexity": "LOW",
  "required_indexes": []
}
2025-04-30 18:09:20,487 - DEBUG - STDOUT: Reviewer is analyzing SQL query for question: 'list all tables'
2025-04-30 18:09:20,488 - DEBUG - STDOUT: Using LLM-based ReviewerAgent to analyze the SQL query
2025-04-30 18:09:20,489 - DEBUG - STDOUT: Created ReviewerAgent with model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:20,492 - DEBUG - STDOUT: Invoking ReviewerAgent with user_question: 'list all tables' and sql_query: 'SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;'
2025-04-30 18:09:22,170 - DEBUG - STDOUT: ReviewerAgent returned review: {
  "reviewer_response": {
    "is_correct": true,
    "issues": [],
    "suggestions": [],
    "explanation": "SQL query validated successfully",
    "security_concerns": [],
    "performance_impact": "LOW",
    "confidence_score": 0.8,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:22.170896",
      "query_complexity": "UNKNOWN",
      "review_version": "1.0"
    },
    "recommendations": [],
    "risk_assessment": {
      "overall_risk_level": "LOW",
      "risk_breakdown": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0
      },
      "requires_immediate_attention": false
    }
  }
}
2025-04-30 18:09:22,192 - DEBUG - STDOUT: Reviewer node output: current_agent=sql_executor
2025-04-30 18:09:22,196 - DEBUG - STDOUT: Reviewer response being sent to sql_executor: {
  "reviewer_response": {
    "is_correct": true,
    "issues": [],
    "suggestions": [],
    "explanation": "SQL query validated successfully",
    "security_concerns": [],
    "performance_impact": "LOW",
    "confidence_score": 0.8,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:22.170896",
      "query_complexity": "UNKNOWN",
      "review_version": "1.0"
    },
    "recommendations": [],
    "risk_assessment": {
      "overall_risk_level": "LOW",
      "risk_breakdown": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0
      },
      "requires_immediate_attention": false
    }
  }
}
2025-04-30 18:09:22,206 - DEBUG - STDOUT: ==== REVIEWER NODE END ====
2025-04-30 18:09:22,208 - INFO - Processing agent: reviewer
2025-04-30 18:09:22,209 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:22,210 - DEBUG - Event keys: dict_keys(['reviewer'])
2025-04-30 18:09:22,211 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:22,212 - DEBUG - reviewer response: {'reviewer_response': {'is_correct': True, 'issues': [], 'suggestions': [], 'explanation': 'SQL query validated successfully', 'security_concerns': [], 'performance_impact': 'LOW', 'confidence_score': 0.8, 'metadata': {'reviewed_at': '2025-04-30T18:09:22.170896', 'query_complexity': 'UNKNOWN', 'review_version': '1.0'}, 'recommendations': [], 'risk_assessment': {'overall_risk_level': 'LOW', 'risk_breakdown': {'critical': 0, 'high': 0, 'medium': 0, 'low': 0}, 'requires_immediate_attention': False}}}
2025-04-30 18:09:22,214 - DEBUG - STDOUT: 
==== SQL EXECUTOR NODE START ====
2025-04-30 18:09:22,215 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:22,216 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:22,217 - DEBUG - STDOUT: SQL query to execute: SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;
2025-04-30 18:09:22,219 - DEBUG - STDOUT: Reviewer response received: {
  "reviewer_response": {
    "is_correct": true,
    "issues": [],
    "suggestions": [],
    "explanation": "SQL query validated successfully",
    "security_concerns": [],
    "performance_impact": "LOW",
    "confidence_score": 0.8,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:22.170896",
      "query_complexity": "UNKNOWN",
      "review_version": "1.0"
    },
    "recommendations": [],
    "risk_assessment": {
      "overall_risk_level": "LOW",
      "risk_breakdown": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0
      },
      "requires_immediate_attention": false
    }
  }
}
2025-04-30 18:09:22,228 - DEBUG - STDOUT: SQL Executor is processing SQL query: 'SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;'
2025-04-30 18:09:22,230 - DEBUG - STDOUT: Executing SQL query against database: 'SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;'
2025-04-30 18:09:22,231 - DEBUG - STDOUT: NOTE: SQL Executor does not use LLM. It directly executes the SQL query against the database.
2025-04-30 18:09:22,231 - DEBUG - STDOUT: Attempting database connection to localhost:5432/new as postgres
2025-04-30 18:09:22,300 - DEBUG - STDOUT: Successfully connected to database new at localhost:5432
2025-04-30 18:09:22,302 - DEBUG - STDOUT: Database is available
2025-04-30 18:09:22,303 - DEBUG - STDOUT: Attempting database connection to localhost:5432/new as postgres
2025-04-30 18:09:22,367 - DEBUG - STDOUT: Successfully connected to database new at localhost:5432
2025-04-30 18:09:22,379 - DEBUG - STDOUT: Successfully executed query against actual database
2025-04-30 18:09:22,382 - DEBUG - STDOUT: SQL query execution results: {
  "column_names": [
    "table_schema",
    "table_name"
  ],
  "rows": [
    [
      "dev",
      "abap_inbound_partner_profiles"
    ],
    [
      "dev",
      "abap_integration_engine_interfaces"
    ],
    [
      "dev",
      "abap_odata_services"
    ],
    [
      "dev",
      "abap_outbound_partner_profiles"
    ],
    [
      "dev",
      "abap_partner_profiles"
    ],
    [
      "dev",
      "abap_paths"
    ],
    [
      "dev",
      "abap_ports"
    ],
    [
      "dev",
      "abap_qrfc_destinations"
    ],
    [
      "dev",
      "abap_rfc_destination_options"
    ],
    [
      "dev",
      "abap_rfc_destinations"
    ],
    [
      "dev",
      "abap_soap_service_binding_properties"
    ],
    [
      "dev",
      "abap_soap_service_bindings"
    ],
    [
      "dev",
      "abap_soap_services"
    ],
    [
      "dev",
      "abap_systems"
    ],
    [
      "dev",
      "anypoint_assets"
    ],
    [
      "dev",
      "anypoint_organisations"
    ],
    [
      "dev",
      "azure_api_management_api_operation_parameters"
    ],
    [
      "dev",
      "azure_api_management_api_operation_replies"
    ],
    [
      "dev",
      "azure_api_management_api_operations"
    ],
    [
      "dev",
      "azure_api_management_api_products"
    ],
    [
      "dev",
      "azure_api_management_api_revisions"
    ],
    [
      "dev",
      "azure_api_management_apis"
    ],
    [
      "dev",
      "azure_api_management_backend_parameters"
    ],
    [
      "dev",
      "azure_api_management_backends"
    ],
    [
      "dev",
      "azure_api_management_policies"
    ],
    [
      "dev",
      "azure_api_management_policy_properties"
    ],
    [
      "dev",
      "azure_api_management_products"
    ],
    [
      "dev",
      "azure_api_management_services"
    ],
    [
      "dev",
      "azure_api_management_subscriptions"
    ],
    [
      "dev",
      "azure_event_grid_domain_topics"
    ],
    [
      "dev",
      "azure_event_grid_domains"
    ],
    [
      "dev",
      "azure_event_grid_event_subscriptions"
    ],
    [
      "dev",
      "azure_event_grid_partner_namespace_channels"
    ],
    [
      "dev",
      "azure_event_grid_partner_namespaces"
    ],
    [
      "dev",
      "azure_event_grid_partner_registrations"
    ],
    [
      "dev",
      "azure_event_grid_partner_topics"
    ],
    [
      "dev",
      "azure_event_grid_system_topics"
    ],
    [
      "dev",
      "azure_event_grid_topics"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_agreements"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_certificates"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_maps"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_partner_identities"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_partner_metadata"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_partners"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_schemas"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_sessions"
    ],
    [
      "dev",
      "azure_logic_app_integration_accounts"
    ],
    [
      "dev",
      "azure_logic_app_workflow_versions"
    ],
    [
      "dev",
      "azure_logic_app_workflows"
    ],
    [
      "dev",
      "azure_resource_groups"
    ],
    [
      "dev",
      "azure_service_bus_authorization_rules"
    ],
    [
      "dev",
      "azure_service_bus_namespaces"
    ],
    [
      "dev",
      "azure_service_bus_queues"
    ],
    [
      "dev",
      "azure_service_bus_topic_subscription_rules"
    ],
    [
      "dev",
      "azure_service_bus_topic_subscriptions"
    ],
    [
      "dev",
      "azure_service_bus_topics"
    ],
    [
      "dev",
      "azure_standard_app_workflows"
    ],
    [
      "dev",
      "azure_standard_apps"
    ],
    [
      "dev",
      "azure_subscriptions"
    ],
    [
      "dev",
      "azure_tenants"
    ],
    [
      "dev",
      "btp_api_management_product_applications"
    ],
    [
      "dev",
      "btp_api_management_product_rate_plans"
    ],
    [
      "dev",
      "btp_api_management_products"
    ],
    [
      "dev",
      "btp_api_management_providers"
    ],
    [
      "dev",
      "btp_api_management_proxies"
    ],
    [
      "dev",
      "btp_api_management_proxy_products"
    ],
    [
      "dev",
      "btp_cloud_integration_artefacts"
    ],
    [
      "dev",
      "btp_cloud_integration_configurations"
    ],
    [
      "dev",
      "btp_cloud_integration_connections"
    ],
    [
      "dev",
      "btp_cloud_integration_credentials"
    ],
    [
      "dev",
      "btp_cloud_integration_message_attachments"
    ],
    [
      "dev",
      "btp_cloud_integration_message_properties"
    ],
    [
      "dev",
      "btp_cloud_integration_message_store_entries"
    ],
    [
      "dev",
      "btp_cloud_integration_messages"
    ],
    [
      "dev",
      "btp_cloud_integration_oauth2credentials"
    ],
    [
      "dev",
      "btp_cloud_integration_package_tags"
    ],
    [
      "dev",
      "btp_cloud_integration_packages"
    ],
    [
      "dev",
      "btp_cloud_integration_participants"
    ],
    [
      "dev",
      "btp_cloud_integration_resources"
    ],
    [
      "dev",
      "btp_cloud_integration_runtime_artefacts"
    ],
    [
      "dev",
      "btp_cloud_integration_service_endpoints"
    ],
    [
      "dev",
      "btp_event_mesh_queue_topics"
    ],
    [
      "dev",
      "btp_event_mesh_queues"
    ],
    [
      "dev",
      "btp_event_mesh_topics"
    ],
    [
      "dev",
      "btp_event_mesh_webhooks"
    ],
    [
      "dev",
      "btp_tenants"
    ],
    [
      "dev",
      "data_flow_items"
    ],
    [
      "dev",
      "data_flows"
    ],
    [
      "dev",
      "data_source_access_tokens"
    ],
    [
      "dev",
      "data_source_api_keys"
    ],
    [
      "dev",
      "data_source_basic_auth_credentials"
    ],
    [
      "dev",
      "data_source_oauth2credentials"
    ],
    [
      "dev",
      "data_source_proxies"
    ],
    [
      "dev",
      "data_source_proxy_headers"
    ],
    [
      "dev",
      "data_sources"
    ],
    [
      "dev",
      "hopex_tenants"
    ],
    [
      "dev",
      "inventories"
    ],
    [
      "dev",
      "lean_ix_fields"
    ],
    [
      "dev",
      "lean_ix_tags"
    ],
    [
      "dev",
      "lean_ix_tenants"
    ],
    [
      "dev",
      "log_entries"
    ],
    [
      "dev",
      "log_entry_attributes"
    ],
    [
      "dev",
      "luy_tenants"
    ],
    [
      "dev",
      "metadata"
    ],
    [
      "dev",
      "pro_adapter_attributes"
    ],
    [
      "dev",
      "pro_adapter_module_parameters"
    ],
    [
      "dev",
      "pro_adapter_modules"
    ],
    [
      "dev",
      "pro_agreements"
    ],
    [
      "dev",
      "pro_communication_channels"
    ],
    [
      "dev",
      "pro_communication_components"
    ],
    [
      "dev",
      "pro_communication_parties"
    ],
    [
      "dev",
      "pro_configuration_scenario_channels"
    ],
    [
      "dev",
      "pro_configuration_scenario_components"
    ],
    [
      "dev",
      "pro_configuration_scenario_configurations"
    ],
    [
      "dev",
      "pro_configuration_scenario_parties"
    ],
    [
      "dev",
      "pro_configuration_scenario_receiver_agreements"
    ],
    [
      "dev",
      "pro_configuration_scenario_sender_agreements"
    ],
    [
      "dev",
      "pro_configuration_scenarios"
    ],
    [
      "dev",
      "pro_integrated_configuration_interfaces"
    ],
    [
      "dev",
      "pro_integrated_configuration_receiver_agreements"
    ],
    [
      "dev",
      "pro_integrated_configuration_receivers"
    ],
    [
      "dev",
      "pro_integrated_configuration_rules"
    ],
    [
      "dev",
      "pro_integrated_configuration_sender_agreements"
    ],
    [
      "dev",
      "pro_integrated_configurations"
    ],
    [
      "dev",
      "pro_performance_data"
    ],
    [
      "dev",
      "pro_performance_measure_points"
    ],
    [
      "dev",
      "pro_performance_queries"
    ],
    [
      "dev",
      "pro_performance_stats"
    ],
    [
      "dev",
      "pro_software_components"
    ],
    [
      "dev",
      "properties"
    ],
    [
      "dev",
      "property_types"
    ],
    [
      "dev",
      "sessions"
    ],
    [
      "dev",
      "system_mappings"
    ],
    [
      "dev",
      "systems"
    ],
    [
      "dev",
      "task_runs"
    ],
    [
      "dev",
      "tasks"
    ],
    [
      "dev",
      "user_sessions"
    ],
    [
      "dev",
      "users"
    ],
    [
      "information_schema",
      "sql_features"
    ],
    [
      "information_schema",
      "sql_implementation_info"
    ],
    [
      "information_schema",
      "sql_parts"
    ],
    [
      "information_schema",
      "sql_sizing"
    ],
    [
      "pg_catalog",
      "pg_aggregate"
    ],
    [
      "pg_catalog",
      "pg_am"
    ],
    [
      "pg_catalog",
      "pg_amop"
    ],
    [
      "pg_catalog",
      "pg_amproc"
    ],
    [
      "pg_catalog",
      "pg_attrdef"
    ],
    [
      "pg_catalog",
      "pg_attribute"
    ],
    [
      "pg_catalog",
      "pg_auth_members"
    ],
    [
      "pg_catalog",
      "pg_authid"
    ],
    [
      "pg_catalog",
      "pg_cast"
    ],
    [
      "pg_catalog",
      "pg_class"
    ],
    [
      "pg_catalog",
      "pg_collation"
    ],
    [
      "pg_catalog",
      "pg_constraint"
    ],
    [
      "pg_catalog",
      "pg_conversion"
    ],
    [
      "pg_catalog",
      "pg_database"
    ],
    [
      "pg_catalog",
      "pg_db_role_setting"
    ],
    [
      "pg_catalog",
      "pg_default_acl"
    ],
    [
      "pg_catalog",
      "pg_depend"
    ],
    [
      "pg_catalog",
      "pg_description"
    ],
    [
      "pg_catalog",
      "pg_enum"
    ],
    [
      "pg_catalog",
      "pg_event_trigger"
    ],
    [
      "pg_catalog",
      "pg_extension"
    ],
    [
      "pg_catalog",
      "pg_foreign_data_wrapper"
    ],
    [
      "pg_catalog",
      "pg_foreign_server"
    ],
    [
      "pg_catalog",
      "pg_foreign_table"
    ],
    [
      "pg_catalog",
      "pg_index"
    ],
    [
      "pg_catalog",
      "pg_inherits"
    ],
    [
      "pg_catalog",
      "pg_init_privs"
    ],
    [
      "pg_catalog",
      "pg_language"
    ],
    [
      "pg_catalog",
      "pg_largeobject"
    ],
    [
      "pg_catalog",
      "pg_largeobject_metadata"
    ],
    [
      "pg_catalog",
      "pg_namespace"
    ],
    [
      "pg_catalog",
      "pg_opclass"
    ],
    [
      "pg_catalog",
      "pg_operator"
    ],
    [
      "pg_catalog",
      "pg_opfamily"
    ],
    [
      "pg_catalog",
      "pg_parameter_acl"
    ],
    [
      "pg_catalog",
      "pg_partitioned_table"
    ],
    [
      "pg_catalog",
      "pg_policy"
    ],
    [
      "pg_catalog",
      "pg_proc"
    ],
    [
      "pg_catalog",
      "pg_publication"
    ],
    [
      "pg_catalog",
      "pg_publication_namespace"
    ],
    [
      "pg_catalog",
      "pg_publication_rel"
    ],
    [
      "pg_catalog",
      "pg_range"
    ],
    [
      "pg_catalog",
      "pg_replication_origin"
    ],
    [
      "pg_catalog",
      "pg_rewrite"
    ],
    [
      "pg_catalog",
      "pg_seclabel"
    ],
    [
      "pg_catalog",
      "pg_sequence"
    ],
    [
      "pg_catalog",
      "pg_shdepend"
    ],
    [
      "pg_catalog",
      "pg_shdescription"
    ],
    [
      "pg_catalog",
      "pg_shseclabel"
    ],
    [
      "pg_catalog",
      "pg_statistic"
    ],
    [
      "pg_catalog",
      "pg_statistic_ext"
    ],
    [
      "pg_catalog",
      "pg_statistic_ext_data"
    ],
    [
      "pg_catalog",
      "pg_subscription"
    ],
    [
      "pg_catalog",
      "pg_subscription_rel"
    ],
    [
      "pg_catalog",
      "pg_tablespace"
    ],
    [
      "pg_catalog",
      "pg_transform"
    ],
    [
      "pg_catalog",
      "pg_trigger"
    ],
    [
      "pg_catalog",
      "pg_ts_config"
    ],
    [
      "pg_catalog",
      "pg_ts_config_map"
    ],
    [
      "pg_catalog",
      "pg_ts_dict"
    ],
    [
      "pg_catalog",
      "pg_ts_parser"
    ],
    [
      "pg_catalog",
      "pg_ts_template"
    ],
    [
      "pg_catalog",
      "pg_type"
    ],
    [
      "pg_catalog",
      "pg_user_mapping"
    ]
  ],
  "row_count": 206,
  "execution_time": 0.012,
  "query": "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;",
  "status": "success"
}
2025-04-30 18:09:22,626 - DEBUG - STDOUT: SQL Executor node output: current_agent=router
2025-04-30 18:09:22,628 - DEBUG - STDOUT: SQL query results summary: status=success, rows=206
2025-04-30 18:09:22,630 - DEBUG - STDOUT: ==== SQL EXECUTOR NODE END ====
2025-04-30 18:09:22,631 - INFO - Processing agent: sql_executor
2025-04-30 18:09:22,631 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:22,634 - DEBUG - Event keys: dict_keys(['sql_executor'])
2025-04-30 18:09:22,634 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor']
2025-04-30 18:09:22,635 - DEBUG - STDOUT: 
==== ROUTER NODE START ====
2025-04-30 18:09:22,637 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:22,638 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor']
2025-04-30 18:09:22,641 - DEBUG - STDOUT: RouterAgent returned decision: {
  "router_response": {
    "route_to": "planner",
    "reason": "Starting new workflow",
    "feedback": "Initializing workflow with planner",
    "state_updates": {
      "workflow_started": true,
      "start_time": "2025-04-30T18:09:22.641023"
    },
    "confidence_score": 1.0,
    "requires_human_input": false
  }
}
2025-04-30 18:09:22,644 - DEBUG - STDOUT: Route decision: planner
2025-04-30 18:09:22,644 - DEBUG - STDOUT: Router node output: current_agent=planner
2025-04-30 18:09:22,644 - DEBUG - STDOUT: Router response: {
  "route_to": "planner",
  "reason": "Starting new workflow",
  "feedback": "Initializing workflow with planner",
  "state_updates": {
    "workflow_started": true,
    "start_time": "2025-04-30T18:09:22.641023"
  },
  "confidence_score": 1.0,
  "requires_human_input": false
}
2025-04-30 18:09:22,651 - DEBUG - STDOUT: ==== ROUTER NODE END ====
2025-04-30 18:09:22,653 - DEBUG - STDOUT: ROUTE DECISION: planner -> to_planner
2025-04-30 18:09:22,656 - INFO - Processing agent: router
2025-04-30 18:09:22,659 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:22,659 - DEBUG - Event keys: dict_keys(['router'])
2025-04-30 18:09:22,663 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router']
2025-04-30 18:09:22,664 - DEBUG - router response: {'route_to': 'planner', 'reason': 'Starting new workflow', 'feedback': 'Initializing workflow with planner', 'state_updates': {'workflow_started': True, 'start_time': '2025-04-30T18:09:22.641023'}, 'confidence_score': 1.0, 'requires_human_input': False}
2025-04-30 18:09:22,665 - DEBUG - STDOUT: 
==== PLANNER NODE START ====
2025-04-30 18:09:22,666 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:22,668 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router']
2025-04-30 18:09:22,668 - DEBUG - STDOUT: Processing user question: 'list all tables'
2025-04-30 18:09:22,668 - DEBUG - STDOUT: Successfully initialized database metadata store and discovery service
2025-04-30 18:09:22,668 - DEBUG - STDOUT: Successfully initialized PlannerAgent with database capabilities using model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:22,673 - DEBUG - STDOUT: PlannerAgent is using LLM to analyze the query and determine the appropriate database tables and columns
2025-04-30 18:09:22,676 - DEBUG - STDOUT: Invoking PlannerAgent with question: 'list all tables'
2025-04-30 18:09:22,678 - DEBUG - STDOUT: Invoking Planner with question: list all tables...
2025-04-30 18:09:23,456 - DEBUG - STDOUT: Raw Planner response: {
    "query_type": "sql",
    "primary_table_or_datasource": "information_schema.tables",
    "relevant_columns": ["table_schema", "table_name"],
    "filtering_conditions": "table_type = 'BASE TABLE'",
    "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database."
}
2025-04-30 18:09:23,475 - DEBUG - STDOUT: Discovering database structure for 'new', force_refresh=False
2025-04-30 18:09:23,479 - DEBUG - STDOUT: Discovered schemas: ['dev']
2025-04-30 18:09:23,480 - DEBUG - STDOUT: Discovering tables in schema 'dev' of database 'new'
2025-04-30 18:09:23,482 - DEBUG - STDOUT: Using cached metadata for schema 'dev', found 138 tables
2025-04-30 18:09:23,483 - DEBUG - STDOUT: First 10 tables: ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps']
2025-04-30 18:09:23,486 - DEBUG - STDOUT: ...and 128 more tables
2025-04-30 18:09:23,487 - DEBUG - STDOUT: Schema 'dev' has 138 tables
2025-04-30 18:09:23,489 - DEBUG - STDOUT: First 10 tables in schema 'dev': ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps']
2025-04-30 18:09:23,493 - DEBUG - STDOUT: ...and 128 more tables
2025-04-30 18:09:23,495 - DEBUG - STDOUT: Discovering tables in schema 'dev' of database 'new'
2025-04-30 18:09:23,496 - DEBUG - STDOUT: Using cached metadata for schema 'dev', found 138 tables
2025-04-30 18:09:23,498 - DEBUG - STDOUT: First 10 tables: ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps']
2025-04-30 18:09:23,500 - DEBUG - STDOUT: ...and 128 more tables
2025-04-30 18:09:23,502 - DEBUG - STDOUT: PlannerAgent returned plan: {
  "query_type": "sql",
  "primary_table_or_datasource": "information_schema.tables",
  "relevant_columns": [
    "table_schema",
    "table_name"
  ],
  "filtering_conditions": "table_type = 'BASE TABLE'",
  "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database.",
  "validated": true,
  "all_tables": {
    "dev": [
      "azure_standard_apps",
      "btp_cloud_integration_message_store_entries",
      "azure_event_grid_event_subscriptions",
      "btp_cloud_integration_credentials",
      "pro_communication_parties",
      "abap_soap_service_bindings",
      "data_sources",
      "pro_performance_queries",
      "abap_odata_services",
      "azure_logic_app_integration_account_maps",
      "pro_integrated_configuration_rules",
      "abap_systems",
      "abap_rfc_destination_options",
      "azure_logic_app_integration_account_partner_metadata",
      "data_source_proxy_headers",
      "abap_ports",
      "btp_cloud_integration_connections",
      "azure_logic_app_integration_accounts",
      "pro_configuration_scenarios",
      "abap_rfc_destinations",
      "azure_standard_app_workflows",
      "btp_cloud_integration_package_tags",
      "log_entries",
      "properties",
      "azure_api_management_subscriptions",
      "lean_ix_tenants",
      "pro_performance_measure_points",
      "pro_integrated_configuration_interfaces",
      "btp_cloud_integration_service_endpoints",
      "azure_logic_app_integration_account_agreements",
      "abap_partner_profiles",
      "btp_cloud_integration_configurations",
      "abap_inbound_partner_profiles",
      "azure_api_management_api_revisions",
      "pro_agreements",
      "pro_configuration_scenario_receiver_agreements",
      "sessions",
      "btp_event_mesh_queue_topics",
      "data_source_access_tokens",
      "btp_event_mesh_queues",
      "azure_event_grid_domain_topics",
      "azure_logic_app_workflow_versions",
      "pro_adapter_attributes",
      "data_flow_items",
      "pro_integrated_configurations",
      "btp_cloud_integration_artefacts",
      "azure_api_management_api_products",
      "azure_event_grid_partner_namespace_channels",
      "system_mappings",
      "pro_communication_components",
      "btp_cloud_integration_message_properties",
      "azure_service_bus_topics",
      "pro_performance_data",
      "pro_configuration_scenario_components",
      "pro_configuration_scenario_parties",
      "pro_software_components",
      "data_flows",
      "data_source_oauth2credentials",
      "btp_api_management_product_rate_plans",
      "azure_event_grid_system_topics",
      "btp_cloud_integration_messages",
      "btp_cloud_integration_runtime_artefacts",
      "pro_adapter_modules",
      "pro_configuration_scenario_sender_agreements",
      "azure_api_management_services",
      "lean_ix_fields",
      "pro_configuration_scenario_configurations",
      "azure_logic_app_workflows",
      "data_source_api_keys",
      "pro_integrated_configuration_sender_agreements",
      "azure_event_grid_partner_registrations",
      "metadata",
      "abap_integration_engine_interfaces",
      "azure_api_management_apis",
      "btp_cloud_integration_resources",
      "azure_event_grid_topics",
      "lean_ix_tags",
      "abap_soap_service_binding_properties",
      "hopex_tenants",
      "azure_logic_app_integration_account_schemas",
      "btp_api_management_product_applications",
      "btp_api_management_products",
      "btp_api_management_providers",
      "azure_api_management_backend_parameters",
      "azure_service_bus_topic_subscriptions",
      "task_runs",
      "azure_service_bus_queues",
      "abap_qrfc_destinations",
      "luy_tenants",
      "tasks",
      "abap_soap_services",
      "abap_paths",
      "azure_logic_app_integration_account_certificates",
      "btp_event_mesh_webhooks",
      "pro_communication_channels",
      "azure_tenants",
      "pro_integrated_configuration_receiver_agreements",
      "btp_event_mesh_topics",
      "data_source_proxies",
      "pro_performance_stats",
      "systems",
      "pro_integrated_configuration_receivers",
      "log_entry_attributes",
      "inventories",
      "anypoint_assets",
      "azure_api_management_policy_properties",
      "btp_cloud_integration_message_attachments",
      "pro_adapter_module_parameters",
      "azure_api_management_backends",
      "data_source_basic_auth_credentials",
      "azure_api_management_api_operation_parameters",
      "azure_event_grid_domains",
      "azure_service_bus_topic_subscription_rules",
      "azure_event_grid_partner_topics",
      "abap_outbound_partner_profiles",
      "azure_subscriptions",
      "anypoint_organisations",
      "pro_configuration_scenario_channels",
      "btp_tenants",
      "btp_api_management_proxy_products",
      "azure_api_management_products",
      "azure_event_grid_partner_namespaces",
      "user_sessions",
      "azure_logic_app_integration_account_sessions",
      "azure_logic_app_integration_account_partner_identities",
      "azure_logic_app_integration_account_partners",
      "btp_cloud_integration_participants",
      "azure_service_bus_namespaces",
      "btp_cloud_integration_oauth2credentials",
      "users",
      "azure_api_management_api_operation_replies",
      "azure_service_bus_authorization_rules",
      "btp_api_management_proxies",
      "property_types",
      "azure_api_management_api_operations",
      "azure_api_management_policies",
      "btp_cloud_integration_packages",
      "azure_resource_groups"
    ]
  },
  "timestamp": "2025-04-30 18:09:23.501685",
  "agent": "planner",
  "user_question": "list all tables",
  "database_context": {
    "database": "new",
    "schema": "dev",
    "metadata_available": true,
    "last_updated": "2025-04-30T12:57:32.798365"
  }
}
2025-04-30 18:09:23,551 - DEBUG - STDOUT: Planner node output: current_agent=selector
2025-04-30 18:09:23,557 - DEBUG - STDOUT: Planner response being sent to selector: {
  "query_type": "sql",
  "primary_table_or_datasource": "information_schema.tables",
  "relevant_columns": [
    "table_schema",
    "table_name"
  ],
  "filtering_conditions": "table_type = 'BASE TABLE'",
  "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database.",
  "validated": true,
  "all_tables": {
    "dev": [
      "azure_standard_apps",
      "btp_cloud_integration_message_store_entries",
      "azure_event_grid_event_subscriptions",
      "btp_cloud_integration_credentials",
      "pro_communication_parties",
      "abap_soap_service_bindings",
      "data_sources",
      "pro_performance_queries",
      "abap_odata_services",
      "azure_logic_app_integration_account_maps",
      "pro_integrated_configuration_rules",
      "abap_systems",
      "abap_rfc_destination_options",
      "azure_logic_app_integration_account_partner_metadata",
      "data_source_proxy_headers",
      "abap_ports",
      "btp_cloud_integration_connections",
      "azure_logic_app_integration_accounts",
      "pro_configuration_scenarios",
      "abap_rfc_destinations",
      "azure_standard_app_workflows",
      "btp_cloud_integration_package_tags",
      "log_entries",
      "properties",
      "azure_api_management_subscriptions",
      "lean_ix_tenants",
      "pro_performance_measure_points",
      "pro_integrated_configuration_interfaces",
      "btp_cloud_integration_service_endpoints",
      "azure_logic_app_integration_account_agreements",
      "abap_partner_profiles",
      "btp_cloud_integration_configurations",
      "abap_inbound_partner_profiles",
      "azure_api_management_api_revisions",
      "pro_agreements",
      "pro_configuration_scenario_receiver_agreements",
      "sessions",
      "btp_event_mesh_queue_topics",
      "data_source_access_tokens",
      "btp_event_mesh_queues",
      "azure_event_grid_domain_topics",
      "azure_logic_app_workflow_versions",
      "pro_adapter_attributes",
      "data_flow_items",
      "pro_integrated_configurations",
      "btp_cloud_integration_artefacts",
      "azure_api_management_api_products",
      "azure_event_grid_partner_namespace_channels",
      "system_mappings",
      "pro_communication_components",
      "btp_cloud_integration_message_properties",
      "azure_service_bus_topics",
      "pro_performance_data",
      "pro_configuration_scenario_components",
      "pro_configuration_scenario_parties",
      "pro_software_components",
      "data_flows",
      "data_source_oauth2credentials",
      "btp_api_management_product_rate_plans",
      "azure_event_grid_system_topics",
      "btp_cloud_integration_messages",
      "btp_cloud_integration_runtime_artefacts",
      "pro_adapter_modules",
      "pro_configuration_scenario_sender_agreements",
      "azure_api_management_services",
      "lean_ix_fields",
      "pro_configuration_scenario_configurations",
      "azure_logic_app_workflows",
      "data_source_api_keys",
      "pro_integrated_configuration_sender_agreements",
      "azure_event_grid_partner_registrations",
      "metadata",
      "abap_integration_engine_interfaces",
      "azure_api_management_apis",
      "btp_cloud_integration_resources",
      "azure_event_grid_topics",
      "lean_ix_tags",
      "abap_soap_service_binding_properties",
      "hopex_tenants",
      "azure_logic_app_integration_account_schemas",
      "btp_api_management_product_applications",
      "btp_api_management_products",
      "btp_api_management_providers",
      "azure_api_management_backend_parameters",
      "azure_service_bus_topic_subscriptions",
      "task_runs",
      "azure_service_bus_queues",
      "abap_qrfc_destinations",
      "luy_tenants",
      "tasks",
      "abap_soap_services",
      "abap_paths",
      "azure_logic_app_integration_account_certificates",
      "btp_event_mesh_webhooks",
      "pro_communication_channels",
      "azure_tenants",
      "pro_integrated_configuration_receiver_agreements",
      "btp_event_mesh_topics",
      "data_source_proxies",
      "pro_performance_stats",
      "systems",
      "pro_integrated_configuration_receivers",
      "log_entry_attributes",
      "inventories",
      "anypoint_assets",
      "azure_api_management_policy_properties",
      "btp_cloud_integration_message_attachments",
      "pro_adapter_module_parameters",
      "azure_api_management_backends",
      "data_source_basic_auth_credentials",
      "azure_api_management_api_operation_parameters",
      "azure_event_grid_domains",
      "azure_service_bus_topic_subscription_rules",
      "azure_event_grid_partner_topics",
      "abap_outbound_partner_profiles",
      "azure_subscriptions",
      "anypoint_organisations",
      "pro_configuration_scenario_channels",
      "btp_tenants",
      "btp_api_management_proxy_products",
      "azure_api_management_products",
      "azure_event_grid_partner_namespaces",
      "user_sessions",
      "azure_logic_app_integration_account_sessions",
      "azure_logic_app_integration_account_partner_identities",
      "azure_logic_app_integration_account_partners",
      "btp_cloud_integration_participants",
      "azure_service_bus_namespaces",
      "btp_cloud_integration_oauth2credentials",
      "users",
      "azure_api_management_api_operation_replies",
      "azure_service_bus_authorization_rules",
      "btp_api_management_proxies",
      "property_types",
      "azure_api_management_api_operations",
      "azure_api_management_policies",
      "btp_cloud_integration_packages",
      "azure_resource_groups"
    ]
  },
  "timestamp": "2025-04-30 18:09:23.501685",
  "agent": "planner",
  "user_question": "list all tables",
  "database_context": {
    "database": "new",
    "schema": "dev",
    "metadata_available": true,
    "last_updated": "2025-04-30T12:57:32.798365"
  }
}
2025-04-30 18:09:23,605 - DEBUG - STDOUT: ==== PLANNER NODE END ====
2025-04-30 18:09:23,608 - INFO - Processing agent: planner
2025-04-30 18:09:23,608 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:23,609 - DEBUG - Event keys: dict_keys(['planner'])
2025-04-30 18:09:23,609 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner']
2025-04-30 18:09:23,609 - DEBUG - planner response: {'query_type': 'sql', 'primary_table_or_datasource': 'information_schema.tables', 'relevant_columns': ['table_schema', 'table_name'], 'filtering_conditions': "table_type = 'BASE TABLE'", 'processing_instructions': 'Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database.', 'validated': True, 'all_tables': {'dev': ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps', 'pro_integrated_configuration_rules', 'abap_systems', 'abap_rfc_destination_options', 'azure_logic_app_integration_account_partner_metadata', 'data_source_proxy_headers', 'abap_ports', 'btp_cloud_integration_connections', 'azure_logic_app_integration_accounts', 'pro_configuration_scenarios', 'abap_rfc_destinations', 'azure_standard_app_workflows', 'btp_cloud_integration_package_tags', 'log_entries', 'properties', 'azure_api_management_subscriptions', 'lean_ix_tenants', 'pro_performance_measure_points', 'pro_integrated_configuration_interfaces', 'btp_cloud_integration_service_endpoints', 'azure_logic_app_integration_account_agreements', 'abap_partner_profiles', 'btp_cloud_integration_configurations', 'abap_inbound_partner_profiles', 'azure_api_management_api_revisions', 'pro_agreements', 'pro_configuration_scenario_receiver_agreements', 'sessions', 'btp_event_mesh_queue_topics', 'data_source_access_tokens', 'btp_event_mesh_queues', 'azure_event_grid_domain_topics', 'azure_logic_app_workflow_versions', 'pro_adapter_attributes', 'data_flow_items', 'pro_integrated_configurations', 'btp_cloud_integration_artefacts', 'azure_api_management_api_products', 'azure_event_grid_partner_namespace_channels', 'system_mappings', 'pro_communication_components', 'btp_cloud_integration_message_properties', 'azure_service_bus_topics', 'pro_performance_data', 'pro_configuration_scenario_components', 'pro_configuration_scenario_parties', 'pro_software_components', 'data_flows', 'data_source_oauth2credentials', 'btp_api_management_product_rate_plans', 'azure_event_grid_system_topics', 'btp_cloud_integration_messages', 'btp_cloud_integration_runtime_artefacts', 'pro_adapter_modules', 'pro_configuration_scenario_sender_agreements', 'azure_api_management_services', 'lean_ix_fields', 'pro_configuration_scenario_configurations', 'azure_logic_app_workflows', 'data_source_api_keys', 'pro_integrated_configuration_sender_agreements', 'azure_event_grid_partner_registrations', 'metadata', 'abap_integration_engine_interfaces', 'azure_api_management_apis', 'btp_cloud_integration_resources', 'azure_event_grid_topics', 'lean_ix_tags', 'abap_soap_service_binding_properties', 'hopex_tenants', 'azure_logic_app_integration_account_schemas', 'btp_api_management_product_applications', 'btp_api_management_products', 'btp_api_management_providers', 'azure_api_management_backend_parameters', 'azure_service_bus_topic_subscriptions', 'task_runs', 'azure_service_bus_queues', 'abap_qrfc_destinations', 'luy_tenants', 'tasks', 'abap_soap_services', 'abap_paths', 'azure_logic_app_integration_account_certificates', 'btp_event_mesh_webhooks', 'pro_communication_channels', 'azure_tenants', 'pro_integrated_configuration_receiver_agreements', 'btp_event_mesh_topics', 'data_source_proxies', 'pro_performance_stats', 'systems', 'pro_integrated_configuration_receivers', 'log_entry_attributes', 'inventories', 'anypoint_assets', 'azure_api_management_policy_properties', 'btp_cloud_integration_message_attachments', 'pro_adapter_module_parameters', 'azure_api_management_backends', 'data_source_basic_auth_credentials', 'azure_api_management_api_operation_parameters', 'azure_event_grid_domains', 'azure_service_bus_topic_subscription_rules', 'azure_event_grid_partner_topics', 'abap_outbound_partner_profiles', 'azure_subscriptions', 'anypoint_organisations', 'pro_configuration_scenario_channels', 'btp_tenants', 'btp_api_management_proxy_products', 'azure_api_management_products', 'azure_event_grid_partner_namespaces', 'user_sessions', 'azure_logic_app_integration_account_sessions', 'azure_logic_app_integration_account_partner_identities', 'azure_logic_app_integration_account_partners', 'btp_cloud_integration_participants', 'azure_service_bus_namespaces', 'btp_cloud_integration_oauth2credentials', 'users', 'azure_api_management_api_operation_replies', 'azure_service_bus_authorization_rules', 'btp_api_management_proxies', 'property_types', 'azure_api_management_api_operations', 'azure_api_management_policies', 'btp_cloud_integration_packages', 'azure_resource_groups']}, 'timestamp': '2025-04-30 18:09:23.501685', 'agent': 'planner', 'user_question': 'list all tables', 'database_context': {'database': 'new', 'schema': 'dev', 'metadata_available': True, 'last_updated': '2025-04-30T12:57:32.798365'}}
2025-04-30 18:09:23,624 - DEBUG - STDOUT: 
==== SELECTOR NODE START ====
2025-04-30 18:09:23,627 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:23,628 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner']
2025-04-30 18:09:23,629 - DEBUG - STDOUT: Planner response received: {
  "query_type": "sql",
  "primary_table_or_datasource": "information_schema.tables",
  "relevant_columns": [
    "table_schema",
    "table_name"
  ],
  "filtering_conditions": "table_type = 'BASE TABLE'",
  "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database.",
  "validated": true,
  "all_tables": {
    "dev": [
      "azure_standard_apps",
      "btp_cloud_integration_message_store_entries",
      "azure_event_grid_event_subscriptions",
      "btp_cloud_integration_credentials",
      "pro_communication_parties",
      "abap_soap_service_bindings",
      "data_sources",
      "pro_performance_queries",
      "abap_odata_services",
      "azure_logic_app_integration_account_maps",
      "pro_integrated_configuration_rules",
      "abap_systems",
      "abap_rfc_destination_options",
      "azure_logic_app_integration_account_partner_metadata",
      "data_source_proxy_headers",
      "abap_ports",
      "btp_cloud_integration_connections",
      "azure_logic_app_integration_accounts",
      "pro_configuration_scenarios",
      "abap_rfc_destinations",
      "azure_standard_app_workflows",
      "btp_cloud_integration_package_tags",
      "log_entries",
      "properties",
      "azure_api_management_subscriptions",
      "lean_ix_tenants",
      "pro_performance_measure_points",
      "pro_integrated_configuration_interfaces",
      "btp_cloud_integration_service_endpoints",
      "azure_logic_app_integration_account_agreements",
      "abap_partner_profiles",
      "btp_cloud_integration_configurations",
      "abap_inbound_partner_profiles",
      "azure_api_management_api_revisions",
      "pro_agreements",
      "pro_configuration_scenario_receiver_agreements",
      "sessions",
      "btp_event_mesh_queue_topics",
      "data_source_access_tokens",
      "btp_event_mesh_queues",
      "azure_event_grid_domain_topics",
      "azure_logic_app_workflow_versions",
      "pro_adapter_attributes",
      "data_flow_items",
      "pro_integrated_configurations",
      "btp_cloud_integration_artefacts",
      "azure_api_management_api_products",
      "azure_event_grid_partner_namespace_channels",
      "system_mappings",
      "pro_communication_components",
      "btp_cloud_integration_message_properties",
      "azure_service_bus_topics",
      "pro_performance_data",
      "pro_configuration_scenario_components",
      "pro_configuration_scenario_parties",
      "pro_software_components",
      "data_flows",
      "data_source_oauth2credentials",
      "btp_api_management_product_rate_plans",
      "azure_event_grid_system_topics",
      "btp_cloud_integration_messages",
      "btp_cloud_integration_runtime_artefacts",
      "pro_adapter_modules",
      "pro_configuration_scenario_sender_agreements",
      "azure_api_management_services",
      "lean_ix_fields",
      "pro_configuration_scenario_configurations",
      "azure_logic_app_workflows",
      "data_source_api_keys",
      "pro_integrated_configuration_sender_agreements",
      "azure_event_grid_partner_registrations",
      "metadata",
      "abap_integration_engine_interfaces",
      "azure_api_management_apis",
      "btp_cloud_integration_resources",
      "azure_event_grid_topics",
      "lean_ix_tags",
      "abap_soap_service_binding_properties",
      "hopex_tenants",
      "azure_logic_app_integration_account_schemas",
      "btp_api_management_product_applications",
      "btp_api_management_products",
      "btp_api_management_providers",
      "azure_api_management_backend_parameters",
      "azure_service_bus_topic_subscriptions",
      "task_runs",
      "azure_service_bus_queues",
      "abap_qrfc_destinations",
      "luy_tenants",
      "tasks",
      "abap_soap_services",
      "abap_paths",
      "azure_logic_app_integration_account_certificates",
      "btp_event_mesh_webhooks",
      "pro_communication_channels",
      "azure_tenants",
      "pro_integrated_configuration_receiver_agreements",
      "btp_event_mesh_topics",
      "data_source_proxies",
      "pro_performance_stats",
      "systems",
      "pro_integrated_configuration_receivers",
      "log_entry_attributes",
      "inventories",
      "anypoint_assets",
      "azure_api_management_policy_properties",
      "btp_cloud_integration_message_attachments",
      "pro_adapter_module_parameters",
      "azure_api_management_backends",
      "data_source_basic_auth_credentials",
      "azure_api_management_api_operation_parameters",
      "azure_event_grid_domains",
      "azure_service_bus_topic_subscription_rules",
      "azure_event_grid_partner_topics",
      "abap_outbound_partner_profiles",
      "azure_subscriptions",
      "anypoint_organisations",
      "pro_configuration_scenario_channels",
      "btp_tenants",
      "btp_api_management_proxy_products",
      "azure_api_management_products",
      "azure_event_grid_partner_namespaces",
      "user_sessions",
      "azure_logic_app_integration_account_sessions",
      "azure_logic_app_integration_account_partner_identities",
      "azure_logic_app_integration_account_partners",
      "btp_cloud_integration_participants",
      "azure_service_bus_namespaces",
      "btp_cloud_integration_oauth2credentials",
      "users",
      "azure_api_management_api_operation_replies",
      "azure_service_bus_authorization_rules",
      "btp_api_management_proxies",
      "property_types",
      "azure_api_management_api_operations",
      "azure_api_management_policies",
      "btp_cloud_integration_packages",
      "azure_resource_groups"
    ]
  },
  "timestamp": "2025-04-30 18:09:23.501685",
  "agent": "planner",
  "user_question": "list all tables",
  "database_context": {
    "database": "new",
    "schema": "dev",
    "metadata_available": true,
    "last_updated": "2025-04-30T12:57:32.798365"
  }
}
2025-04-30 18:09:23,678 - DEBUG - STDOUT: Selector is processing planner response for question: 'list all tables'
2025-04-30 18:09:23,679 - DEBUG - STDOUT: NOTE: The selector node is currently simplified and doesn't use LLM.
2025-04-30 18:09:23,679 - DEBUG - STDOUT: It simply passes through to the SQLGenerator without making actual selections.
2025-04-30 18:09:23,681 - DEBUG - STDOUT: Selector node output: current_agent=SQLGenerator
2025-04-30 18:09:23,682 - DEBUG - STDOUT: Selector response being sent to SQLGenerator: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "information_schema.tables",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [
      "table_schema",
      "table_name"
    ],
    "filters": "table_type = 'BASE TABLE'"
  }
}
2025-04-30 18:09:23,687 - DEBUG - STDOUT: ==== SELECTOR NODE END ====
2025-04-30 18:09:23,701 - INFO - Processing agent: selector
2025-04-30 18:09:23,702 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:23,704 - DEBUG - Event keys: dict_keys(['selector'])
2025-04-30 18:09:23,706 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector']
2025-04-30 18:09:23,708 - DEBUG - selector response: {'raw': 'Selection completed', 'selected_schemas': {}, 'selected_tool': 'sql_query', 'selected_datasource': 'information_schema.tables', 'information_needed': 'Table listing', 'reason_for_selection': 'Direct database query is the most efficient way to list tables', 'query_parameters': {'columns': ['table_schema', 'table_name'], 'filters': "table_type = 'BASE TABLE'"}}
2025-04-30 18:09:23,711 - DEBUG - STDOUT: 
==== SQL GENERATOR NODE START ====
2025-04-30 18:09:23,712 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:23,713 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector']
2025-04-30 18:09:23,714 - DEBUG - STDOUT: Selector response received: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "information_schema.tables",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [
      "table_schema",
      "table_name"
    ],
    "filters": "table_type = 'BASE TABLE'"
  }
}
2025-04-30 18:09:23,716 - DEBUG - STDOUT: Detected 'list all tables' query, generating standard query WITHOUT using LLM
2025-04-30 18:09:23,716 - DEBUG - STDOUT: This is a hardcoded response for a common query pattern
2025-04-30 18:09:23,716 - DEBUG - STDOUT: SQL Generator node output for 'list all tables': current_agent=reviewer
2025-04-30 18:09:23,723 - DEBUG - STDOUT: SQL query generated: SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;
2025-04-30 18:09:23,725 - DEBUG - STDOUT: SQL Generator response being sent to reviewer: {
  "sql_query": "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;",
  "explanation": "This query lists all tables in the database by querying the information_schema.tables view, which contains metadata about all tables in the database. It filters for base tables only (excluding views) and orders the results by schema and table name for better readability.",
  "validation_checks": [
    "Query targets information_schema which exists in all PostgreSQL databases",
    "Filtering on table_type ensures only actual tables are returned (not views)",
    "Results are ordered for better readability"
  ],
  "query_type": "SELECT",
  "estimated_complexity": "LOW",
  "required_indexes": []
}
2025-04-30 18:09:23,731 - DEBUG - STDOUT: ==== SQL GENERATOR NODE END ====
2025-04-30 18:09:23,733 - INFO - Processing agent: SQLGenerator
2025-04-30 18:09:23,733 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:23,734 - DEBUG - Event keys: dict_keys(['SQLGenerator'])
2025-04-30 18:09:23,734 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:23,734 - DEBUG - SQLGenerator response: {'sql_query': "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;", 'explanation': 'This query lists all tables in the database by querying the information_schema.tables view, which contains metadata about all tables in the database. It filters for base tables only (excluding views) and orders the results by schema and table name for better readability.', 'validation_checks': ['Query targets information_schema which exists in all PostgreSQL databases', 'Filtering on table_type ensures only actual tables are returned (not views)', 'Results are ordered for better readability'], 'query_type': 'SELECT', 'estimated_complexity': 'LOW', 'required_indexes': []}
2025-04-30 18:09:23,738 - DEBUG - STDOUT: 
==== REVIEWER NODE START ====
2025-04-30 18:09:23,740 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:23,742 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:23,744 - DEBUG - STDOUT: SQL query to review: SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;
2025-04-30 18:09:23,746 - DEBUG - STDOUT: SQLGenerator response received: {
  "sql_query": "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;",
  "explanation": "This query lists all tables in the database by querying the information_schema.tables view, which contains metadata about all tables in the database. It filters for base tables only (excluding views) and orders the results by schema and table name for better readability.",
  "validation_checks": [
    "Query targets information_schema which exists in all PostgreSQL databases",
    "Filtering on table_type ensures only actual tables are returned (not views)",
    "Results are ordered for better readability"
  ],
  "query_type": "SELECT",
  "estimated_complexity": "LOW",
  "required_indexes": []
}
2025-04-30 18:09:23,749 - DEBUG - STDOUT: Reviewer is analyzing SQL query for question: 'list all tables'
2025-04-30 18:09:23,749 - DEBUG - STDOUT: Using LLM-based ReviewerAgent to analyze the SQL query
2025-04-30 18:09:23,749 - DEBUG - STDOUT: Created ReviewerAgent with model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:23,754 - DEBUG - STDOUT: Invoking ReviewerAgent with user_question: 'list all tables' and sql_query: 'SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;'
2025-04-30 18:09:25,522 - DEBUG - STDOUT: ReviewerAgent returned review: {
  "reviewer_response": {
    "is_correct": true,
    "issues": [],
    "suggestions": [],
    "explanation": "SQL query validated successfully",
    "security_concerns": [],
    "performance_impact": "LOW",
    "confidence_score": 0.8,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:25.522122",
      "query_complexity": "UNKNOWN",
      "review_version": "1.0"
    },
    "recommendations": [],
    "risk_assessment": {
      "overall_risk_level": "LOW",
      "risk_breakdown": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0
      },
      "requires_immediate_attention": false
    }
  }
}
2025-04-30 18:09:25,538 - DEBUG - STDOUT: Reviewer node output: current_agent=sql_executor
2025-04-30 18:09:25,540 - DEBUG - STDOUT: Reviewer response being sent to sql_executor: {
  "reviewer_response": {
    "is_correct": true,
    "issues": [],
    "suggestions": [],
    "explanation": "SQL query validated successfully",
    "security_concerns": [],
    "performance_impact": "LOW",
    "confidence_score": 0.8,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:25.522122",
      "query_complexity": "UNKNOWN",
      "review_version": "1.0"
    },
    "recommendations": [],
    "risk_assessment": {
      "overall_risk_level": "LOW",
      "risk_breakdown": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0
      },
      "requires_immediate_attention": false
    }
  }
}
2025-04-30 18:09:25,548 - DEBUG - STDOUT: ==== REVIEWER NODE END ====
2025-04-30 18:09:25,551 - INFO - Processing agent: reviewer
2025-04-30 18:09:25,552 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:25,553 - DEBUG - Event keys: dict_keys(['reviewer'])
2025-04-30 18:09:25,554 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:25,556 - DEBUG - reviewer response: {'reviewer_response': {'is_correct': True, 'issues': [], 'suggestions': [], 'explanation': 'SQL query validated successfully', 'security_concerns': [], 'performance_impact': 'LOW', 'confidence_score': 0.8, 'metadata': {'reviewed_at': '2025-04-30T18:09:25.522122', 'query_complexity': 'UNKNOWN', 'review_version': '1.0'}, 'recommendations': [], 'risk_assessment': {'overall_risk_level': 'LOW', 'risk_breakdown': {'critical': 0, 'high': 0, 'medium': 0, 'low': 0}, 'requires_immediate_attention': False}}}
2025-04-30 18:09:25,558 - DEBUG - STDOUT: 
==== SQL EXECUTOR NODE START ====
2025-04-30 18:09:25,560 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:25,561 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:25,563 - DEBUG - STDOUT: SQL query to execute: SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;
2025-04-30 18:09:25,564 - DEBUG - STDOUT: Reviewer response received: {
  "reviewer_response": {
    "is_correct": true,
    "issues": [],
    "suggestions": [],
    "explanation": "SQL query validated successfully",
    "security_concerns": [],
    "performance_impact": "LOW",
    "confidence_score": 0.8,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:25.522122",
      "query_complexity": "UNKNOWN",
      "review_version": "1.0"
    },
    "recommendations": [],
    "risk_assessment": {
      "overall_risk_level": "LOW",
      "risk_breakdown": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0
      },
      "requires_immediate_attention": false
    }
  }
}
2025-04-30 18:09:25,574 - DEBUG - STDOUT: SQL Executor is processing SQL query: 'SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;'
2025-04-30 18:09:25,577 - DEBUG - STDOUT: Executing SQL query against database: 'SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;'
2025-04-30 18:09:25,578 - DEBUG - STDOUT: NOTE: SQL Executor does not use LLM. It directly executes the SQL query against the database.
2025-04-30 18:09:25,580 - DEBUG - STDOUT: Attempting database connection to localhost:5432/new as postgres
2025-04-30 18:09:25,655 - DEBUG - STDOUT: Successfully connected to database new at localhost:5432
2025-04-30 18:09:25,657 - DEBUG - STDOUT: Database is available
2025-04-30 18:09:25,658 - DEBUG - STDOUT: Attempting database connection to localhost:5432/new as postgres
2025-04-30 18:09:25,717 - DEBUG - STDOUT: Successfully connected to database new at localhost:5432
2025-04-30 18:09:25,729 - DEBUG - STDOUT: Successfully executed query against actual database
2025-04-30 18:09:25,732 - DEBUG - STDOUT: SQL query execution results: {
  "column_names": [
    "table_schema",
    "table_name"
  ],
  "rows": [
    [
      "dev",
      "abap_inbound_partner_profiles"
    ],
    [
      "dev",
      "abap_integration_engine_interfaces"
    ],
    [
      "dev",
      "abap_odata_services"
    ],
    [
      "dev",
      "abap_outbound_partner_profiles"
    ],
    [
      "dev",
      "abap_partner_profiles"
    ],
    [
      "dev",
      "abap_paths"
    ],
    [
      "dev",
      "abap_ports"
    ],
    [
      "dev",
      "abap_qrfc_destinations"
    ],
    [
      "dev",
      "abap_rfc_destination_options"
    ],
    [
      "dev",
      "abap_rfc_destinations"
    ],
    [
      "dev",
      "abap_soap_service_binding_properties"
    ],
    [
      "dev",
      "abap_soap_service_bindings"
    ],
    [
      "dev",
      "abap_soap_services"
    ],
    [
      "dev",
      "abap_systems"
    ],
    [
      "dev",
      "anypoint_assets"
    ],
    [
      "dev",
      "anypoint_organisations"
    ],
    [
      "dev",
      "azure_api_management_api_operation_parameters"
    ],
    [
      "dev",
      "azure_api_management_api_operation_replies"
    ],
    [
      "dev",
      "azure_api_management_api_operations"
    ],
    [
      "dev",
      "azure_api_management_api_products"
    ],
    [
      "dev",
      "azure_api_management_api_revisions"
    ],
    [
      "dev",
      "azure_api_management_apis"
    ],
    [
      "dev",
      "azure_api_management_backend_parameters"
    ],
    [
      "dev",
      "azure_api_management_backends"
    ],
    [
      "dev",
      "azure_api_management_policies"
    ],
    [
      "dev",
      "azure_api_management_policy_properties"
    ],
    [
      "dev",
      "azure_api_management_products"
    ],
    [
      "dev",
      "azure_api_management_services"
    ],
    [
      "dev",
      "azure_api_management_subscriptions"
    ],
    [
      "dev",
      "azure_event_grid_domain_topics"
    ],
    [
      "dev",
      "azure_event_grid_domains"
    ],
    [
      "dev",
      "azure_event_grid_event_subscriptions"
    ],
    [
      "dev",
      "azure_event_grid_partner_namespace_channels"
    ],
    [
      "dev",
      "azure_event_grid_partner_namespaces"
    ],
    [
      "dev",
      "azure_event_grid_partner_registrations"
    ],
    [
      "dev",
      "azure_event_grid_partner_topics"
    ],
    [
      "dev",
      "azure_event_grid_system_topics"
    ],
    [
      "dev",
      "azure_event_grid_topics"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_agreements"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_certificates"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_maps"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_partner_identities"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_partner_metadata"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_partners"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_schemas"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_sessions"
    ],
    [
      "dev",
      "azure_logic_app_integration_accounts"
    ],
    [
      "dev",
      "azure_logic_app_workflow_versions"
    ],
    [
      "dev",
      "azure_logic_app_workflows"
    ],
    [
      "dev",
      "azure_resource_groups"
    ],
    [
      "dev",
      "azure_service_bus_authorization_rules"
    ],
    [
      "dev",
      "azure_service_bus_namespaces"
    ],
    [
      "dev",
      "azure_service_bus_queues"
    ],
    [
      "dev",
      "azure_service_bus_topic_subscription_rules"
    ],
    [
      "dev",
      "azure_service_bus_topic_subscriptions"
    ],
    [
      "dev",
      "azure_service_bus_topics"
    ],
    [
      "dev",
      "azure_standard_app_workflows"
    ],
    [
      "dev",
      "azure_standard_apps"
    ],
    [
      "dev",
      "azure_subscriptions"
    ],
    [
      "dev",
      "azure_tenants"
    ],
    [
      "dev",
      "btp_api_management_product_applications"
    ],
    [
      "dev",
      "btp_api_management_product_rate_plans"
    ],
    [
      "dev",
      "btp_api_management_products"
    ],
    [
      "dev",
      "btp_api_management_providers"
    ],
    [
      "dev",
      "btp_api_management_proxies"
    ],
    [
      "dev",
      "btp_api_management_proxy_products"
    ],
    [
      "dev",
      "btp_cloud_integration_artefacts"
    ],
    [
      "dev",
      "btp_cloud_integration_configurations"
    ],
    [
      "dev",
      "btp_cloud_integration_connections"
    ],
    [
      "dev",
      "btp_cloud_integration_credentials"
    ],
    [
      "dev",
      "btp_cloud_integration_message_attachments"
    ],
    [
      "dev",
      "btp_cloud_integration_message_properties"
    ],
    [
      "dev",
      "btp_cloud_integration_message_store_entries"
    ],
    [
      "dev",
      "btp_cloud_integration_messages"
    ],
    [
      "dev",
      "btp_cloud_integration_oauth2credentials"
    ],
    [
      "dev",
      "btp_cloud_integration_package_tags"
    ],
    [
      "dev",
      "btp_cloud_integration_packages"
    ],
    [
      "dev",
      "btp_cloud_integration_participants"
    ],
    [
      "dev",
      "btp_cloud_integration_resources"
    ],
    [
      "dev",
      "btp_cloud_integration_runtime_artefacts"
    ],
    [
      "dev",
      "btp_cloud_integration_service_endpoints"
    ],
    [
      "dev",
      "btp_event_mesh_queue_topics"
    ],
    [
      "dev",
      "btp_event_mesh_queues"
    ],
    [
      "dev",
      "btp_event_mesh_topics"
    ],
    [
      "dev",
      "btp_event_mesh_webhooks"
    ],
    [
      "dev",
      "btp_tenants"
    ],
    [
      "dev",
      "data_flow_items"
    ],
    [
      "dev",
      "data_flows"
    ],
    [
      "dev",
      "data_source_access_tokens"
    ],
    [
      "dev",
      "data_source_api_keys"
    ],
    [
      "dev",
      "data_source_basic_auth_credentials"
    ],
    [
      "dev",
      "data_source_oauth2credentials"
    ],
    [
      "dev",
      "data_source_proxies"
    ],
    [
      "dev",
      "data_source_proxy_headers"
    ],
    [
      "dev",
      "data_sources"
    ],
    [
      "dev",
      "hopex_tenants"
    ],
    [
      "dev",
      "inventories"
    ],
    [
      "dev",
      "lean_ix_fields"
    ],
    [
      "dev",
      "lean_ix_tags"
    ],
    [
      "dev",
      "lean_ix_tenants"
    ],
    [
      "dev",
      "log_entries"
    ],
    [
      "dev",
      "log_entry_attributes"
    ],
    [
      "dev",
      "luy_tenants"
    ],
    [
      "dev",
      "metadata"
    ],
    [
      "dev",
      "pro_adapter_attributes"
    ],
    [
      "dev",
      "pro_adapter_module_parameters"
    ],
    [
      "dev",
      "pro_adapter_modules"
    ],
    [
      "dev",
      "pro_agreements"
    ],
    [
      "dev",
      "pro_communication_channels"
    ],
    [
      "dev",
      "pro_communication_components"
    ],
    [
      "dev",
      "pro_communication_parties"
    ],
    [
      "dev",
      "pro_configuration_scenario_channels"
    ],
    [
      "dev",
      "pro_configuration_scenario_components"
    ],
    [
      "dev",
      "pro_configuration_scenario_configurations"
    ],
    [
      "dev",
      "pro_configuration_scenario_parties"
    ],
    [
      "dev",
      "pro_configuration_scenario_receiver_agreements"
    ],
    [
      "dev",
      "pro_configuration_scenario_sender_agreements"
    ],
    [
      "dev",
      "pro_configuration_scenarios"
    ],
    [
      "dev",
      "pro_integrated_configuration_interfaces"
    ],
    [
      "dev",
      "pro_integrated_configuration_receiver_agreements"
    ],
    [
      "dev",
      "pro_integrated_configuration_receivers"
    ],
    [
      "dev",
      "pro_integrated_configuration_rules"
    ],
    [
      "dev",
      "pro_integrated_configuration_sender_agreements"
    ],
    [
      "dev",
      "pro_integrated_configurations"
    ],
    [
      "dev",
      "pro_performance_data"
    ],
    [
      "dev",
      "pro_performance_measure_points"
    ],
    [
      "dev",
      "pro_performance_queries"
    ],
    [
      "dev",
      "pro_performance_stats"
    ],
    [
      "dev",
      "pro_software_components"
    ],
    [
      "dev",
      "properties"
    ],
    [
      "dev",
      "property_types"
    ],
    [
      "dev",
      "sessions"
    ],
    [
      "dev",
      "system_mappings"
    ],
    [
      "dev",
      "systems"
    ],
    [
      "dev",
      "task_runs"
    ],
    [
      "dev",
      "tasks"
    ],
    [
      "dev",
      "user_sessions"
    ],
    [
      "dev",
      "users"
    ],
    [
      "information_schema",
      "sql_features"
    ],
    [
      "information_schema",
      "sql_implementation_info"
    ],
    [
      "information_schema",
      "sql_parts"
    ],
    [
      "information_schema",
      "sql_sizing"
    ],
    [
      "pg_catalog",
      "pg_aggregate"
    ],
    [
      "pg_catalog",
      "pg_am"
    ],
    [
      "pg_catalog",
      "pg_amop"
    ],
    [
      "pg_catalog",
      "pg_amproc"
    ],
    [
      "pg_catalog",
      "pg_attrdef"
    ],
    [
      "pg_catalog",
      "pg_attribute"
    ],
    [
      "pg_catalog",
      "pg_auth_members"
    ],
    [
      "pg_catalog",
      "pg_authid"
    ],
    [
      "pg_catalog",
      "pg_cast"
    ],
    [
      "pg_catalog",
      "pg_class"
    ],
    [
      "pg_catalog",
      "pg_collation"
    ],
    [
      "pg_catalog",
      "pg_constraint"
    ],
    [
      "pg_catalog",
      "pg_conversion"
    ],
    [
      "pg_catalog",
      "pg_database"
    ],
    [
      "pg_catalog",
      "pg_db_role_setting"
    ],
    [
      "pg_catalog",
      "pg_default_acl"
    ],
    [
      "pg_catalog",
      "pg_depend"
    ],
    [
      "pg_catalog",
      "pg_description"
    ],
    [
      "pg_catalog",
      "pg_enum"
    ],
    [
      "pg_catalog",
      "pg_event_trigger"
    ],
    [
      "pg_catalog",
      "pg_extension"
    ],
    [
      "pg_catalog",
      "pg_foreign_data_wrapper"
    ],
    [
      "pg_catalog",
      "pg_foreign_server"
    ],
    [
      "pg_catalog",
      "pg_foreign_table"
    ],
    [
      "pg_catalog",
      "pg_index"
    ],
    [
      "pg_catalog",
      "pg_inherits"
    ],
    [
      "pg_catalog",
      "pg_init_privs"
    ],
    [
      "pg_catalog",
      "pg_language"
    ],
    [
      "pg_catalog",
      "pg_largeobject"
    ],
    [
      "pg_catalog",
      "pg_largeobject_metadata"
    ],
    [
      "pg_catalog",
      "pg_namespace"
    ],
    [
      "pg_catalog",
      "pg_opclass"
    ],
    [
      "pg_catalog",
      "pg_operator"
    ],
    [
      "pg_catalog",
      "pg_opfamily"
    ],
    [
      "pg_catalog",
      "pg_parameter_acl"
    ],
    [
      "pg_catalog",
      "pg_partitioned_table"
    ],
    [
      "pg_catalog",
      "pg_policy"
    ],
    [
      "pg_catalog",
      "pg_proc"
    ],
    [
      "pg_catalog",
      "pg_publication"
    ],
    [
      "pg_catalog",
      "pg_publication_namespace"
    ],
    [
      "pg_catalog",
      "pg_publication_rel"
    ],
    [
      "pg_catalog",
      "pg_range"
    ],
    [
      "pg_catalog",
      "pg_replication_origin"
    ],
    [
      "pg_catalog",
      "pg_rewrite"
    ],
    [
      "pg_catalog",
      "pg_seclabel"
    ],
    [
      "pg_catalog",
      "pg_sequence"
    ],
    [
      "pg_catalog",
      "pg_shdepend"
    ],
    [
      "pg_catalog",
      "pg_shdescription"
    ],
    [
      "pg_catalog",
      "pg_shseclabel"
    ],
    [
      "pg_catalog",
      "pg_statistic"
    ],
    [
      "pg_catalog",
      "pg_statistic_ext"
    ],
    [
      "pg_catalog",
      "pg_statistic_ext_data"
    ],
    [
      "pg_catalog",
      "pg_subscription"
    ],
    [
      "pg_catalog",
      "pg_subscription_rel"
    ],
    [
      "pg_catalog",
      "pg_tablespace"
    ],
    [
      "pg_catalog",
      "pg_transform"
    ],
    [
      "pg_catalog",
      "pg_trigger"
    ],
    [
      "pg_catalog",
      "pg_ts_config"
    ],
    [
      "pg_catalog",
      "pg_ts_config_map"
    ],
    [
      "pg_catalog",
      "pg_ts_dict"
    ],
    [
      "pg_catalog",
      "pg_ts_parser"
    ],
    [
      "pg_catalog",
      "pg_ts_template"
    ],
    [
      "pg_catalog",
      "pg_type"
    ],
    [
      "pg_catalog",
      "pg_user_mapping"
    ]
  ],
  "row_count": 206,
  "execution_time": 0.010998,
  "query": "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;",
  "status": "success"
}
2025-04-30 18:09:26,054 - DEBUG - STDOUT: SQL Executor node output: current_agent=router
2025-04-30 18:09:26,101 - DEBUG - STDOUT: SQL query results summary: status=success, rows=206
2025-04-30 18:09:26,117 - DEBUG - STDOUT: ==== SQL EXECUTOR NODE END ====
2025-04-30 18:09:26,124 - INFO - Processing agent: sql_executor
2025-04-30 18:09:26,125 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:26,126 - DEBUG - Event keys: dict_keys(['sql_executor'])
2025-04-30 18:09:26,127 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor']
2025-04-30 18:09:26,129 - DEBUG - STDOUT: 
==== ROUTER NODE START ====
2025-04-30 18:09:26,132 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:26,134 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor']
2025-04-30 18:09:26,138 - DEBUG - STDOUT: RouterAgent returned decision: {
  "router_response": {
    "route_to": "planner",
    "reason": "Starting new workflow",
    "feedback": "Initializing workflow with planner",
    "state_updates": {
      "workflow_started": true,
      "start_time": "2025-04-30T18:09:26.138439"
    },
    "confidence_score": 1.0,
    "requires_human_input": false
  }
}
2025-04-30 18:09:26,147 - DEBUG - STDOUT: Route decision: planner
2025-04-30 18:09:26,172 - DEBUG - STDOUT: Router node output: current_agent=planner
2025-04-30 18:09:26,196 - DEBUG - STDOUT: Router response: {
  "route_to": "planner",
  "reason": "Starting new workflow",
  "feedback": "Initializing workflow with planner",
  "state_updates": {
    "workflow_started": true,
    "start_time": "2025-04-30T18:09:26.138439"
  },
  "confidence_score": 1.0,
  "requires_human_input": false
}
2025-04-30 18:09:26,212 - DEBUG - STDOUT: ==== ROUTER NODE END ====
2025-04-30 18:09:26,218 - DEBUG - STDOUT: ROUTE DECISION: planner -> to_planner
2025-04-30 18:09:26,226 - INFO - Processing agent: router
2025-04-30 18:09:26,233 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:26,236 - DEBUG - Event keys: dict_keys(['router'])
2025-04-30 18:09:26,240 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router']
2025-04-30 18:09:26,242 - DEBUG - router response: {'route_to': 'planner', 'reason': 'Starting new workflow', 'feedback': 'Initializing workflow with planner', 'state_updates': {'workflow_started': True, 'start_time': '2025-04-30T18:09:26.138439'}, 'confidence_score': 1.0, 'requires_human_input': False}
2025-04-30 18:09:26,244 - DEBUG - STDOUT: 
==== PLANNER NODE START ====
2025-04-30 18:09:26,248 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:26,250 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router']
2025-04-30 18:09:26,256 - DEBUG - STDOUT: Processing user question: 'list all tables'
2025-04-30 18:09:26,262 - DEBUG - STDOUT: Successfully initialized database metadata store and discovery service
2025-04-30 18:09:26,264 - DEBUG - STDOUT: Successfully initialized PlannerAgent with database capabilities using model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:26,265 - DEBUG - STDOUT: PlannerAgent is using LLM to analyze the query and determine the appropriate database tables and columns
2025-04-30 18:09:26,267 - DEBUG - STDOUT: Invoking PlannerAgent with question: 'list all tables'
2025-04-30 18:09:26,273 - DEBUG - STDOUT: Invoking Planner with question: list all tables...
2025-04-30 18:09:27,070 - DEBUG - STDOUT: Raw Planner response: {
    "query_type": "sql",
    "primary_table_or_datasource": "information_schema.tables",
    "relevant_columns": ["table_schema", "table_name"],
    "filtering_conditions": "table_type = 'BASE TABLE'",
    "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database."
}
2025-04-30 18:09:27,074 - DEBUG - STDOUT: Discovering database structure for 'new', force_refresh=False
2025-04-30 18:09:27,079 - DEBUG - STDOUT: Discovered schemas: ['dev']
2025-04-30 18:09:27,080 - DEBUG - STDOUT: Discovering tables in schema 'dev' of database 'new'
2025-04-30 18:09:27,081 - DEBUG - STDOUT: Using cached metadata for schema 'dev', found 138 tables
2025-04-30 18:09:27,083 - DEBUG - STDOUT: First 10 tables: ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps']
2025-04-30 18:09:27,085 - DEBUG - STDOUT: ...and 128 more tables
2025-04-30 18:09:27,087 - DEBUG - STDOUT: Schema 'dev' has 138 tables
2025-04-30 18:09:27,088 - DEBUG - STDOUT: First 10 tables in schema 'dev': ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps']
2025-04-30 18:09:27,091 - DEBUG - STDOUT: ...and 128 more tables
2025-04-30 18:09:27,092 - DEBUG - STDOUT: Discovering tables in schema 'dev' of database 'new'
2025-04-30 18:09:27,094 - DEBUG - STDOUT: Using cached metadata for schema 'dev', found 138 tables
2025-04-30 18:09:27,095 - DEBUG - STDOUT: First 10 tables: ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps']
2025-04-30 18:09:27,097 - DEBUG - STDOUT: ...and 128 more tables
2025-04-30 18:09:27,099 - DEBUG - STDOUT: PlannerAgent returned plan: {
  "query_type": "sql",
  "primary_table_or_datasource": "information_schema.tables",
  "relevant_columns": [
    "table_schema",
    "table_name"
  ],
  "filtering_conditions": "table_type = 'BASE TABLE'",
  "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database.",
  "validated": true,
  "all_tables": {
    "dev": [
      "azure_standard_apps",
      "btp_cloud_integration_message_store_entries",
      "azure_event_grid_event_subscriptions",
      "btp_cloud_integration_credentials",
      "pro_communication_parties",
      "abap_soap_service_bindings",
      "data_sources",
      "pro_performance_queries",
      "abap_odata_services",
      "azure_logic_app_integration_account_maps",
      "pro_integrated_configuration_rules",
      "abap_systems",
      "abap_rfc_destination_options",
      "azure_logic_app_integration_account_partner_metadata",
      "data_source_proxy_headers",
      "abap_ports",
      "btp_cloud_integration_connections",
      "azure_logic_app_integration_accounts",
      "pro_configuration_scenarios",
      "abap_rfc_destinations",
      "azure_standard_app_workflows",
      "btp_cloud_integration_package_tags",
      "log_entries",
      "properties",
      "azure_api_management_subscriptions",
      "lean_ix_tenants",
      "pro_performance_measure_points",
      "pro_integrated_configuration_interfaces",
      "btp_cloud_integration_service_endpoints",
      "azure_logic_app_integration_account_agreements",
      "abap_partner_profiles",
      "btp_cloud_integration_configurations",
      "abap_inbound_partner_profiles",
      "azure_api_management_api_revisions",
      "pro_agreements",
      "pro_configuration_scenario_receiver_agreements",
      "sessions",
      "btp_event_mesh_queue_topics",
      "data_source_access_tokens",
      "btp_event_mesh_queues",
      "azure_event_grid_domain_topics",
      "azure_logic_app_workflow_versions",
      "pro_adapter_attributes",
      "data_flow_items",
      "pro_integrated_configurations",
      "btp_cloud_integration_artefacts",
      "azure_api_management_api_products",
      "azure_event_grid_partner_namespace_channels",
      "system_mappings",
      "pro_communication_components",
      "btp_cloud_integration_message_properties",
      "azure_service_bus_topics",
      "pro_performance_data",
      "pro_configuration_scenario_components",
      "pro_configuration_scenario_parties",
      "pro_software_components",
      "data_flows",
      "data_source_oauth2credentials",
      "btp_api_management_product_rate_plans",
      "azure_event_grid_system_topics",
      "btp_cloud_integration_messages",
      "btp_cloud_integration_runtime_artefacts",
      "pro_adapter_modules",
      "pro_configuration_scenario_sender_agreements",
      "azure_api_management_services",
      "lean_ix_fields",
      "pro_configuration_scenario_configurations",
      "azure_logic_app_workflows",
      "data_source_api_keys",
      "pro_integrated_configuration_sender_agreements",
      "azure_event_grid_partner_registrations",
      "metadata",
      "abap_integration_engine_interfaces",
      "azure_api_management_apis",
      "btp_cloud_integration_resources",
      "azure_event_grid_topics",
      "lean_ix_tags",
      "abap_soap_service_binding_properties",
      "hopex_tenants",
      "azure_logic_app_integration_account_schemas",
      "btp_api_management_product_applications",
      "btp_api_management_products",
      "btp_api_management_providers",
      "azure_api_management_backend_parameters",
      "azure_service_bus_topic_subscriptions",
      "task_runs",
      "azure_service_bus_queues",
      "abap_qrfc_destinations",
      "luy_tenants",
      "tasks",
      "abap_soap_services",
      "abap_paths",
      "azure_logic_app_integration_account_certificates",
      "btp_event_mesh_webhooks",
      "pro_communication_channels",
      "azure_tenants",
      "pro_integrated_configuration_receiver_agreements",
      "btp_event_mesh_topics",
      "data_source_proxies",
      "pro_performance_stats",
      "systems",
      "pro_integrated_configuration_receivers",
      "log_entry_attributes",
      "inventories",
      "anypoint_assets",
      "azure_api_management_policy_properties",
      "btp_cloud_integration_message_attachments",
      "pro_adapter_module_parameters",
      "azure_api_management_backends",
      "data_source_basic_auth_credentials",
      "azure_api_management_api_operation_parameters",
      "azure_event_grid_domains",
      "azure_service_bus_topic_subscription_rules",
      "azure_event_grid_partner_topics",
      "abap_outbound_partner_profiles",
      "azure_subscriptions",
      "anypoint_organisations",
      "pro_configuration_scenario_channels",
      "btp_tenants",
      "btp_api_management_proxy_products",
      "azure_api_management_products",
      "azure_event_grid_partner_namespaces",
      "user_sessions",
      "azure_logic_app_integration_account_sessions",
      "azure_logic_app_integration_account_partner_identities",
      "azure_logic_app_integration_account_partners",
      "btp_cloud_integration_participants",
      "azure_service_bus_namespaces",
      "btp_cloud_integration_oauth2credentials",
      "users",
      "azure_api_management_api_operation_replies",
      "azure_service_bus_authorization_rules",
      "btp_api_management_proxies",
      "property_types",
      "azure_api_management_api_operations",
      "azure_api_management_policies",
      "btp_cloud_integration_packages",
      "azure_resource_groups"
    ]
  },
  "timestamp": "2025-04-30 18:09:27.099722",
  "agent": "planner",
  "user_question": "list all tables",
  "database_context": {
    "database": "new",
    "schema": "dev",
    "metadata_available": true,
    "last_updated": "2025-04-30T12:57:32.798365"
  }
}
2025-04-30 18:09:27,152 - DEBUG - STDOUT: Planner node output: current_agent=selector
2025-04-30 18:09:27,154 - DEBUG - STDOUT: Planner response being sent to selector: {
  "query_type": "sql",
  "primary_table_or_datasource": "information_schema.tables",
  "relevant_columns": [
    "table_schema",
    "table_name"
  ],
  "filtering_conditions": "table_type = 'BASE TABLE'",
  "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database.",
  "validated": true,
  "all_tables": {
    "dev": [
      "azure_standard_apps",
      "btp_cloud_integration_message_store_entries",
      "azure_event_grid_event_subscriptions",
      "btp_cloud_integration_credentials",
      "pro_communication_parties",
      "abap_soap_service_bindings",
      "data_sources",
      "pro_performance_queries",
      "abap_odata_services",
      "azure_logic_app_integration_account_maps",
      "pro_integrated_configuration_rules",
      "abap_systems",
      "abap_rfc_destination_options",
      "azure_logic_app_integration_account_partner_metadata",
      "data_source_proxy_headers",
      "abap_ports",
      "btp_cloud_integration_connections",
      "azure_logic_app_integration_accounts",
      "pro_configuration_scenarios",
      "abap_rfc_destinations",
      "azure_standard_app_workflows",
      "btp_cloud_integration_package_tags",
      "log_entries",
      "properties",
      "azure_api_management_subscriptions",
      "lean_ix_tenants",
      "pro_performance_measure_points",
      "pro_integrated_configuration_interfaces",
      "btp_cloud_integration_service_endpoints",
      "azure_logic_app_integration_account_agreements",
      "abap_partner_profiles",
      "btp_cloud_integration_configurations",
      "abap_inbound_partner_profiles",
      "azure_api_management_api_revisions",
      "pro_agreements",
      "pro_configuration_scenario_receiver_agreements",
      "sessions",
      "btp_event_mesh_queue_topics",
      "data_source_access_tokens",
      "btp_event_mesh_queues",
      "azure_event_grid_domain_topics",
      "azure_logic_app_workflow_versions",
      "pro_adapter_attributes",
      "data_flow_items",
      "pro_integrated_configurations",
      "btp_cloud_integration_artefacts",
      "azure_api_management_api_products",
      "azure_event_grid_partner_namespace_channels",
      "system_mappings",
      "pro_communication_components",
      "btp_cloud_integration_message_properties",
      "azure_service_bus_topics",
      "pro_performance_data",
      "pro_configuration_scenario_components",
      "pro_configuration_scenario_parties",
      "pro_software_components",
      "data_flows",
      "data_source_oauth2credentials",
      "btp_api_management_product_rate_plans",
      "azure_event_grid_system_topics",
      "btp_cloud_integration_messages",
      "btp_cloud_integration_runtime_artefacts",
      "pro_adapter_modules",
      "pro_configuration_scenario_sender_agreements",
      "azure_api_management_services",
      "lean_ix_fields",
      "pro_configuration_scenario_configurations",
      "azure_logic_app_workflows",
      "data_source_api_keys",
      "pro_integrated_configuration_sender_agreements",
      "azure_event_grid_partner_registrations",
      "metadata",
      "abap_integration_engine_interfaces",
      "azure_api_management_apis",
      "btp_cloud_integration_resources",
      "azure_event_grid_topics",
      "lean_ix_tags",
      "abap_soap_service_binding_properties",
      "hopex_tenants",
      "azure_logic_app_integration_account_schemas",
      "btp_api_management_product_applications",
      "btp_api_management_products",
      "btp_api_management_providers",
      "azure_api_management_backend_parameters",
      "azure_service_bus_topic_subscriptions",
      "task_runs",
      "azure_service_bus_queues",
      "abap_qrfc_destinations",
      "luy_tenants",
      "tasks",
      "abap_soap_services",
      "abap_paths",
      "azure_logic_app_integration_account_certificates",
      "btp_event_mesh_webhooks",
      "pro_communication_channels",
      "azure_tenants",
      "pro_integrated_configuration_receiver_agreements",
      "btp_event_mesh_topics",
      "data_source_proxies",
      "pro_performance_stats",
      "systems",
      "pro_integrated_configuration_receivers",
      "log_entry_attributes",
      "inventories",
      "anypoint_assets",
      "azure_api_management_policy_properties",
      "btp_cloud_integration_message_attachments",
      "pro_adapter_module_parameters",
      "azure_api_management_backends",
      "data_source_basic_auth_credentials",
      "azure_api_management_api_operation_parameters",
      "azure_event_grid_domains",
      "azure_service_bus_topic_subscription_rules",
      "azure_event_grid_partner_topics",
      "abap_outbound_partner_profiles",
      "azure_subscriptions",
      "anypoint_organisations",
      "pro_configuration_scenario_channels",
      "btp_tenants",
      "btp_api_management_proxy_products",
      "azure_api_management_products",
      "azure_event_grid_partner_namespaces",
      "user_sessions",
      "azure_logic_app_integration_account_sessions",
      "azure_logic_app_integration_account_partner_identities",
      "azure_logic_app_integration_account_partners",
      "btp_cloud_integration_participants",
      "azure_service_bus_namespaces",
      "btp_cloud_integration_oauth2credentials",
      "users",
      "azure_api_management_api_operation_replies",
      "azure_service_bus_authorization_rules",
      "btp_api_management_proxies",
      "property_types",
      "azure_api_management_api_operations",
      "azure_api_management_policies",
      "btp_cloud_integration_packages",
      "azure_resource_groups"
    ]
  },
  "timestamp": "2025-04-30 18:09:27.099722",
  "agent": "planner",
  "user_question": "list all tables",
  "database_context": {
    "database": "new",
    "schema": "dev",
    "metadata_available": true,
    "last_updated": "2025-04-30T12:57:32.798365"
  }
}
2025-04-30 18:09:27,206 - DEBUG - STDOUT: ==== PLANNER NODE END ====
2025-04-30 18:09:27,206 - INFO - Processing agent: planner
2025-04-30 18:09:27,206 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:27,215 - DEBUG - Event keys: dict_keys(['planner'])
2025-04-30 18:09:27,216 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner']
2025-04-30 18:09:27,217 - DEBUG - planner response: {'query_type': 'sql', 'primary_table_or_datasource': 'information_schema.tables', 'relevant_columns': ['table_schema', 'table_name'], 'filtering_conditions': "table_type = 'BASE TABLE'", 'processing_instructions': 'Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database.', 'validated': True, 'all_tables': {'dev': ['azure_standard_apps', 'btp_cloud_integration_message_store_entries', 'azure_event_grid_event_subscriptions', 'btp_cloud_integration_credentials', 'pro_communication_parties', 'abap_soap_service_bindings', 'data_sources', 'pro_performance_queries', 'abap_odata_services', 'azure_logic_app_integration_account_maps', 'pro_integrated_configuration_rules', 'abap_systems', 'abap_rfc_destination_options', 'azure_logic_app_integration_account_partner_metadata', 'data_source_proxy_headers', 'abap_ports', 'btp_cloud_integration_connections', 'azure_logic_app_integration_accounts', 'pro_configuration_scenarios', 'abap_rfc_destinations', 'azure_standard_app_workflows', 'btp_cloud_integration_package_tags', 'log_entries', 'properties', 'azure_api_management_subscriptions', 'lean_ix_tenants', 'pro_performance_measure_points', 'pro_integrated_configuration_interfaces', 'btp_cloud_integration_service_endpoints', 'azure_logic_app_integration_account_agreements', 'abap_partner_profiles', 'btp_cloud_integration_configurations', 'abap_inbound_partner_profiles', 'azure_api_management_api_revisions', 'pro_agreements', 'pro_configuration_scenario_receiver_agreements', 'sessions', 'btp_event_mesh_queue_topics', 'data_source_access_tokens', 'btp_event_mesh_queues', 'azure_event_grid_domain_topics', 'azure_logic_app_workflow_versions', 'pro_adapter_attributes', 'data_flow_items', 'pro_integrated_configurations', 'btp_cloud_integration_artefacts', 'azure_api_management_api_products', 'azure_event_grid_partner_namespace_channels', 'system_mappings', 'pro_communication_components', 'btp_cloud_integration_message_properties', 'azure_service_bus_topics', 'pro_performance_data', 'pro_configuration_scenario_components', 'pro_configuration_scenario_parties', 'pro_software_components', 'data_flows', 'data_source_oauth2credentials', 'btp_api_management_product_rate_plans', 'azure_event_grid_system_topics', 'btp_cloud_integration_messages', 'btp_cloud_integration_runtime_artefacts', 'pro_adapter_modules', 'pro_configuration_scenario_sender_agreements', 'azure_api_management_services', 'lean_ix_fields', 'pro_configuration_scenario_configurations', 'azure_logic_app_workflows', 'data_source_api_keys', 'pro_integrated_configuration_sender_agreements', 'azure_event_grid_partner_registrations', 'metadata', 'abap_integration_engine_interfaces', 'azure_api_management_apis', 'btp_cloud_integration_resources', 'azure_event_grid_topics', 'lean_ix_tags', 'abap_soap_service_binding_properties', 'hopex_tenants', 'azure_logic_app_integration_account_schemas', 'btp_api_management_product_applications', 'btp_api_management_products', 'btp_api_management_providers', 'azure_api_management_backend_parameters', 'azure_service_bus_topic_subscriptions', 'task_runs', 'azure_service_bus_queues', 'abap_qrfc_destinations', 'luy_tenants', 'tasks', 'abap_soap_services', 'abap_paths', 'azure_logic_app_integration_account_certificates', 'btp_event_mesh_webhooks', 'pro_communication_channels', 'azure_tenants', 'pro_integrated_configuration_receiver_agreements', 'btp_event_mesh_topics', 'data_source_proxies', 'pro_performance_stats', 'systems', 'pro_integrated_configuration_receivers', 'log_entry_attributes', 'inventories', 'anypoint_assets', 'azure_api_management_policy_properties', 'btp_cloud_integration_message_attachments', 'pro_adapter_module_parameters', 'azure_api_management_backends', 'data_source_basic_auth_credentials', 'azure_api_management_api_operation_parameters', 'azure_event_grid_domains', 'azure_service_bus_topic_subscription_rules', 'azure_event_grid_partner_topics', 'abap_outbound_partner_profiles', 'azure_subscriptions', 'anypoint_organisations', 'pro_configuration_scenario_channels', 'btp_tenants', 'btp_api_management_proxy_products', 'azure_api_management_products', 'azure_event_grid_partner_namespaces', 'user_sessions', 'azure_logic_app_integration_account_sessions', 'azure_logic_app_integration_account_partner_identities', 'azure_logic_app_integration_account_partners', 'btp_cloud_integration_participants', 'azure_service_bus_namespaces', 'btp_cloud_integration_oauth2credentials', 'users', 'azure_api_management_api_operation_replies', 'azure_service_bus_authorization_rules', 'btp_api_management_proxies', 'property_types', 'azure_api_management_api_operations', 'azure_api_management_policies', 'btp_cloud_integration_packages', 'azure_resource_groups']}, 'timestamp': '2025-04-30 18:09:27.099722', 'agent': 'planner', 'user_question': 'list all tables', 'database_context': {'database': 'new', 'schema': 'dev', 'metadata_available': True, 'last_updated': '2025-04-30T12:57:32.798365'}}
2025-04-30 18:09:27,230 - DEBUG - STDOUT: 
==== SELECTOR NODE START ====
2025-04-30 18:09:27,233 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:27,234 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner']
2025-04-30 18:09:27,240 - DEBUG - STDOUT: Planner response received: {
  "query_type": "sql",
  "primary_table_or_datasource": "information_schema.tables",
  "relevant_columns": [
    "table_schema",
    "table_name"
  ],
  "filtering_conditions": "table_type = 'BASE TABLE'",
  "processing_instructions": "Query the information_schema.tables to list all base tables across all schemas in the PostgreSQL database.",
  "validated": true,
  "all_tables": {
    "dev": [
      "azure_standard_apps",
      "btp_cloud_integration_message_store_entries",
      "azure_event_grid_event_subscriptions",
      "btp_cloud_integration_credentials",
      "pro_communication_parties",
      "abap_soap_service_bindings",
      "data_sources",
      "pro_performance_queries",
      "abap_odata_services",
      "azure_logic_app_integration_account_maps",
      "pro_integrated_configuration_rules",
      "abap_systems",
      "abap_rfc_destination_options",
      "azure_logic_app_integration_account_partner_metadata",
      "data_source_proxy_headers",
      "abap_ports",
      "btp_cloud_integration_connections",
      "azure_logic_app_integration_accounts",
      "pro_configuration_scenarios",
      "abap_rfc_destinations",
      "azure_standard_app_workflows",
      "btp_cloud_integration_package_tags",
      "log_entries",
      "properties",
      "azure_api_management_subscriptions",
      "lean_ix_tenants",
      "pro_performance_measure_points",
      "pro_integrated_configuration_interfaces",
      "btp_cloud_integration_service_endpoints",
      "azure_logic_app_integration_account_agreements",
      "abap_partner_profiles",
      "btp_cloud_integration_configurations",
      "abap_inbound_partner_profiles",
      "azure_api_management_api_revisions",
      "pro_agreements",
      "pro_configuration_scenario_receiver_agreements",
      "sessions",
      "btp_event_mesh_queue_topics",
      "data_source_access_tokens",
      "btp_event_mesh_queues",
      "azure_event_grid_domain_topics",
      "azure_logic_app_workflow_versions",
      "pro_adapter_attributes",
      "data_flow_items",
      "pro_integrated_configurations",
      "btp_cloud_integration_artefacts",
      "azure_api_management_api_products",
      "azure_event_grid_partner_namespace_channels",
      "system_mappings",
      "pro_communication_components",
      "btp_cloud_integration_message_properties",
      "azure_service_bus_topics",
      "pro_performance_data",
      "pro_configuration_scenario_components",
      "pro_configuration_scenario_parties",
      "pro_software_components",
      "data_flows",
      "data_source_oauth2credentials",
      "btp_api_management_product_rate_plans",
      "azure_event_grid_system_topics",
      "btp_cloud_integration_messages",
      "btp_cloud_integration_runtime_artefacts",
      "pro_adapter_modules",
      "pro_configuration_scenario_sender_agreements",
      "azure_api_management_services",
      "lean_ix_fields",
      "pro_configuration_scenario_configurations",
      "azure_logic_app_workflows",
      "data_source_api_keys",
      "pro_integrated_configuration_sender_agreements",
      "azure_event_grid_partner_registrations",
      "metadata",
      "abap_integration_engine_interfaces",
      "azure_api_management_apis",
      "btp_cloud_integration_resources",
      "azure_event_grid_topics",
      "lean_ix_tags",
      "abap_soap_service_binding_properties",
      "hopex_tenants",
      "azure_logic_app_integration_account_schemas",
      "btp_api_management_product_applications",
      "btp_api_management_products",
      "btp_api_management_providers",
      "azure_api_management_backend_parameters",
      "azure_service_bus_topic_subscriptions",
      "task_runs",
      "azure_service_bus_queues",
      "abap_qrfc_destinations",
      "luy_tenants",
      "tasks",
      "abap_soap_services",
      "abap_paths",
      "azure_logic_app_integration_account_certificates",
      "btp_event_mesh_webhooks",
      "pro_communication_channels",
      "azure_tenants",
      "pro_integrated_configuration_receiver_agreements",
      "btp_event_mesh_topics",
      "data_source_proxies",
      "pro_performance_stats",
      "systems",
      "pro_integrated_configuration_receivers",
      "log_entry_attributes",
      "inventories",
      "anypoint_assets",
      "azure_api_management_policy_properties",
      "btp_cloud_integration_message_attachments",
      "pro_adapter_module_parameters",
      "azure_api_management_backends",
      "data_source_basic_auth_credentials",
      "azure_api_management_api_operation_parameters",
      "azure_event_grid_domains",
      "azure_service_bus_topic_subscription_rules",
      "azure_event_grid_partner_topics",
      "abap_outbound_partner_profiles",
      "azure_subscriptions",
      "anypoint_organisations",
      "pro_configuration_scenario_channels",
      "btp_tenants",
      "btp_api_management_proxy_products",
      "azure_api_management_products",
      "azure_event_grid_partner_namespaces",
      "user_sessions",
      "azure_logic_app_integration_account_sessions",
      "azure_logic_app_integration_account_partner_identities",
      "azure_logic_app_integration_account_partners",
      "btp_cloud_integration_participants",
      "azure_service_bus_namespaces",
      "btp_cloud_integration_oauth2credentials",
      "users",
      "azure_api_management_api_operation_replies",
      "azure_service_bus_authorization_rules",
      "btp_api_management_proxies",
      "property_types",
      "azure_api_management_api_operations",
      "azure_api_management_policies",
      "btp_cloud_integration_packages",
      "azure_resource_groups"
    ]
  },
  "timestamp": "2025-04-30 18:09:27.099722",
  "agent": "planner",
  "user_question": "list all tables",
  "database_context": {
    "database": "new",
    "schema": "dev",
    "metadata_available": true,
    "last_updated": "2025-04-30T12:57:32.798365"
  }
}
2025-04-30 18:09:27,296 - DEBUG - STDOUT: Selector is processing planner response for question: 'list all tables'
2025-04-30 18:09:27,298 - DEBUG - STDOUT: NOTE: The selector node is currently simplified and doesn't use LLM.
2025-04-30 18:09:27,300 - DEBUG - STDOUT: It simply passes through to the SQLGenerator without making actual selections.
2025-04-30 18:09:27,301 - DEBUG - STDOUT: Selector node output: current_agent=SQLGenerator
2025-04-30 18:09:27,308 - DEBUG - STDOUT: Selector response being sent to SQLGenerator: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "information_schema.tables",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [
      "table_schema",
      "table_name"
    ],
    "filters": "table_type = 'BASE TABLE'"
  }
}
2025-04-30 18:09:27,314 - DEBUG - STDOUT: ==== SELECTOR NODE END ====
2025-04-30 18:09:27,317 - INFO - Processing agent: selector
2025-04-30 18:09:27,324 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:27,325 - DEBUG - Event keys: dict_keys(['selector'])
2025-04-30 18:09:27,326 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector']
2025-04-30 18:09:27,329 - DEBUG - selector response: {'raw': 'Selection completed', 'selected_schemas': {}, 'selected_tool': 'sql_query', 'selected_datasource': 'information_schema.tables', 'information_needed': 'Table listing', 'reason_for_selection': 'Direct database query is the most efficient way to list tables', 'query_parameters': {'columns': ['table_schema', 'table_name'], 'filters': "table_type = 'BASE TABLE'"}}
2025-04-30 18:09:27,329 - DEBUG - STDOUT: 
==== SQL GENERATOR NODE START ====
2025-04-30 18:09:27,337 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:27,343 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector']
2025-04-30 18:09:27,345 - DEBUG - STDOUT: Selector response received: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "information_schema.tables",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [
      "table_schema",
      "table_name"
    ],
    "filters": "table_type = 'BASE TABLE'"
  }
}
2025-04-30 18:09:27,352 - DEBUG - STDOUT: Detected 'list all tables' query, generating standard query WITHOUT using LLM
2025-04-30 18:09:27,357 - DEBUG - STDOUT: This is a hardcoded response for a common query pattern
2025-04-30 18:09:27,358 - DEBUG - STDOUT: SQL Generator node output for 'list all tables': current_agent=reviewer
2025-04-30 18:09:27,360 - DEBUG - STDOUT: SQL query generated: SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;
2025-04-30 18:09:27,362 - DEBUG - STDOUT: SQL Generator response being sent to reviewer: {
  "sql_query": "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;",
  "explanation": "This query lists all tables in the database by querying the information_schema.tables view, which contains metadata about all tables in the database. It filters for base tables only (excluding views) and orders the results by schema and table name for better readability.",
  "validation_checks": [
    "Query targets information_schema which exists in all PostgreSQL databases",
    "Filtering on table_type ensures only actual tables are returned (not views)",
    "Results are ordered for better readability"
  ],
  "query_type": "SELECT",
  "estimated_complexity": "LOW",
  "required_indexes": []
}
2025-04-30 18:09:27,372 - DEBUG - STDOUT: ==== SQL GENERATOR NODE END ====
2025-04-30 18:09:27,377 - INFO - Processing agent: SQLGenerator
2025-04-30 18:09:27,378 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:27,378 - DEBUG - Event keys: dict_keys(['SQLGenerator'])
2025-04-30 18:09:27,378 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:27,378 - DEBUG - SQLGenerator response: {'sql_query': "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;", 'explanation': 'This query lists all tables in the database by querying the information_schema.tables view, which contains metadata about all tables in the database. It filters for base tables only (excluding views) and orders the results by schema and table name for better readability.', 'validation_checks': ['Query targets information_schema which exists in all PostgreSQL databases', 'Filtering on table_type ensures only actual tables are returned (not views)', 'Results are ordered for better readability'], 'query_type': 'SELECT', 'estimated_complexity': 'LOW', 'required_indexes': []}
2025-04-30 18:09:27,389 - DEBUG - STDOUT: 
==== REVIEWER NODE START ====
2025-04-30 18:09:27,393 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:27,395 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:27,397 - DEBUG - STDOUT: SQL query to review: SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;
2025-04-30 18:09:27,401 - DEBUG - STDOUT: SQLGenerator response received: {
  "sql_query": "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;",
  "explanation": "This query lists all tables in the database by querying the information_schema.tables view, which contains metadata about all tables in the database. It filters for base tables only (excluding views) and orders the results by schema and table name for better readability.",
  "validation_checks": [
    "Query targets information_schema which exists in all PostgreSQL databases",
    "Filtering on table_type ensures only actual tables are returned (not views)",
    "Results are ordered for better readability"
  ],
  "query_type": "SELECT",
  "estimated_complexity": "LOW",
  "required_indexes": []
}
2025-04-30 18:09:27,411 - DEBUG - STDOUT: Reviewer is analyzing SQL query for question: 'list all tables'
2025-04-30 18:09:27,414 - DEBUG - STDOUT: Using LLM-based ReviewerAgent to analyze the SQL query
2025-04-30 18:09:27,416 - DEBUG - STDOUT: Created ReviewerAgent with model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:27,417 - DEBUG - STDOUT: Invoking ReviewerAgent with user_question: 'list all tables' and sql_query: 'SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;'
2025-04-30 18:09:29,133 - DEBUG - STDOUT: ReviewerAgent returned review: {
  "reviewer_response": {
    "is_correct": true,
    "issues": [],
    "suggestions": [],
    "explanation": "SQL query validated successfully",
    "security_concerns": [],
    "performance_impact": "LOW",
    "confidence_score": 0.8,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:29.133561",
      "query_complexity": "UNKNOWN",
      "review_version": "1.0"
    },
    "recommendations": [],
    "risk_assessment": {
      "overall_risk_level": "LOW",
      "risk_breakdown": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0
      },
      "requires_immediate_attention": false
    }
  }
}
2025-04-30 18:09:29,146 - DEBUG - STDOUT: Reviewer node output: current_agent=sql_executor
2025-04-30 18:09:29,148 - DEBUG - STDOUT: Reviewer response being sent to sql_executor: {
  "reviewer_response": {
    "is_correct": true,
    "issues": [],
    "suggestions": [],
    "explanation": "SQL query validated successfully",
    "security_concerns": [],
    "performance_impact": "LOW",
    "confidence_score": 0.8,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:29.133561",
      "query_complexity": "UNKNOWN",
      "review_version": "1.0"
    },
    "recommendations": [],
    "risk_assessment": {
      "overall_risk_level": "LOW",
      "risk_breakdown": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0
      },
      "requires_immediate_attention": false
    }
  }
}
2025-04-30 18:09:29,153 - DEBUG - STDOUT: ==== REVIEWER NODE END ====
2025-04-30 18:09:29,159 - INFO - Processing agent: reviewer
2025-04-30 18:09:29,160 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:29,160 - DEBUG - Event keys: dict_keys(['reviewer'])
2025-04-30 18:09:29,161 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:29,162 - DEBUG - reviewer response: {'reviewer_response': {'is_correct': True, 'issues': [], 'suggestions': [], 'explanation': 'SQL query validated successfully', 'security_concerns': [], 'performance_impact': 'LOW', 'confidence_score': 0.8, 'metadata': {'reviewed_at': '2025-04-30T18:09:29.133561', 'query_complexity': 'UNKNOWN', 'review_version': '1.0'}, 'recommendations': [], 'risk_assessment': {'overall_risk_level': 'LOW', 'risk_breakdown': {'critical': 0, 'high': 0, 'medium': 0, 'low': 0}, 'requires_immediate_attention': False}}}
2025-04-30 18:09:29,164 - DEBUG - STDOUT: 
==== SQL EXECUTOR NODE START ====
2025-04-30 18:09:29,165 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:29,165 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:29,169 - DEBUG - STDOUT: SQL query to execute: SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;
2025-04-30 18:09:29,170 - DEBUG - STDOUT: Reviewer response received: {
  "reviewer_response": {
    "is_correct": true,
    "issues": [],
    "suggestions": [],
    "explanation": "SQL query validated successfully",
    "security_concerns": [],
    "performance_impact": "LOW",
    "confidence_score": 0.8,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:29.133561",
      "query_complexity": "UNKNOWN",
      "review_version": "1.0"
    },
    "recommendations": [],
    "risk_assessment": {
      "overall_risk_level": "LOW",
      "risk_breakdown": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0
      },
      "requires_immediate_attention": false
    }
  }
}
2025-04-30 18:09:29,180 - DEBUG - STDOUT: SQL Executor is processing SQL query: 'SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;'
2025-04-30 18:09:29,181 - DEBUG - STDOUT: Executing SQL query against database: 'SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;'
2025-04-30 18:09:29,183 - DEBUG - STDOUT: NOTE: SQL Executor does not use LLM. It directly executes the SQL query against the database.
2025-04-30 18:09:29,185 - DEBUG - STDOUT: Attempting database connection to localhost:5432/new as postgres
2025-04-30 18:09:29,265 - DEBUG - STDOUT: Successfully connected to database new at localhost:5432
2025-04-30 18:09:29,267 - DEBUG - STDOUT: Database is available
2025-04-30 18:09:29,269 - DEBUG - STDOUT: Attempting database connection to localhost:5432/new as postgres
2025-04-30 18:09:29,335 - DEBUG - STDOUT: Successfully connected to database new at localhost:5432
2025-04-30 18:09:29,349 - DEBUG - STDOUT: Successfully executed query against actual database
2025-04-30 18:09:29,352 - DEBUG - STDOUT: SQL query execution results: {
  "column_names": [
    "table_schema",
    "table_name"
  ],
  "rows": [
    [
      "dev",
      "abap_inbound_partner_profiles"
    ],
    [
      "dev",
      "abap_integration_engine_interfaces"
    ],
    [
      "dev",
      "abap_odata_services"
    ],
    [
      "dev",
      "abap_outbound_partner_profiles"
    ],
    [
      "dev",
      "abap_partner_profiles"
    ],
    [
      "dev",
      "abap_paths"
    ],
    [
      "dev",
      "abap_ports"
    ],
    [
      "dev",
      "abap_qrfc_destinations"
    ],
    [
      "dev",
      "abap_rfc_destination_options"
    ],
    [
      "dev",
      "abap_rfc_destinations"
    ],
    [
      "dev",
      "abap_soap_service_binding_properties"
    ],
    [
      "dev",
      "abap_soap_service_bindings"
    ],
    [
      "dev",
      "abap_soap_services"
    ],
    [
      "dev",
      "abap_systems"
    ],
    [
      "dev",
      "anypoint_assets"
    ],
    [
      "dev",
      "anypoint_organisations"
    ],
    [
      "dev",
      "azure_api_management_api_operation_parameters"
    ],
    [
      "dev",
      "azure_api_management_api_operation_replies"
    ],
    [
      "dev",
      "azure_api_management_api_operations"
    ],
    [
      "dev",
      "azure_api_management_api_products"
    ],
    [
      "dev",
      "azure_api_management_api_revisions"
    ],
    [
      "dev",
      "azure_api_management_apis"
    ],
    [
      "dev",
      "azure_api_management_backend_parameters"
    ],
    [
      "dev",
      "azure_api_management_backends"
    ],
    [
      "dev",
      "azure_api_management_policies"
    ],
    [
      "dev",
      "azure_api_management_policy_properties"
    ],
    [
      "dev",
      "azure_api_management_products"
    ],
    [
      "dev",
      "azure_api_management_services"
    ],
    [
      "dev",
      "azure_api_management_subscriptions"
    ],
    [
      "dev",
      "azure_event_grid_domain_topics"
    ],
    [
      "dev",
      "azure_event_grid_domains"
    ],
    [
      "dev",
      "azure_event_grid_event_subscriptions"
    ],
    [
      "dev",
      "azure_event_grid_partner_namespace_channels"
    ],
    [
      "dev",
      "azure_event_grid_partner_namespaces"
    ],
    [
      "dev",
      "azure_event_grid_partner_registrations"
    ],
    [
      "dev",
      "azure_event_grid_partner_topics"
    ],
    [
      "dev",
      "azure_event_grid_system_topics"
    ],
    [
      "dev",
      "azure_event_grid_topics"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_agreements"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_certificates"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_maps"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_partner_identities"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_partner_metadata"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_partners"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_schemas"
    ],
    [
      "dev",
      "azure_logic_app_integration_account_sessions"
    ],
    [
      "dev",
      "azure_logic_app_integration_accounts"
    ],
    [
      "dev",
      "azure_logic_app_workflow_versions"
    ],
    [
      "dev",
      "azure_logic_app_workflows"
    ],
    [
      "dev",
      "azure_resource_groups"
    ],
    [
      "dev",
      "azure_service_bus_authorization_rules"
    ],
    [
      "dev",
      "azure_service_bus_namespaces"
    ],
    [
      "dev",
      "azure_service_bus_queues"
    ],
    [
      "dev",
      "azure_service_bus_topic_subscription_rules"
    ],
    [
      "dev",
      "azure_service_bus_topic_subscriptions"
    ],
    [
      "dev",
      "azure_service_bus_topics"
    ],
    [
      "dev",
      "azure_standard_app_workflows"
    ],
    [
      "dev",
      "azure_standard_apps"
    ],
    [
      "dev",
      "azure_subscriptions"
    ],
    [
      "dev",
      "azure_tenants"
    ],
    [
      "dev",
      "btp_api_management_product_applications"
    ],
    [
      "dev",
      "btp_api_management_product_rate_plans"
    ],
    [
      "dev",
      "btp_api_management_products"
    ],
    [
      "dev",
      "btp_api_management_providers"
    ],
    [
      "dev",
      "btp_api_management_proxies"
    ],
    [
      "dev",
      "btp_api_management_proxy_products"
    ],
    [
      "dev",
      "btp_cloud_integration_artefacts"
    ],
    [
      "dev",
      "btp_cloud_integration_configurations"
    ],
    [
      "dev",
      "btp_cloud_integration_connections"
    ],
    [
      "dev",
      "btp_cloud_integration_credentials"
    ],
    [
      "dev",
      "btp_cloud_integration_message_attachments"
    ],
    [
      "dev",
      "btp_cloud_integration_message_properties"
    ],
    [
      "dev",
      "btp_cloud_integration_message_store_entries"
    ],
    [
      "dev",
      "btp_cloud_integration_messages"
    ],
    [
      "dev",
      "btp_cloud_integration_oauth2credentials"
    ],
    [
      "dev",
      "btp_cloud_integration_package_tags"
    ],
    [
      "dev",
      "btp_cloud_integration_packages"
    ],
    [
      "dev",
      "btp_cloud_integration_participants"
    ],
    [
      "dev",
      "btp_cloud_integration_resources"
    ],
    [
      "dev",
      "btp_cloud_integration_runtime_artefacts"
    ],
    [
      "dev",
      "btp_cloud_integration_service_endpoints"
    ],
    [
      "dev",
      "btp_event_mesh_queue_topics"
    ],
    [
      "dev",
      "btp_event_mesh_queues"
    ],
    [
      "dev",
      "btp_event_mesh_topics"
    ],
    [
      "dev",
      "btp_event_mesh_webhooks"
    ],
    [
      "dev",
      "btp_tenants"
    ],
    [
      "dev",
      "data_flow_items"
    ],
    [
      "dev",
      "data_flows"
    ],
    [
      "dev",
      "data_source_access_tokens"
    ],
    [
      "dev",
      "data_source_api_keys"
    ],
    [
      "dev",
      "data_source_basic_auth_credentials"
    ],
    [
      "dev",
      "data_source_oauth2credentials"
    ],
    [
      "dev",
      "data_source_proxies"
    ],
    [
      "dev",
      "data_source_proxy_headers"
    ],
    [
      "dev",
      "data_sources"
    ],
    [
      "dev",
      "hopex_tenants"
    ],
    [
      "dev",
      "inventories"
    ],
    [
      "dev",
      "lean_ix_fields"
    ],
    [
      "dev",
      "lean_ix_tags"
    ],
    [
      "dev",
      "lean_ix_tenants"
    ],
    [
      "dev",
      "log_entries"
    ],
    [
      "dev",
      "log_entry_attributes"
    ],
    [
      "dev",
      "luy_tenants"
    ],
    [
      "dev",
      "metadata"
    ],
    [
      "dev",
      "pro_adapter_attributes"
    ],
    [
      "dev",
      "pro_adapter_module_parameters"
    ],
    [
      "dev",
      "pro_adapter_modules"
    ],
    [
      "dev",
      "pro_agreements"
    ],
    [
      "dev",
      "pro_communication_channels"
    ],
    [
      "dev",
      "pro_communication_components"
    ],
    [
      "dev",
      "pro_communication_parties"
    ],
    [
      "dev",
      "pro_configuration_scenario_channels"
    ],
    [
      "dev",
      "pro_configuration_scenario_components"
    ],
    [
      "dev",
      "pro_configuration_scenario_configurations"
    ],
    [
      "dev",
      "pro_configuration_scenario_parties"
    ],
    [
      "dev",
      "pro_configuration_scenario_receiver_agreements"
    ],
    [
      "dev",
      "pro_configuration_scenario_sender_agreements"
    ],
    [
      "dev",
      "pro_configuration_scenarios"
    ],
    [
      "dev",
      "pro_integrated_configuration_interfaces"
    ],
    [
      "dev",
      "pro_integrated_configuration_receiver_agreements"
    ],
    [
      "dev",
      "pro_integrated_configuration_receivers"
    ],
    [
      "dev",
      "pro_integrated_configuration_rules"
    ],
    [
      "dev",
      "pro_integrated_configuration_sender_agreements"
    ],
    [
      "dev",
      "pro_integrated_configurations"
    ],
    [
      "dev",
      "pro_performance_data"
    ],
    [
      "dev",
      "pro_performance_measure_points"
    ],
    [
      "dev",
      "pro_performance_queries"
    ],
    [
      "dev",
      "pro_performance_stats"
    ],
    [
      "dev",
      "pro_software_components"
    ],
    [
      "dev",
      "properties"
    ],
    [
      "dev",
      "property_types"
    ],
    [
      "dev",
      "sessions"
    ],
    [
      "dev",
      "system_mappings"
    ],
    [
      "dev",
      "systems"
    ],
    [
      "dev",
      "task_runs"
    ],
    [
      "dev",
      "tasks"
    ],
    [
      "dev",
      "user_sessions"
    ],
    [
      "dev",
      "users"
    ],
    [
      "information_schema",
      "sql_features"
    ],
    [
      "information_schema",
      "sql_implementation_info"
    ],
    [
      "information_schema",
      "sql_parts"
    ],
    [
      "information_schema",
      "sql_sizing"
    ],
    [
      "pg_catalog",
      "pg_aggregate"
    ],
    [
      "pg_catalog",
      "pg_am"
    ],
    [
      "pg_catalog",
      "pg_amop"
    ],
    [
      "pg_catalog",
      "pg_amproc"
    ],
    [
      "pg_catalog",
      "pg_attrdef"
    ],
    [
      "pg_catalog",
      "pg_attribute"
    ],
    [
      "pg_catalog",
      "pg_auth_members"
    ],
    [
      "pg_catalog",
      "pg_authid"
    ],
    [
      "pg_catalog",
      "pg_cast"
    ],
    [
      "pg_catalog",
      "pg_class"
    ],
    [
      "pg_catalog",
      "pg_collation"
    ],
    [
      "pg_catalog",
      "pg_constraint"
    ],
    [
      "pg_catalog",
      "pg_conversion"
    ],
    [
      "pg_catalog",
      "pg_database"
    ],
    [
      "pg_catalog",
      "pg_db_role_setting"
    ],
    [
      "pg_catalog",
      "pg_default_acl"
    ],
    [
      "pg_catalog",
      "pg_depend"
    ],
    [
      "pg_catalog",
      "pg_description"
    ],
    [
      "pg_catalog",
      "pg_enum"
    ],
    [
      "pg_catalog",
      "pg_event_trigger"
    ],
    [
      "pg_catalog",
      "pg_extension"
    ],
    [
      "pg_catalog",
      "pg_foreign_data_wrapper"
    ],
    [
      "pg_catalog",
      "pg_foreign_server"
    ],
    [
      "pg_catalog",
      "pg_foreign_table"
    ],
    [
      "pg_catalog",
      "pg_index"
    ],
    [
      "pg_catalog",
      "pg_inherits"
    ],
    [
      "pg_catalog",
      "pg_init_privs"
    ],
    [
      "pg_catalog",
      "pg_language"
    ],
    [
      "pg_catalog",
      "pg_largeobject"
    ],
    [
      "pg_catalog",
      "pg_largeobject_metadata"
    ],
    [
      "pg_catalog",
      "pg_namespace"
    ],
    [
      "pg_catalog",
      "pg_opclass"
    ],
    [
      "pg_catalog",
      "pg_operator"
    ],
    [
      "pg_catalog",
      "pg_opfamily"
    ],
    [
      "pg_catalog",
      "pg_parameter_acl"
    ],
    [
      "pg_catalog",
      "pg_partitioned_table"
    ],
    [
      "pg_catalog",
      "pg_policy"
    ],
    [
      "pg_catalog",
      "pg_proc"
    ],
    [
      "pg_catalog",
      "pg_publication"
    ],
    [
      "pg_catalog",
      "pg_publication_namespace"
    ],
    [
      "pg_catalog",
      "pg_publication_rel"
    ],
    [
      "pg_catalog",
      "pg_range"
    ],
    [
      "pg_catalog",
      "pg_replication_origin"
    ],
    [
      "pg_catalog",
      "pg_rewrite"
    ],
    [
      "pg_catalog",
      "pg_seclabel"
    ],
    [
      "pg_catalog",
      "pg_sequence"
    ],
    [
      "pg_catalog",
      "pg_shdepend"
    ],
    [
      "pg_catalog",
      "pg_shdescription"
    ],
    [
      "pg_catalog",
      "pg_shseclabel"
    ],
    [
      "pg_catalog",
      "pg_statistic"
    ],
    [
      "pg_catalog",
      "pg_statistic_ext"
    ],
    [
      "pg_catalog",
      "pg_statistic_ext_data"
    ],
    [
      "pg_catalog",
      "pg_subscription"
    ],
    [
      "pg_catalog",
      "pg_subscription_rel"
    ],
    [
      "pg_catalog",
      "pg_tablespace"
    ],
    [
      "pg_catalog",
      "pg_transform"
    ],
    [
      "pg_catalog",
      "pg_trigger"
    ],
    [
      "pg_catalog",
      "pg_ts_config"
    ],
    [
      "pg_catalog",
      "pg_ts_config_map"
    ],
    [
      "pg_catalog",
      "pg_ts_dict"
    ],
    [
      "pg_catalog",
      "pg_ts_parser"
    ],
    [
      "pg_catalog",
      "pg_ts_template"
    ],
    [
      "pg_catalog",
      "pg_type"
    ],
    [
      "pg_catalog",
      "pg_user_mapping"
    ]
  ],
  "row_count": 206,
  "execution_time": 0.012998,
  "query": "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;",
  "status": "success"
}
2025-04-30 18:09:29,599 - DEBUG - STDOUT: SQL Executor node output: current_agent=router
2025-04-30 18:09:29,605 - DEBUG - STDOUT: SQL query results summary: status=success, rows=206
2025-04-30 18:09:29,606 - DEBUG - STDOUT: ==== SQL EXECUTOR NODE END ====
2025-04-30 18:09:29,609 - INFO - Processing agent: sql_executor
2025-04-30 18:09:29,609 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:29,609 - DEBUG - Event keys: dict_keys(['sql_executor'])
2025-04-30 18:09:29,612 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor']
2025-04-30 18:09:29,613 - DEBUG - STDOUT: 
==== ROUTER NODE START ====
2025-04-30 18:09:29,615 - DEBUG - STDOUT: Input state: user_question=list all tables
2025-04-30 18:09:29,616 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor']
2025-04-30 18:09:29,620 - DEBUG - STDOUT: RouterAgent returned decision: {
  "router_response": {
    "route_to": "planner",
    "reason": "Starting new workflow",
    "feedback": "Initializing workflow with planner",
    "state_updates": {
      "workflow_started": true,
      "start_time": "2025-04-30T18:09:29.619795"
    },
    "confidence_score": 1.0,
    "requires_human_input": false
  }
}
2025-04-30 18:09:29,625 - DEBUG - STDOUT: Route decision: planner
2025-04-30 18:09:29,626 - DEBUG - STDOUT: Router node output: current_agent=planner
2025-04-30 18:09:29,627 - DEBUG - STDOUT: Router response: {
  "route_to": "planner",
  "reason": "Starting new workflow",
  "feedback": "Initializing workflow with planner",
  "state_updates": {
    "workflow_started": true,
    "start_time": "2025-04-30T18:09:29.619795"
  },
  "confidence_score": 1.0,
  "requires_human_input": false
}
2025-04-30 18:09:29,627 - DEBUG - STDOUT: ==== ROUTER NODE END ====
2025-04-30 18:09:29,633 - DEBUG - STDOUT: RECURSION GUARD: Node planner visited 4 times. Forcing to end.
2025-04-30 18:09:29,637 - INFO - Processing agent: router
2025-04-30 18:09:29,637 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:29,637 - DEBUG - Event keys: dict_keys(['router'])
2025-04-30 18:09:29,637 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router']
2025-04-30 18:09:29,637 - DEBUG - router response: {'route_to': 'planner', 'reason': 'Starting new workflow', 'feedback': 'Initializing workflow with planner', 'state_updates': {'workflow_started': True, 'start_time': '2025-04-30T18:09:29.619795'}, 'confidence_score': 1.0, 'requires_human_input': False}
2025-04-30 18:09:29,643 - DEBUG - STDOUT: 
==== END NODE START ====
2025-04-30 18:09:29,644 - DEBUG - STDOUT: Processing final state
2025-04-30 18:09:29,645 - DEBUG - STDOUT: Creating default final report
2025-04-30 18:09:29,646 - DEBUG - STDOUT: Final report prepared successfully
2025-04-30 18:09:29,647 - DEBUG - STDOUT: ==== END NODE END ====
2025-04-30 18:09:29,652 - INFO - Processing agent: end
2025-04-30 18:09:29,655 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:29,657 - DEBUG - Event keys: dict_keys(['end'])
2025-04-30 18:09:29,657 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor', 'router']
2025-04-30 18:09:29,659 - DEBUG - Final state type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:29,659 - DEBUG - Final state keys: dict_keys(['end'])
2025-04-30 18:09:29,660 - DEBUG - End node type: <class 'dict'>
2025-04-30 18:09:29,661 - DEBUG - End node keys: dict_keys(['current_agent', 'user_question', 'selected_schema', 'tool_responses', 'execution_path', 'errors', 'is_error_state', 'planner_response', 'selector_response', 'SQLGenerator_response', 'reviewer_response', 'router_response', 'final_report_response', 'final_report_data', 'schemas', 'sql_query', 'sql_query_results', 'previous_selections', 'previous_reports', 'start_time', 'retry_counts', 'last_successful_state', 'end_chain', 'current_node', 'iteration_count', 'error_count', 'last_error', 'last_success', 'metadata', 'workflow_completed', 'completion_timestamp'])
2025-04-30 18:09:29,664 - INFO - SQL query results: {'column_names': ['table_schema', 'table_name'], 'rows': [('dev', 'abap_inbound_partner_profiles'), ('dev', 'abap_integration_engine_interfaces'), ('dev', 'abap_odata_services'), ('dev', 'abap_outbound_partner_profiles'), ('dev', 'abap_partner_profiles'), ('dev', 'abap_paths'), ('dev', 'abap_ports'), ('dev', 'abap_qrfc_destinations'), ('dev', 'abap_rfc_destination_options'), ('dev', 'abap_rfc_destinations'), ('dev', 'abap_soap_service_binding_properties'), ('dev', 'abap_soap_service_bindings'), ('dev', 'abap_soap_services'), ('dev', 'abap_systems'), ('dev', 'anypoint_assets'), ('dev', 'anypoint_organisations'), ('dev', 'azure_api_management_api_operation_parameters'), ('dev', 'azure_api_management_api_operation_replies'), ('dev', 'azure_api_management_api_operations'), ('dev', 'azure_api_management_api_products'), ('dev', 'azure_api_management_api_revisions'), ('dev', 'azure_api_management_apis'), ('dev', 'azure_api_management_backend_parameters'), ('dev', 'azure_api_management_backends'), ('dev', 'azure_api_management_policies'), ('dev', 'azure_api_management_policy_properties'), ('dev', 'azure_api_management_products'), ('dev', 'azure_api_management_services'), ('dev', 'azure_api_management_subscriptions'), ('dev', 'azure_event_grid_domain_topics'), ('dev', 'azure_event_grid_domains'), ('dev', 'azure_event_grid_event_subscriptions'), ('dev', 'azure_event_grid_partner_namespace_channels'), ('dev', 'azure_event_grid_partner_namespaces'), ('dev', 'azure_event_grid_partner_registrations'), ('dev', 'azure_event_grid_partner_topics'), ('dev', 'azure_event_grid_system_topics'), ('dev', 'azure_event_grid_topics'), ('dev', 'azure_logic_app_integration_account_agreements'), ('dev', 'azure_logic_app_integration_account_certificates'), ('dev', 'azure_logic_app_integration_account_maps'), ('dev', 'azure_logic_app_integration_account_partner_identities'), ('dev', 'azure_logic_app_integration_account_partner_metadata'), ('dev', 'azure_logic_app_integration_account_partners'), ('dev', 'azure_logic_app_integration_account_schemas'), ('dev', 'azure_logic_app_integration_account_sessions'), ('dev', 'azure_logic_app_integration_accounts'), ('dev', 'azure_logic_app_workflow_versions'), ('dev', 'azure_logic_app_workflows'), ('dev', 'azure_resource_groups'), ('dev', 'azure_service_bus_authorization_rules'), ('dev', 'azure_service_bus_namespaces'), ('dev', 'azure_service_bus_queues'), ('dev', 'azure_service_bus_topic_subscription_rules'), ('dev', 'azure_service_bus_topic_subscriptions'), ('dev', 'azure_service_bus_topics'), ('dev', 'azure_standard_app_workflows'), ('dev', 'azure_standard_apps'), ('dev', 'azure_subscriptions'), ('dev', 'azure_tenants'), ('dev', 'btp_api_management_product_applications'), ('dev', 'btp_api_management_product_rate_plans'), ('dev', 'btp_api_management_products'), ('dev', 'btp_api_management_providers'), ('dev', 'btp_api_management_proxies'), ('dev', 'btp_api_management_proxy_products'), ('dev', 'btp_cloud_integration_artefacts'), ('dev', 'btp_cloud_integration_configurations'), ('dev', 'btp_cloud_integration_connections'), ('dev', 'btp_cloud_integration_credentials'), ('dev', 'btp_cloud_integration_message_attachments'), ('dev', 'btp_cloud_integration_message_properties'), ('dev', 'btp_cloud_integration_message_store_entries'), ('dev', 'btp_cloud_integration_messages'), ('dev', 'btp_cloud_integration_oauth2credentials'), ('dev', 'btp_cloud_integration_package_tags'), ('dev', 'btp_cloud_integration_packages'), ('dev', 'btp_cloud_integration_participants'), ('dev', 'btp_cloud_integration_resources'), ('dev', 'btp_cloud_integration_runtime_artefacts'), ('dev', 'btp_cloud_integration_service_endpoints'), ('dev', 'btp_event_mesh_queue_topics'), ('dev', 'btp_event_mesh_queues'), ('dev', 'btp_event_mesh_topics'), ('dev', 'btp_event_mesh_webhooks'), ('dev', 'btp_tenants'), ('dev', 'data_flow_items'), ('dev', 'data_flows'), ('dev', 'data_source_access_tokens'), ('dev', 'data_source_api_keys'), ('dev', 'data_source_basic_auth_credentials'), ('dev', 'data_source_oauth2credentials'), ('dev', 'data_source_proxies'), ('dev', 'data_source_proxy_headers'), ('dev', 'data_sources'), ('dev', 'hopex_tenants'), ('dev', 'inventories'), ('dev', 'lean_ix_fields'), ('dev', 'lean_ix_tags'), ('dev', 'lean_ix_tenants'), ('dev', 'log_entries'), ('dev', 'log_entry_attributes'), ('dev', 'luy_tenants'), ('dev', 'metadata'), ('dev', 'pro_adapter_attributes'), ('dev', 'pro_adapter_module_parameters'), ('dev', 'pro_adapter_modules'), ('dev', 'pro_agreements'), ('dev', 'pro_communication_channels'), ('dev', 'pro_communication_components'), ('dev', 'pro_communication_parties'), ('dev', 'pro_configuration_scenario_channels'), ('dev', 'pro_configuration_scenario_components'), ('dev', 'pro_configuration_scenario_configurations'), ('dev', 'pro_configuration_scenario_parties'), ('dev', 'pro_configuration_scenario_receiver_agreements'), ('dev', 'pro_configuration_scenario_sender_agreements'), ('dev', 'pro_configuration_scenarios'), ('dev', 'pro_integrated_configuration_interfaces'), ('dev', 'pro_integrated_configuration_receiver_agreements'), ('dev', 'pro_integrated_configuration_receivers'), ('dev', 'pro_integrated_configuration_rules'), ('dev', 'pro_integrated_configuration_sender_agreements'), ('dev', 'pro_integrated_configurations'), ('dev', 'pro_performance_data'), ('dev', 'pro_performance_measure_points'), ('dev', 'pro_performance_queries'), ('dev', 'pro_performance_stats'), ('dev', 'pro_software_components'), ('dev', 'properties'), ('dev', 'property_types'), ('dev', 'sessions'), ('dev', 'system_mappings'), ('dev', 'systems'), ('dev', 'task_runs'), ('dev', 'tasks'), ('dev', 'user_sessions'), ('dev', 'users'), ('information_schema', 'sql_features'), ('information_schema', 'sql_implementation_info'), ('information_schema', 'sql_parts'), ('information_schema', 'sql_sizing'), ('pg_catalog', 'pg_aggregate'), ('pg_catalog', 'pg_am'), ('pg_catalog', 'pg_amop'), ('pg_catalog', 'pg_amproc'), ('pg_catalog', 'pg_attrdef'), ('pg_catalog', 'pg_attribute'), ('pg_catalog', 'pg_auth_members'), ('pg_catalog', 'pg_authid'), ('pg_catalog', 'pg_cast'), ('pg_catalog', 'pg_class'), ('pg_catalog', 'pg_collation'), ('pg_catalog', 'pg_constraint'), ('pg_catalog', 'pg_conversion'), ('pg_catalog', 'pg_database'), ('pg_catalog', 'pg_db_role_setting'), ('pg_catalog', 'pg_default_acl'), ('pg_catalog', 'pg_depend'), ('pg_catalog', 'pg_description'), ('pg_catalog', 'pg_enum'), ('pg_catalog', 'pg_event_trigger'), ('pg_catalog', 'pg_extension'), ('pg_catalog', 'pg_foreign_data_wrapper'), ('pg_catalog', 'pg_foreign_server'), ('pg_catalog', 'pg_foreign_table'), ('pg_catalog', 'pg_index'), ('pg_catalog', 'pg_inherits'), ('pg_catalog', 'pg_init_privs'), ('pg_catalog', 'pg_language'), ('pg_catalog', 'pg_largeobject'), ('pg_catalog', 'pg_largeobject_metadata'), ('pg_catalog', 'pg_namespace'), ('pg_catalog', 'pg_opclass'), ('pg_catalog', 'pg_operator'), ('pg_catalog', 'pg_opfamily'), ('pg_catalog', 'pg_parameter_acl'), ('pg_catalog', 'pg_partitioned_table'), ('pg_catalog', 'pg_policy'), ('pg_catalog', 'pg_proc'), ('pg_catalog', 'pg_publication'), ('pg_catalog', 'pg_publication_namespace'), ('pg_catalog', 'pg_publication_rel'), ('pg_catalog', 'pg_range'), ('pg_catalog', 'pg_replication_origin'), ('pg_catalog', 'pg_rewrite'), ('pg_catalog', 'pg_seclabel'), ('pg_catalog', 'pg_sequence'), ('pg_catalog', 'pg_shdepend'), ('pg_catalog', 'pg_shdescription'), ('pg_catalog', 'pg_shseclabel'), ('pg_catalog', 'pg_statistic'), ('pg_catalog', 'pg_statistic_ext'), ('pg_catalog', 'pg_statistic_ext_data'), ('pg_catalog', 'pg_subscription'), ('pg_catalog', 'pg_subscription_rel'), ('pg_catalog', 'pg_tablespace'), ('pg_catalog', 'pg_transform'), ('pg_catalog', 'pg_trigger'), ('pg_catalog', 'pg_ts_config'), ('pg_catalog', 'pg_ts_config_map'), ('pg_catalog', 'pg_ts_dict'), ('pg_catalog', 'pg_ts_parser'), ('pg_catalog', 'pg_ts_template'), ('pg_catalog', 'pg_type'), ('pg_catalog', 'pg_user_mapping')], 'row_count': 206, 'execution_time': 0.012998, 'query': "SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;", 'status': 'success'}
2025-04-30 18:09:29,682 - INFO - SQL query: SELECT table_schema, table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE' ORDER BY table_schema, table_name;
2025-04-30 18:09:29,683 - INFO - Detected 'list tables' query
2025-04-30 18:09:42,809 - INFO - QUERY START: list all interfaces
2025-04-30 18:09:42,810 - INFO - QUERY ID: 1746029382-075274
2025-04-30 18:09:42,812 - INFO - START TIME: 2025-04-30 18:09:42.808152
2025-04-30 18:09:42,813 - INFO - Starting workflow execution for: 'list all interfaces'
2025-04-30 18:09:42,818 - INFO - Initial state validated successfully
2025-04-30 18:09:42,820 - INFO - Using recursion limit: 40
2025-04-30 18:09:42,821 - INFO - Starting workflow stream
2025-04-30 18:09:42,826 - DEBUG - STDOUT: 
==== PLANNER NODE START ====
2025-04-30 18:09:42,828 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:42,829 - DEBUG - STDOUT: Current execution path: []
2025-04-30 18:09:42,831 - DEBUG - STDOUT: Processing user question: 'list all interfaces'
2025-04-30 18:09:42,833 - DEBUG - STDOUT: Successfully initialized database metadata store and discovery service
2025-04-30 18:09:42,835 - DEBUG - STDOUT: Successfully initialized PlannerAgent with database capabilities using model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:42,837 - DEBUG - STDOUT: PlannerAgent is using LLM to analyze the query and determine the appropriate database tables and columns
2025-04-30 18:09:42,838 - DEBUG - STDOUT: Invoking PlannerAgent with question: 'list all interfaces'
2025-04-30 18:09:42,843 - DEBUG - STDOUT: Invoking Planner with question: list all interfaces...
2025-04-30 18:09:43,991 - DEBUG - STDOUT: Raw Planner response: {
    "query_type": "sql",
    "primary_table_or_datasource": "unknown",
    "relevant_columns": [],
    "filtering_conditions": "",
    "processing_instructions": "Discover all tables in the database that may represent 'interfaces'. If 'interfaces' is a table, retrieve all records from it. If not, search for tables with names or columns related to 'interface'."
}
2025-04-30 18:09:43,999 - DEBUG - STDOUT: PlannerAgent returned plan: {
  "query_type": "sql",
  "primary_table_or_datasource": "unknown",
  "relevant_columns": [],
  "filtering_conditions": "",
  "processing_instructions": "Discover all tables in the database that may represent 'interfaces'. If 'interfaces' is a table, retrieve all records from it. If not, search for tables with names or columns related to 'interface'.",
  "validated": true,
  "timestamp": "2025-04-30 18:09:43.999887",
  "agent": "planner",
  "user_question": "list all interfaces"
}
2025-04-30 18:09:44,004 - DEBUG - STDOUT: Planner node output: current_agent=selector
2025-04-30 18:09:44,007 - DEBUG - STDOUT: Planner response being sent to selector: {
  "query_type": "sql",
  "primary_table_or_datasource": "unknown",
  "relevant_columns": [],
  "filtering_conditions": "",
  "processing_instructions": "Discover all tables in the database that may represent 'interfaces'. If 'interfaces' is a table, retrieve all records from it. If not, search for tables with names or columns related to 'interface'.",
  "validated": true,
  "timestamp": "2025-04-30 18:09:43.999887",
  "agent": "planner",
  "user_question": "list all interfaces"
}
2025-04-30 18:09:44,013 - DEBUG - STDOUT: ==== PLANNER NODE END ====
2025-04-30 18:09:44,015 - INFO - Processing agent: planner
2025-04-30 18:09:44,015 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:44,016 - DEBUG - Event keys: dict_keys(['planner'])
2025-04-30 18:09:44,018 - DEBUG - Execution path: ['planner']
2025-04-30 18:09:44,019 - DEBUG - planner response: {'query_type': 'sql', 'primary_table_or_datasource': 'unknown', 'relevant_columns': [], 'filtering_conditions': '', 'processing_instructions': "Discover all tables in the database that may represent 'interfaces'. If 'interfaces' is a table, retrieve all records from it. If not, search for tables with names or columns related to 'interface'.", 'validated': True, 'timestamp': '2025-04-30 18:09:43.999887', 'agent': 'planner', 'user_question': 'list all interfaces'}
2025-04-30 18:09:44,021 - DEBUG - STDOUT: 
==== SELECTOR NODE START ====
2025-04-30 18:09:44,024 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:44,027 - DEBUG - STDOUT: Current execution path: ['planner']
2025-04-30 18:09:44,028 - DEBUG - STDOUT: Planner response received: {
  "query_type": "sql",
  "primary_table_or_datasource": "unknown",
  "relevant_columns": [],
  "filtering_conditions": "",
  "processing_instructions": "Discover all tables in the database that may represent 'interfaces'. If 'interfaces' is a table, retrieve all records from it. If not, search for tables with names or columns related to 'interface'.",
  "validated": true,
  "timestamp": "2025-04-30 18:09:43.999887",
  "agent": "planner",
  "user_question": "list all interfaces"
}
2025-04-30 18:09:44,034 - DEBUG - STDOUT: Selector is processing planner response for question: 'list all interfaces'
2025-04-30 18:09:44,035 - DEBUG - STDOUT: NOTE: The selector node is currently simplified and doesn't use LLM.
2025-04-30 18:09:44,036 - DEBUG - STDOUT: It simply passes through to the SQLGenerator without making actual selections.
2025-04-30 18:09:44,038 - DEBUG - STDOUT: Selector node output: current_agent=SQLGenerator
2025-04-30 18:09:44,041 - DEBUG - STDOUT: Selector response being sent to SQLGenerator: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "unknown",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [],
    "filters": ""
  }
}
2025-04-30 18:09:44,048 - DEBUG - STDOUT: ==== SELECTOR NODE END ====
2025-04-30 18:09:44,050 - INFO - Processing agent: selector
2025-04-30 18:09:44,052 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:44,053 - DEBUG - Event keys: dict_keys(['selector'])
2025-04-30 18:09:44,054 - DEBUG - Execution path: ['planner', 'selector']
2025-04-30 18:09:44,056 - DEBUG - selector response: {'raw': 'Selection completed', 'selected_schemas': {}, 'selected_tool': 'sql_query', 'selected_datasource': 'unknown', 'information_needed': 'Table listing', 'reason_for_selection': 'Direct database query is the most efficient way to list tables', 'query_parameters': {'columns': [], 'filters': ''}}
2025-04-30 18:09:44,060 - DEBUG - STDOUT: 
==== SQL GENERATOR NODE START ====
2025-04-30 18:09:44,064 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:44,065 - DEBUG - STDOUT: Current execution path: ['planner', 'selector']
2025-04-30 18:09:44,066 - DEBUG - STDOUT: Selector response received: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "unknown",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [],
    "filters": ""
  }
}
2025-04-30 18:09:44,070 - DEBUG - STDOUT: Non-standard query detected, using LLM-based SQLGenerator
2025-04-30 18:09:44,071 - DEBUG - STDOUT: Created SQLGenerator with model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:44,076 - DEBUG - STDOUT: Invoking SQLGenerator with user_question: 'list all interfaces'
2025-04-30 18:09:46,217 - DEBUG - STDOUT: Error in SQL generator: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:09:46,217 - DEBUG - STDERR: Traceback (most recent call last):
2025-04-30 18:09:46,217 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1763, in invoke
    self._validate_response(model_response)
2025-04-30 18:09:46,231 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1819, in _validate_response
    raise ValueError(f"Missing required fields in SQL generator response: {missing_fields}")
2025-04-30 18:09:46,233 - DEBUG - STDERR: ValueError: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:09:46,235 - DEBUG - STDOUT: SQLGenerator returned response: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  }
}
2025-04-30 18:09:46,240 - DEBUG - STDOUT: Found sql_query in sql_generator_response:
2025-04-30 18:09:46,242 - DEBUG - STDOUT: SQL query was not generated. Retrying with more explicit instructions.
2025-04-30 18:09:46,243 - DEBUG - STDOUT: Retrying with explicit prompt: 
            I need a SQL query to answer this question: "list all interfaces"

            If this is asking to list tables, use:
            SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';

            If this is asking about specific table contents, use:
            SELECT * FROM [table_name] LIMIT 10;

            Please generate ONLY the SQL query without any explanation.
2025-04-30 18:09:47,744 - DEBUG - STDOUT: Error in SQL generator: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:09:47,746 - DEBUG - STDERR: Traceback (most recent call last):
2025-04-30 18:09:47,747 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1763, in invoke
    self._validate_response(model_response)
2025-04-30 18:09:47,749 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1819, in _validate_response
    raise ValueError(f"Missing required fields in SQL generator response: {missing_fields}")
2025-04-30 18:09:47,751 - DEBUG - STDERR: ValueError: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:09:47,754 - DEBUG - STDOUT: Second attempt response: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  }
}
2025-04-30 18:09:47,760 - DEBUG - STDOUT: Second attempt generated SQL query:
2025-04-30 18:09:47,761 - DEBUG - STDOUT: WARNING: Failed to generate SQL query after multiple attempts
2025-04-30 18:09:47,762 - DEBUG - STDOUT: Final SQL query set in response:
2025-04-30 18:09:47,763 - DEBUG - STDOUT: SQL Generator node output: current_agent=reviewer
2025-04-30 18:09:47,765 - DEBUG - STDOUT: SQL query generated:
2025-04-30 18:09:47,766 - DEBUG - STDOUT: SQL Generator response being sent to reviewer: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  },
  "sql_query": ""
}
2025-04-30 18:09:47,772 - DEBUG - STDOUT: ==== SQL GENERATOR NODE END ====
2025-04-30 18:09:47,774 - INFO - Processing agent: SQLGenerator
2025-04-30 18:09:47,775 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:47,776 - DEBUG - Event keys: dict_keys(['SQLGenerator'])
2025-04-30 18:09:47,777 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:47,778 - DEBUG - SQLGenerator response: {'sql_generator_response': {'sql_query': '', 'explanation': "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']", 'validation_checks': ['Query generation failed'], 'query_type': 'ERROR', 'estimated_complexity': 'UNKNOWN', 'required_indexes': []}, 'sql_query': ''}
2025-04-30 18:09:47,779 - DEBUG - STDOUT: 
==== REVIEWER NODE START ====
2025-04-30 18:09:47,781 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:47,782 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:47,783 - DEBUG - STDOUT: SQL query to review:
2025-04-30 18:09:47,784 - DEBUG - STDOUT: SQLGenerator response received: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  },
  "sql_query": ""
}
2025-04-30 18:09:47,790 - DEBUG - STDOUT: Reviewer is analyzing SQL query for question: 'list all interfaces'
2025-04-30 18:09:47,791 - DEBUG - STDOUT: Using LLM-based ReviewerAgent to analyze the SQL query
2025-04-30 18:09:47,793 - DEBUG - STDOUT: Created ReviewerAgent with model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:47,793 - DEBUG - STDOUT: Invoking ReviewerAgent with user_question: 'list all interfaces' and sql_query: ''
2025-04-30 18:09:47,793 - DEBUG - STDOUT: ReviewerAgent returned review: {
  "reviewer_response": {
    "is_correct": false,
    "issues": [
      "Empty SQL query provided"
    ],
    "suggestions": [
      "Fix the identified issues before proceeding"
    ],
    "explanation": "Review failed due to critical issues",
    "security_concerns": [],
    "performance_impact": "HIGH",
    "confidence_score": 1.0,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:47.793418",
      "review_status": "ERROR",
      "review_version": "1.0"
    }
  }
}
2025-04-30 18:09:47,803 - DEBUG - STDOUT: Reviewer node output: current_agent=sql_executor
2025-04-30 18:09:47,805 - DEBUG - STDOUT: Reviewer response being sent to sql_executor: {
  "reviewer_response": {
    "is_correct": false,
    "issues": [
      "Empty SQL query provided"
    ],
    "suggestions": [
      "Fix the identified issues before proceeding"
    ],
    "explanation": "Review failed due to critical issues",
    "security_concerns": [],
    "performance_impact": "HIGH",
    "confidence_score": 1.0,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:47.793418",
      "review_status": "ERROR",
      "review_version": "1.0"
    }
  }
}
2025-04-30 18:09:47,812 - DEBUG - STDOUT: ==== REVIEWER NODE END ====
2025-04-30 18:09:47,813 - INFO - Processing agent: reviewer
2025-04-30 18:09:47,813 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:47,813 - DEBUG - Event keys: dict_keys(['reviewer'])
2025-04-30 18:09:47,813 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:47,813 - DEBUG - reviewer response: {'reviewer_response': {'is_correct': False, 'issues': ['Empty SQL query provided'], 'suggestions': ['Fix the identified issues before proceeding'], 'explanation': 'Review failed due to critical issues', 'security_concerns': [], 'performance_impact': 'HIGH', 'confidence_score': 1.0, 'metadata': {'reviewed_at': '2025-04-30T18:09:47.793418', 'review_status': 'ERROR', 'review_version': '1.0'}}}
2025-04-30 18:09:47,820 - DEBUG - STDOUT: 
==== SQL EXECUTOR NODE START ====
2025-04-30 18:09:47,821 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:47,824 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:47,825 - DEBUG - STDOUT: SQL query to execute:
2025-04-30 18:09:47,827 - DEBUG - STDOUT: Reviewer response received: {
  "reviewer_response": {
    "is_correct": false,
    "issues": [
      "Empty SQL query provided"
    ],
    "suggestions": [
      "Fix the identified issues before proceeding"
    ],
    "explanation": "Review failed due to critical issues",
    "security_concerns": [],
    "performance_impact": "HIGH",
    "confidence_score": 1.0,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:47.793418",
      "review_status": "ERROR",
      "review_version": "1.0"
    }
  }
}
2025-04-30 18:09:47,834 - DEBUG - STDOUT: SQL Executor is processing SQL query: ''
2025-04-30 18:09:47,835 - DEBUG - STDOUT: ERROR: SQL query is empty. Cannot execute empty query.
2025-04-30 18:09:47,836 - DEBUG - STDOUT: SQL Executor node error output (empty query): {
  "current_agent": "router",
  "errors": {
    "sql_executor": "Empty SQL query provided"
  },
  "execution_path": [
    "planner",
    "selector",
    "SQLGenerator",
    "reviewer",
    "sql_executor_error"
  ],
  "is_error_state": true,
  "sql_query_results": {
    "status": "error",
    "error_message": "Empty SQL query provided. The SQL Generator failed to create a valid query.",
    "column_names": [
      "Error"
    ],
    "rows": [
      [
        "Empty SQL query provided"
      ]
    ],
    "row_count": 1,
    "execution_time": 0,
    "query": ""
  },
  "model": "chatgpt-4o-latest",
  "server": "openai",
  "temperature": 0.0,
  "model_endpoint": "https://api.openai.com/v1"
}
2025-04-30 18:09:47,846 - DEBUG - STDOUT: ==== SQL EXECUTOR NODE END (WITH ERROR) ====
2025-04-30 18:09:47,850 - INFO - Processing agent: sql_executor
2025-04-30 18:09:47,851 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:47,852 - DEBUG - Event keys: dict_keys(['sql_executor'])
2025-04-30 18:09:47,853 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error']
2025-04-30 18:09:47,855 - DEBUG - STDOUT: 
==== ROUTER NODE START ====
2025-04-30 18:09:47,857 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:47,858 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error']
2025-04-30 18:09:47,860 - DEBUG - STDOUT: RouterAgent returned decision: {
  "router_response": {
    "route_to": "planner",
    "reason": "Starting new workflow",
    "feedback": "Initializing workflow with planner",
    "state_updates": {
      "workflow_started": true,
      "start_time": "2025-04-30T18:09:47.859531"
    },
    "confidence_score": 1.0,
    "requires_human_input": false
  }
}
2025-04-30 18:09:47,863 - DEBUG - STDOUT: Route decision: planner
2025-04-30 18:09:47,863 - DEBUG - STDOUT: Router node output: current_agent=planner
2025-04-30 18:09:47,867 - DEBUG - STDOUT: Router response: {
  "route_to": "planner",
  "reason": "Starting new workflow",
  "feedback": "Initializing workflow with planner",
  "state_updates": {
    "workflow_started": true,
    "start_time": "2025-04-30T18:09:47.859531"
  },
  "confidence_score": 1.0,
  "requires_human_input": false
}
2025-04-30 18:09:47,873 - DEBUG - STDOUT: ==== ROUTER NODE END ====
2025-04-30 18:09:47,875 - DEBUG - STDOUT: ROUTE DECISION: planner -> to_planner
2025-04-30 18:09:47,876 - INFO - Processing agent: router
2025-04-30 18:09:47,877 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:47,878 - DEBUG - Event keys: dict_keys(['router'])
2025-04-30 18:09:47,879 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router']
2025-04-30 18:09:47,880 - DEBUG - router response: {'route_to': 'planner', 'reason': 'Starting new workflow', 'feedback': 'Initializing workflow with planner', 'state_updates': {'workflow_started': True, 'start_time': '2025-04-30T18:09:47.859531'}, 'confidence_score': 1.0, 'requires_human_input': False}
2025-04-30 18:09:47,881 - DEBUG - STDOUT: 
==== PLANNER NODE START ====
2025-04-30 18:09:47,882 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:47,883 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router']
2025-04-30 18:09:47,884 - DEBUG - STDOUT: Processing user question: 'list all interfaces'
2025-04-30 18:09:47,886 - DEBUG - STDOUT: Successfully initialized database metadata store and discovery service
2025-04-30 18:09:47,890 - DEBUG - STDOUT: Successfully initialized PlannerAgent with database capabilities using model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:47,892 - DEBUG - STDOUT: PlannerAgent is using LLM to analyze the query and determine the appropriate database tables and columns
2025-04-30 18:09:47,893 - DEBUG - STDOUT: Invoking PlannerAgent with question: 'list all interfaces'
2025-04-30 18:09:47,894 - DEBUG - STDOUT: Invoking Planner with question: list all interfaces...
2025-04-30 18:09:48,735 - DEBUG - STDOUT: Raw Planner response: {
    "query_type": "sql",
    "primary_table_or_datasource": "unknown",
    "relevant_columns": [],
    "filtering_conditions": "",
    "processing_instructions": "Discover the database structure to identify which table(s) contain interface information. Start by listing all schemas, then list tables in each schema to find relevant ones that may store interface data."
}
2025-04-30 18:09:48,742 - DEBUG - STDOUT: PlannerAgent returned plan: {
  "query_type": "sql",
  "primary_table_or_datasource": "unknown",
  "relevant_columns": [],
  "filtering_conditions": "",
  "processing_instructions": "Discover the database structure to identify which table(s) contain interface information. Start by listing all schemas, then list tables in each schema to find relevant ones that may store interface data.",
  "validated": true,
  "timestamp": "2025-04-30 18:09:48.742635",
  "agent": "planner",
  "user_question": "list all interfaces"
}
2025-04-30 18:09:48,748 - DEBUG - STDOUT: Planner node output: current_agent=selector
2025-04-30 18:09:48,749 - DEBUG - STDOUT: Planner response being sent to selector: {
  "query_type": "sql",
  "primary_table_or_datasource": "unknown",
  "relevant_columns": [],
  "filtering_conditions": "",
  "processing_instructions": "Discover the database structure to identify which table(s) contain interface information. Start by listing all schemas, then list tables in each schema to find relevant ones that may store interface data.",
  "validated": true,
  "timestamp": "2025-04-30 18:09:48.742635",
  "agent": "planner",
  "user_question": "list all interfaces"
}
2025-04-30 18:09:48,755 - DEBUG - STDOUT: ==== PLANNER NODE END ====
2025-04-30 18:09:48,758 - INFO - Processing agent: planner
2025-04-30 18:09:48,759 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:48,760 - DEBUG - Event keys: dict_keys(['planner'])
2025-04-30 18:09:48,761 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner']
2025-04-30 18:09:48,762 - DEBUG - planner response: {'query_type': 'sql', 'primary_table_or_datasource': 'unknown', 'relevant_columns': [], 'filtering_conditions': '', 'processing_instructions': 'Discover the database structure to identify which table(s) contain interface information. Start by listing all schemas, then list tables in each schema to find relevant ones that may store interface data.', 'validated': True, 'timestamp': '2025-04-30 18:09:48.742635', 'agent': 'planner', 'user_question': 'list all interfaces'}
2025-04-30 18:09:48,765 - DEBUG - STDOUT: 
==== SELECTOR NODE START ====
2025-04-30 18:09:48,766 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:48,767 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner']
2025-04-30 18:09:48,769 - DEBUG - STDOUT: Planner response received: {
  "query_type": "sql",
  "primary_table_or_datasource": "unknown",
  "relevant_columns": [],
  "filtering_conditions": "",
  "processing_instructions": "Discover the database structure to identify which table(s) contain interface information. Start by listing all schemas, then list tables in each schema to find relevant ones that may store interface data.",
  "validated": true,
  "timestamp": "2025-04-30 18:09:48.742635",
  "agent": "planner",
  "user_question": "list all interfaces"
}
2025-04-30 18:09:48,775 - DEBUG - STDOUT: Selector is processing planner response for question: 'list all interfaces'
2025-04-30 18:09:48,776 - DEBUG - STDOUT: NOTE: The selector node is currently simplified and doesn't use LLM.
2025-04-30 18:09:48,776 - DEBUG - STDOUT: It simply passes through to the SQLGenerator without making actual selections.
2025-04-30 18:09:48,776 - DEBUG - STDOUT: Selector node output: current_agent=SQLGenerator
2025-04-30 18:09:48,781 - DEBUG - STDOUT: Selector response being sent to SQLGenerator: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "unknown",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [],
    "filters": ""
  }
}
2025-04-30 18:09:48,786 - DEBUG - STDOUT: ==== SELECTOR NODE END ====
2025-04-30 18:09:48,789 - INFO - Processing agent: selector
2025-04-30 18:09:48,791 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:48,793 - DEBUG - Event keys: dict_keys(['selector'])
2025-04-30 18:09:48,794 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector']
2025-04-30 18:09:48,795 - DEBUG - selector response: {'raw': 'Selection completed', 'selected_schemas': {}, 'selected_tool': 'sql_query', 'selected_datasource': 'unknown', 'information_needed': 'Table listing', 'reason_for_selection': 'Direct database query is the most efficient way to list tables', 'query_parameters': {'columns': [], 'filters': ''}}
2025-04-30 18:09:48,795 - DEBUG - STDOUT: 
==== SQL GENERATOR NODE START ====
2025-04-30 18:09:48,795 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:48,799 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector']
2025-04-30 18:09:48,801 - DEBUG - STDOUT: Selector response received: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "unknown",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [],
    "filters": ""
  }
}
2025-04-30 18:09:48,807 - DEBUG - STDOUT: Non-standard query detected, using LLM-based SQLGenerator
2025-04-30 18:09:48,809 - DEBUG - STDOUT: Created SQLGenerator with model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:48,811 - DEBUG - STDOUT: Invoking SQLGenerator with user_question: 'list all interfaces'
2025-04-30 18:09:50,813 - DEBUG - STDOUT: Error in SQL generator: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:09:50,815 - DEBUG - STDERR: Traceback (most recent call last):
2025-04-30 18:09:50,817 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1763, in invoke
    self._validate_response(model_response)
2025-04-30 18:09:50,820 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1819, in _validate_response
    raise ValueError(f"Missing required fields in SQL generator response: {missing_fields}")
2025-04-30 18:09:50,822 - DEBUG - STDERR: ValueError: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:09:50,824 - DEBUG - STDOUT: SQLGenerator returned response: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  }
}
2025-04-30 18:09:50,830 - DEBUG - STDOUT: Found sql_query in sql_generator_response:
2025-04-30 18:09:50,832 - DEBUG - STDOUT: SQL query was not generated. Retrying with more explicit instructions.
2025-04-30 18:09:50,834 - DEBUG - STDOUT: Retrying with explicit prompt: 
            I need a SQL query to answer this question: "list all interfaces"

            If this is asking to list tables, use:
            SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';

            If this is asking about specific table contents, use:
            SELECT * FROM [table_name] LIMIT 10;

            Please generate ONLY the SQL query without any explanation.
2025-04-30 18:09:52,280 - DEBUG - STDOUT: Error in SQL generator: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:09:52,296 - DEBUG - STDERR: Traceback (most recent call last):
2025-04-30 18:09:52,297 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1763, in invoke
    self._validate_response(model_response)
2025-04-30 18:09:52,300 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1819, in _validate_response
    raise ValueError(f"Missing required fields in SQL generator response: {missing_fields}")
2025-04-30 18:09:52,302 - DEBUG - STDERR: ValueError: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:09:52,304 - DEBUG - STDOUT: Second attempt response: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  }
}
2025-04-30 18:09:52,310 - DEBUG - STDOUT: Second attempt generated SQL query:
2025-04-30 18:09:52,311 - DEBUG - STDOUT: WARNING: Failed to generate SQL query after multiple attempts
2025-04-30 18:09:52,312 - DEBUG - STDOUT: Final SQL query set in response:
2025-04-30 18:09:52,313 - DEBUG - STDOUT: SQL Generator node output: current_agent=reviewer
2025-04-30 18:09:52,314 - DEBUG - STDOUT: SQL query generated:
2025-04-30 18:09:52,315 - DEBUG - STDOUT: SQL Generator response being sent to reviewer: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  },
  "sql_query": ""
}
2025-04-30 18:09:52,321 - DEBUG - STDOUT: ==== SQL GENERATOR NODE END ====
2025-04-30 18:09:52,324 - INFO - Processing agent: SQLGenerator
2025-04-30 18:09:52,325 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:52,326 - DEBUG - Event keys: dict_keys(['SQLGenerator'])
2025-04-30 18:09:52,327 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:52,328 - DEBUG - SQLGenerator response: {'sql_generator_response': {'sql_query': '', 'explanation': "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']", 'validation_checks': ['Query generation failed'], 'query_type': 'ERROR', 'estimated_complexity': 'UNKNOWN', 'required_indexes': []}, 'sql_query': ''}
2025-04-30 18:09:52,330 - DEBUG - STDOUT: 
==== REVIEWER NODE START ====
2025-04-30 18:09:52,331 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:52,333 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:52,335 - DEBUG - STDOUT: SQL query to review:
2025-04-30 18:09:52,337 - DEBUG - STDOUT: SQLGenerator response received: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  },
  "sql_query": ""
}
2025-04-30 18:09:52,343 - DEBUG - STDOUT: Reviewer is analyzing SQL query for question: 'list all interfaces'
2025-04-30 18:09:52,344 - DEBUG - STDOUT: Using LLM-based ReviewerAgent to analyze the SQL query
2025-04-30 18:09:52,345 - DEBUG - STDOUT: Created ReviewerAgent with model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:52,346 - DEBUG - STDOUT: Invoking ReviewerAgent with user_question: 'list all interfaces' and sql_query: ''
2025-04-30 18:09:52,348 - DEBUG - STDOUT: ReviewerAgent returned review: {
  "reviewer_response": {
    "is_correct": false,
    "issues": [
      "Empty SQL query provided"
    ],
    "suggestions": [
      "Fix the identified issues before proceeding"
    ],
    "explanation": "Review failed due to critical issues",
    "security_concerns": [],
    "performance_impact": "HIGH",
    "confidence_score": 1.0,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:52.347393",
      "review_status": "ERROR",
      "review_version": "1.0"
    }
  }
}
2025-04-30 18:09:52,358 - DEBUG - STDOUT: Reviewer node output: current_agent=sql_executor
2025-04-30 18:09:52,359 - DEBUG - STDOUT: Reviewer response being sent to sql_executor: {
  "reviewer_response": {
    "is_correct": false,
    "issues": [
      "Empty SQL query provided"
    ],
    "suggestions": [
      "Fix the identified issues before proceeding"
    ],
    "explanation": "Review failed due to critical issues",
    "security_concerns": [],
    "performance_impact": "HIGH",
    "confidence_score": 1.0,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:52.347393",
      "review_status": "ERROR",
      "review_version": "1.0"
    }
  }
}
2025-04-30 18:09:52,368 - DEBUG - STDOUT: ==== REVIEWER NODE END ====
2025-04-30 18:09:52,369 - INFO - Processing agent: reviewer
2025-04-30 18:09:52,372 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:52,373 - DEBUG - Event keys: dict_keys(['reviewer'])
2025-04-30 18:09:52,374 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:52,375 - DEBUG - reviewer response: {'reviewer_response': {'is_correct': False, 'issues': ['Empty SQL query provided'], 'suggestions': ['Fix the identified issues before proceeding'], 'explanation': 'Review failed due to critical issues', 'security_concerns': [], 'performance_impact': 'HIGH', 'confidence_score': 1.0, 'metadata': {'reviewed_at': '2025-04-30T18:09:52.347393', 'review_status': 'ERROR', 'review_version': '1.0'}}}
2025-04-30 18:09:52,376 - DEBUG - STDOUT: 
==== SQL EXECUTOR NODE START ====
2025-04-30 18:09:52,377 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:52,379 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:52,379 - DEBUG - STDOUT: SQL query to execute:
2025-04-30 18:09:52,382 - DEBUG - STDOUT: Reviewer response received: {
  "reviewer_response": {
    "is_correct": false,
    "issues": [
      "Empty SQL query provided"
    ],
    "suggestions": [
      "Fix the identified issues before proceeding"
    ],
    "explanation": "Review failed due to critical issues",
    "security_concerns": [],
    "performance_impact": "HIGH",
    "confidence_score": 1.0,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:52.347393",
      "review_status": "ERROR",
      "review_version": "1.0"
    }
  }
}
2025-04-30 18:09:52,390 - DEBUG - STDOUT: SQL Executor is processing SQL query: ''
2025-04-30 18:09:52,392 - DEBUG - STDOUT: ERROR: SQL query is empty. Cannot execute empty query.
2025-04-30 18:09:52,393 - DEBUG - STDOUT: SQL Executor node error output (empty query): {
  "current_agent": "router",
  "errors": {
    "sql_executor": "Empty SQL query provided"
  },
  "execution_path": [
    "planner",
    "selector",
    "SQLGenerator",
    "reviewer",
    "sql_executor_error",
    "router",
    "planner",
    "selector",
    "SQLGenerator",
    "reviewer",
    "sql_executor_error"
  ],
  "is_error_state": true,
  "sql_query_results": {
    "status": "error",
    "error_message": "Empty SQL query provided. The SQL Generator failed to create a valid query.",
    "column_names": [
      "Error"
    ],
    "rows": [
      [
        "Empty SQL query provided"
      ]
    ],
    "row_count": 1,
    "execution_time": 0,
    "query": ""
  },
  "model": "chatgpt-4o-latest",
  "server": "openai",
  "temperature": 0.0,
  "model_endpoint": "https://api.openai.com/v1"
}
2025-04-30 18:09:52,407 - DEBUG - STDOUT: ==== SQL EXECUTOR NODE END (WITH ERROR) ====
2025-04-30 18:09:52,409 - INFO - Processing agent: sql_executor
2025-04-30 18:09:52,410 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:52,410 - DEBUG - Event keys: dict_keys(['sql_executor'])
2025-04-30 18:09:52,411 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error']
2025-04-30 18:09:52,412 - DEBUG - STDOUT: 
==== ROUTER NODE START ====
2025-04-30 18:09:52,414 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:52,415 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error']
2025-04-30 18:09:52,420 - DEBUG - STDOUT: RouterAgent returned decision: {
  "router_response": {
    "route_to": "planner",
    "reason": "Starting new workflow",
    "feedback": "Initializing workflow with planner",
    "state_updates": {
      "workflow_started": true,
      "start_time": "2025-04-30T18:09:52.420793"
    },
    "confidence_score": 1.0,
    "requires_human_input": false
  }
}
2025-04-30 18:09:52,424 - DEBUG - STDOUT: Route decision: planner
2025-04-30 18:09:52,425 - DEBUG - STDOUT: Router node output: current_agent=planner
2025-04-30 18:09:52,426 - DEBUG - STDOUT: Router response: {
  "route_to": "planner",
  "reason": "Starting new workflow",
  "feedback": "Initializing workflow with planner",
  "state_updates": {
    "workflow_started": true,
    "start_time": "2025-04-30T18:09:52.420793"
  },
  "confidence_score": 1.0,
  "requires_human_input": false
}
2025-04-30 18:09:52,430 - DEBUG - STDOUT: ==== ROUTER NODE END ====
2025-04-30 18:09:52,432 - DEBUG - STDOUT: ROUTE DECISION: planner -> to_planner
2025-04-30 18:09:52,435 - INFO - Processing agent: router
2025-04-30 18:09:52,436 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:52,437 - DEBUG - Event keys: dict_keys(['router'])
2025-04-30 18:09:52,437 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router']
2025-04-30 18:09:52,438 - DEBUG - router response: {'route_to': 'planner', 'reason': 'Starting new workflow', 'feedback': 'Initializing workflow with planner', 'state_updates': {'workflow_started': True, 'start_time': '2025-04-30T18:09:52.420793'}, 'confidence_score': 1.0, 'requires_human_input': False}
2025-04-30 18:09:52,440 - DEBUG - STDOUT: 
==== PLANNER NODE START ====
2025-04-30 18:09:52,440 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:52,440 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router']
2025-04-30 18:09:52,440 - DEBUG - STDOUT: Processing user question: 'list all interfaces'
2025-04-30 18:09:52,446 - DEBUG - STDOUT: Successfully initialized database metadata store and discovery service
2025-04-30 18:09:52,447 - DEBUG - STDOUT: Successfully initialized PlannerAgent with database capabilities using model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:52,448 - DEBUG - STDOUT: PlannerAgent is using LLM to analyze the query and determine the appropriate database tables and columns
2025-04-30 18:09:52,451 - DEBUG - STDOUT: Invoking PlannerAgent with question: 'list all interfaces'
2025-04-30 18:09:52,453 - DEBUG - STDOUT: Invoking Planner with question: list all interfaces...
2025-04-30 18:09:53,265 - DEBUG - STDOUT: Raw Planner response: {
    "query_type": "sql",
    "primary_table_or_datasource": "unknown",
    "relevant_columns": [],
    "filtering_conditions": "",
    "processing_instructions": "Discover all tables in the database that may represent 'interfaces'. If 'interfaces' is a table, retrieve all records from it. If not, search for tables with names or columns related to 'interface'."
}
2025-04-30 18:09:53,274 - DEBUG - STDOUT: PlannerAgent returned plan: {
  "query_type": "sql",
  "primary_table_or_datasource": "unknown",
  "relevant_columns": [],
  "filtering_conditions": "",
  "processing_instructions": "Discover all tables in the database that may represent 'interfaces'. If 'interfaces' is a table, retrieve all records from it. If not, search for tables with names or columns related to 'interface'.",
  "validated": true,
  "timestamp": "2025-04-30 18:09:53.274503",
  "agent": "planner",
  "user_question": "list all interfaces"
}
2025-04-30 18:09:53,279 - DEBUG - STDOUT: Planner node output: current_agent=selector
2025-04-30 18:09:53,281 - DEBUG - STDOUT: Planner response being sent to selector: {
  "query_type": "sql",
  "primary_table_or_datasource": "unknown",
  "relevant_columns": [],
  "filtering_conditions": "",
  "processing_instructions": "Discover all tables in the database that may represent 'interfaces'. If 'interfaces' is a table, retrieve all records from it. If not, search for tables with names or columns related to 'interface'.",
  "validated": true,
  "timestamp": "2025-04-30 18:09:53.274503",
  "agent": "planner",
  "user_question": "list all interfaces"
}
2025-04-30 18:09:53,286 - DEBUG - STDOUT: ==== PLANNER NODE END ====
2025-04-30 18:09:53,289 - INFO - Processing agent: planner
2025-04-30 18:09:53,290 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:53,291 - DEBUG - Event keys: dict_keys(['planner'])
2025-04-30 18:09:53,292 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner']
2025-04-30 18:09:53,293 - DEBUG - planner response: {'query_type': 'sql', 'primary_table_or_datasource': 'unknown', 'relevant_columns': [], 'filtering_conditions': '', 'processing_instructions': "Discover all tables in the database that may represent 'interfaces'. If 'interfaces' is a table, retrieve all records from it. If not, search for tables with names or columns related to 'interface'.", 'validated': True, 'timestamp': '2025-04-30 18:09:53.274503', 'agent': 'planner', 'user_question': 'list all interfaces'}
2025-04-30 18:09:53,295 - DEBUG - STDOUT: 
==== SELECTOR NODE START ====
2025-04-30 18:09:53,297 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:53,299 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner']
2025-04-30 18:09:53,302 - DEBUG - STDOUT: Planner response received: {
  "query_type": "sql",
  "primary_table_or_datasource": "unknown",
  "relevant_columns": [],
  "filtering_conditions": "",
  "processing_instructions": "Discover all tables in the database that may represent 'interfaces'. If 'interfaces' is a table, retrieve all records from it. If not, search for tables with names or columns related to 'interface'.",
  "validated": true,
  "timestamp": "2025-04-30 18:09:53.274503",
  "agent": "planner",
  "user_question": "list all interfaces"
}
2025-04-30 18:09:53,308 - DEBUG - STDOUT: Selector is processing planner response for question: 'list all interfaces'
2025-04-30 18:09:53,309 - DEBUG - STDOUT: NOTE: The selector node is currently simplified and doesn't use LLM.
2025-04-30 18:09:53,310 - DEBUG - STDOUT: It simply passes through to the SQLGenerator without making actual selections.
2025-04-30 18:09:53,310 - DEBUG - STDOUT: Selector node output: current_agent=SQLGenerator
2025-04-30 18:09:53,310 - DEBUG - STDOUT: Selector response being sent to SQLGenerator: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "unknown",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [],
    "filters": ""
  }
}
2025-04-30 18:09:53,319 - DEBUG - STDOUT: ==== SELECTOR NODE END ====
2025-04-30 18:09:53,322 - INFO - Processing agent: selector
2025-04-30 18:09:53,323 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:53,324 - DEBUG - Event keys: dict_keys(['selector'])
2025-04-30 18:09:53,325 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector']
2025-04-30 18:09:53,326 - DEBUG - selector response: {'raw': 'Selection completed', 'selected_schemas': {}, 'selected_tool': 'sql_query', 'selected_datasource': 'unknown', 'information_needed': 'Table listing', 'reason_for_selection': 'Direct database query is the most efficient way to list tables', 'query_parameters': {'columns': [], 'filters': ''}}
2025-04-30 18:09:53,328 - DEBUG - STDOUT: 
==== SQL GENERATOR NODE START ====
2025-04-30 18:09:53,330 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:53,332 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector']
2025-04-30 18:09:53,334 - DEBUG - STDOUT: Selector response received: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "unknown",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [],
    "filters": ""
  }
}
2025-04-30 18:09:53,339 - DEBUG - STDOUT: Non-standard query detected, using LLM-based SQLGenerator
2025-04-30 18:09:53,341 - DEBUG - STDOUT: Created SQLGenerator with model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:53,343 - DEBUG - STDOUT: Invoking SQLGenerator with user_question: 'list all interfaces'
2025-04-30 18:09:55,406 - DEBUG - STDOUT: Error in SQL generator: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:09:55,409 - DEBUG - STDERR: Traceback (most recent call last):
2025-04-30 18:09:55,410 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1763, in invoke
    self._validate_response(model_response)
2025-04-30 18:09:55,412 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1819, in _validate_response
    raise ValueError(f"Missing required fields in SQL generator response: {missing_fields}")
2025-04-30 18:09:55,414 - DEBUG - STDERR: ValueError: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:09:55,416 - DEBUG - STDOUT: SQLGenerator returned response: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  }
}
2025-04-30 18:09:55,422 - DEBUG - STDOUT: Found sql_query in sql_generator_response:
2025-04-30 18:09:55,423 - DEBUG - STDOUT: SQL query was not generated. Retrying with more explicit instructions.
2025-04-30 18:09:55,424 - DEBUG - STDOUT: Retrying with explicit prompt: 
            I need a SQL query to answer this question: "list all interfaces"

            If this is asking to list tables, use:
            SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';

            If this is asking about specific table contents, use:
            SELECT * FROM [table_name] LIMIT 10;

            Please generate ONLY the SQL query without any explanation.
2025-04-30 18:09:56,945 - DEBUG - STDOUT: Error in SQL generator: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:09:56,945 - DEBUG - STDERR: Traceback (most recent call last):
2025-04-30 18:09:56,945 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1763, in invoke
    self._validate_response(model_response)
2025-04-30 18:09:56,956 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1819, in _validate_response
    raise ValueError(f"Missing required fields in SQL generator response: {missing_fields}")
2025-04-30 18:09:56,958 - DEBUG - STDERR: ValueError: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:09:56,960 - DEBUG - STDOUT: Second attempt response: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  }
}
2025-04-30 18:09:56,965 - DEBUG - STDOUT: Second attempt generated SQL query:
2025-04-30 18:09:56,967 - DEBUG - STDOUT: WARNING: Failed to generate SQL query after multiple attempts
2025-04-30 18:09:56,968 - DEBUG - STDOUT: Final SQL query set in response:
2025-04-30 18:09:56,970 - DEBUG - STDOUT: SQL Generator node output: current_agent=reviewer
2025-04-30 18:09:56,971 - DEBUG - STDOUT: SQL query generated:
2025-04-30 18:09:56,972 - DEBUG - STDOUT: SQL Generator response being sent to reviewer: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  },
  "sql_query": ""
}
2025-04-30 18:09:56,977 - DEBUG - STDOUT: ==== SQL GENERATOR NODE END ====
2025-04-30 18:09:56,979 - INFO - Processing agent: SQLGenerator
2025-04-30 18:09:56,980 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:56,981 - DEBUG - Event keys: dict_keys(['SQLGenerator'])
2025-04-30 18:09:56,982 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:56,983 - DEBUG - SQLGenerator response: {'sql_generator_response': {'sql_query': '', 'explanation': "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']", 'validation_checks': ['Query generation failed'], 'query_type': 'ERROR', 'estimated_complexity': 'UNKNOWN', 'required_indexes': []}, 'sql_query': ''}
2025-04-30 18:09:56,985 - DEBUG - STDOUT: 
==== REVIEWER NODE START ====
2025-04-30 18:09:56,986 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:56,987 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator']
2025-04-30 18:09:56,989 - DEBUG - STDOUT: SQL query to review:
2025-04-30 18:09:56,990 - DEBUG - STDOUT: SQLGenerator response received: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  },
  "sql_query": ""
}
2025-04-30 18:09:56,996 - DEBUG - STDOUT: Reviewer is analyzing SQL query for question: 'list all interfaces'
2025-04-30 18:09:56,998 - DEBUG - STDOUT: Using LLM-based ReviewerAgent to analyze the SQL query
2025-04-30 18:09:57,000 - DEBUG - STDOUT: Created ReviewerAgent with model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:57,001 - DEBUG - STDOUT: Invoking ReviewerAgent with user_question: 'list all interfaces' and sql_query: ''
2025-04-30 18:09:57,002 - DEBUG - STDOUT: ReviewerAgent returned review: {
  "reviewer_response": {
    "is_correct": false,
    "issues": [
      "Empty SQL query provided"
    ],
    "suggestions": [
      "Fix the identified issues before proceeding"
    ],
    "explanation": "Review failed due to critical issues",
    "security_concerns": [],
    "performance_impact": "HIGH",
    "confidence_score": 1.0,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:57.002672",
      "review_status": "ERROR",
      "review_version": "1.0"
    }
  }
}
2025-04-30 18:09:57,010 - DEBUG - STDOUT: Reviewer node output: current_agent=sql_executor
2025-04-30 18:09:57,011 - DEBUG - STDOUT: Reviewer response being sent to sql_executor: {
  "reviewer_response": {
    "is_correct": false,
    "issues": [
      "Empty SQL query provided"
    ],
    "suggestions": [
      "Fix the identified issues before proceeding"
    ],
    "explanation": "Review failed due to critical issues",
    "security_concerns": [],
    "performance_impact": "HIGH",
    "confidence_score": 1.0,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:57.002672",
      "review_status": "ERROR",
      "review_version": "1.0"
    }
  }
}
2025-04-30 18:09:57,019 - DEBUG - STDOUT: ==== REVIEWER NODE END ====
2025-04-30 18:09:57,020 - INFO - Processing agent: reviewer
2025-04-30 18:09:57,020 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:57,024 - DEBUG - Event keys: dict_keys(['reviewer'])
2025-04-30 18:09:57,025 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:57,026 - DEBUG - reviewer response: {'reviewer_response': {'is_correct': False, 'issues': ['Empty SQL query provided'], 'suggestions': ['Fix the identified issues before proceeding'], 'explanation': 'Review failed due to critical issues', 'security_concerns': [], 'performance_impact': 'HIGH', 'confidence_score': 1.0, 'metadata': {'reviewed_at': '2025-04-30T18:09:57.002672', 'review_status': 'ERROR', 'review_version': '1.0'}}}
2025-04-30 18:09:57,027 - DEBUG - STDOUT: 
==== SQL EXECUTOR NODE START ====
2025-04-30 18:09:57,029 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:57,030 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:09:57,033 - DEBUG - STDOUT: SQL query to execute:
2025-04-30 18:09:57,035 - DEBUG - STDOUT: Reviewer response received: {
  "reviewer_response": {
    "is_correct": false,
    "issues": [
      "Empty SQL query provided"
    ],
    "suggestions": [
      "Fix the identified issues before proceeding"
    ],
    "explanation": "Review failed due to critical issues",
    "security_concerns": [],
    "performance_impact": "HIGH",
    "confidence_score": 1.0,
    "metadata": {
      "reviewed_at": "2025-04-30T18:09:57.002672",
      "review_status": "ERROR",
      "review_version": "1.0"
    }
  }
}
2025-04-30 18:09:57,041 - DEBUG - STDOUT: SQL Executor is processing SQL query: ''
2025-04-30 18:09:57,042 - DEBUG - STDOUT: ERROR: SQL query is empty. Cannot execute empty query.
2025-04-30 18:09:57,043 - DEBUG - STDOUT: SQL Executor node error output (empty query): {
  "current_agent": "router",
  "errors": {
    "sql_executor": "Empty SQL query provided"
  },
  "execution_path": [
    "planner",
    "selector",
    "SQLGenerator",
    "reviewer",
    "sql_executor_error",
    "router",
    "planner",
    "selector",
    "SQLGenerator",
    "reviewer",
    "sql_executor_error",
    "router",
    "planner",
    "selector",
    "SQLGenerator",
    "reviewer",
    "sql_executor_error"
  ],
  "is_error_state": true,
  "sql_query_results": {
    "status": "error",
    "error_message": "Empty SQL query provided. The SQL Generator failed to create a valid query.",
    "column_names": [
      "Error"
    ],
    "rows": [
      [
        "Empty SQL query provided"
      ]
    ],
    "row_count": 1,
    "execution_time": 0,
    "query": ""
  },
  "model": "chatgpt-4o-latest",
  "server": "openai",
  "temperature": 0.0,
  "model_endpoint": "https://api.openai.com/v1"
}
2025-04-30 18:09:57,059 - DEBUG - STDOUT: ==== SQL EXECUTOR NODE END (WITH ERROR) ====
2025-04-30 18:09:57,065 - INFO - Processing agent: sql_executor
2025-04-30 18:09:57,066 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:57,067 - DEBUG - Event keys: dict_keys(['sql_executor'])
2025-04-30 18:09:57,068 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error']
2025-04-30 18:09:57,069 - DEBUG - STDOUT: 
==== ROUTER NODE START ====
2025-04-30 18:09:57,069 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:57,070 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error']
2025-04-30 18:09:57,074 - DEBUG - STDOUT: RouterAgent returned decision: {
  "router_response": {
    "route_to": "planner",
    "reason": "Starting new workflow",
    "feedback": "Initializing workflow with planner",
    "state_updates": {
      "workflow_started": true,
      "start_time": "2025-04-30T18:09:57.074168"
    },
    "confidence_score": 1.0,
    "requires_human_input": false
  }
}
2025-04-30 18:09:57,079 - DEBUG - STDOUT: Route decision: planner
2025-04-30 18:09:57,082 - DEBUG - STDOUT: Router node output: current_agent=planner
2025-04-30 18:09:57,084 - DEBUG - STDOUT: Router response: {
  "route_to": "planner",
  "reason": "Starting new workflow",
  "feedback": "Initializing workflow with planner",
  "state_updates": {
    "workflow_started": true,
    "start_time": "2025-04-30T18:09:57.074168"
  },
  "confidence_score": 1.0,
  "requires_human_input": false
}
2025-04-30 18:09:57,087 - DEBUG - STDOUT: ==== ROUTER NODE END ====
2025-04-30 18:09:57,089 - DEBUG - STDOUT: ROUTE DECISION: planner -> to_planner
2025-04-30 18:09:57,091 - INFO - Processing agent: router
2025-04-30 18:09:57,091 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:57,092 - DEBUG - Event keys: dict_keys(['router'])
2025-04-30 18:09:57,093 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router']
2025-04-30 18:09:57,095 - DEBUG - router response: {'route_to': 'planner', 'reason': 'Starting new workflow', 'feedback': 'Initializing workflow with planner', 'state_updates': {'workflow_started': True, 'start_time': '2025-04-30T18:09:57.074168'}, 'confidence_score': 1.0, 'requires_human_input': False}
2025-04-30 18:09:57,098 - DEBUG - STDOUT: 
==== PLANNER NODE START ====
2025-04-30 18:09:57,099 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:57,102 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router']
2025-04-30 18:09:57,103 - DEBUG - STDOUT: Processing user question: 'list all interfaces'
2025-04-30 18:09:57,104 - DEBUG - STDOUT: Successfully initialized database metadata store and discovery service
2025-04-30 18:09:57,105 - DEBUG - STDOUT: Successfully initialized PlannerAgent with database capabilities using model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:57,107 - DEBUG - STDOUT: PlannerAgent is using LLM to analyze the query and determine the appropriate database tables and columns
2025-04-30 18:09:57,108 - DEBUG - STDOUT: Invoking PlannerAgent with question: 'list all interfaces'
2025-04-30 18:09:57,109 - DEBUG - STDOUT: Invoking Planner with question: list all interfaces...
2025-04-30 18:09:57,928 - DEBUG - STDOUT: Raw Planner response: {
    "query_type": "sql",
    "primary_table_or_datasource": "unknown",
    "relevant_columns": [],
    "filtering_conditions": "",
    "processing_instructions": "Discover all schemas in the database, then list all tables in each schema to identify any tables related to 'interfaces'. Once identified, retrieve all records from the relevant table(s)."
}
2025-04-30 18:09:57,932 - DEBUG - STDOUT: PlannerAgent returned plan: {
  "query_type": "sql",
  "primary_table_or_datasource": "unknown",
  "relevant_columns": [],
  "filtering_conditions": "",
  "processing_instructions": "Discover all schemas in the database, then list all tables in each schema to identify any tables related to 'interfaces'. Once identified, retrieve all records from the relevant table(s).",
  "validated": true,
  "timestamp": "2025-04-30 18:09:57.932238",
  "agent": "planner",
  "user_question": "list all interfaces"
}
2025-04-30 18:09:57,938 - DEBUG - STDOUT: Planner node output: current_agent=selector
2025-04-30 18:09:57,939 - DEBUG - STDOUT: Planner response being sent to selector: {
  "query_type": "sql",
  "primary_table_or_datasource": "unknown",
  "relevant_columns": [],
  "filtering_conditions": "",
  "processing_instructions": "Discover all schemas in the database, then list all tables in each schema to identify any tables related to 'interfaces'. Once identified, retrieve all records from the relevant table(s).",
  "validated": true,
  "timestamp": "2025-04-30 18:09:57.932238",
  "agent": "planner",
  "user_question": "list all interfaces"
}
2025-04-30 18:09:57,944 - DEBUG - STDOUT: ==== PLANNER NODE END ====
2025-04-30 18:09:57,947 - INFO - Processing agent: planner
2025-04-30 18:09:57,947 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:57,949 - DEBUG - Event keys: dict_keys(['planner'])
2025-04-30 18:09:57,950 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner']
2025-04-30 18:09:57,950 - DEBUG - planner response: {'query_type': 'sql', 'primary_table_or_datasource': 'unknown', 'relevant_columns': [], 'filtering_conditions': '', 'processing_instructions': "Discover all schemas in the database, then list all tables in each schema to identify any tables related to 'interfaces'. Once identified, retrieve all records from the relevant table(s).", 'validated': True, 'timestamp': '2025-04-30 18:09:57.932238', 'agent': 'planner', 'user_question': 'list all interfaces'}
2025-04-30 18:09:57,952 - DEBUG - STDOUT: 
==== SELECTOR NODE START ====
2025-04-30 18:09:57,954 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:57,955 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner']
2025-04-30 18:09:57,957 - DEBUG - STDOUT: Planner response received: {
  "query_type": "sql",
  "primary_table_or_datasource": "unknown",
  "relevant_columns": [],
  "filtering_conditions": "",
  "processing_instructions": "Discover all schemas in the database, then list all tables in each schema to identify any tables related to 'interfaces'. Once identified, retrieve all records from the relevant table(s).",
  "validated": true,
  "timestamp": "2025-04-30 18:09:57.932238",
  "agent": "planner",
  "user_question": "list all interfaces"
}
2025-04-30 18:09:57,963 - DEBUG - STDOUT: Selector is processing planner response for question: 'list all interfaces'
2025-04-30 18:09:57,965 - DEBUG - STDOUT: NOTE: The selector node is currently simplified and doesn't use LLM.
2025-04-30 18:09:57,967 - DEBUG - STDOUT: It simply passes through to the SQLGenerator without making actual selections.
2025-04-30 18:09:57,968 - DEBUG - STDOUT: Selector node output: current_agent=SQLGenerator
2025-04-30 18:09:57,970 - DEBUG - STDOUT: Selector response being sent to SQLGenerator: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "unknown",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [],
    "filters": ""
  }
}
2025-04-30 18:09:57,974 - DEBUG - STDOUT: ==== SELECTOR NODE END ====
2025-04-30 18:09:57,976 - INFO - Processing agent: selector
2025-04-30 18:09:57,977 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:09:57,978 - DEBUG - Event keys: dict_keys(['selector'])
2025-04-30 18:09:57,979 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector']
2025-04-30 18:09:57,980 - DEBUG - selector response: {'raw': 'Selection completed', 'selected_schemas': {}, 'selected_tool': 'sql_query', 'selected_datasource': 'unknown', 'information_needed': 'Table listing', 'reason_for_selection': 'Direct database query is the most efficient way to list tables', 'query_parameters': {'columns': [], 'filters': ''}}
2025-04-30 18:09:57,983 - DEBUG - STDOUT: 
==== SQL GENERATOR NODE START ====
2025-04-30 18:09:57,985 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:09:57,986 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector']
2025-04-30 18:09:57,988 - DEBUG - STDOUT: Selector response received: {
  "raw": "Selection completed",
  "selected_schemas": {},
  "selected_tool": "sql_query",
  "selected_datasource": "unknown",
  "information_needed": "Table listing",
  "reason_for_selection": "Direct database query is the most efficient way to list tables",
  "query_parameters": {
    "columns": [],
    "filters": ""
  }
}
2025-04-30 18:09:57,994 - DEBUG - STDOUT: Non-standard query detected, using LLM-based SQLGenerator
2025-04-30 18:09:57,996 - DEBUG - STDOUT: Created SQLGenerator with model=chatgpt-4o-latest, server=openai
2025-04-30 18:09:57,997 - DEBUG - STDOUT: Invoking SQLGenerator with user_question: 'list all interfaces'
2025-04-30 18:10:01,041 - DEBUG - STDOUT: Error in SQL generator: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:10:01,042 - DEBUG - STDERR: Traceback (most recent call last):
2025-04-30 18:10:01,044 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1763, in invoke
    self._validate_response(model_response)
2025-04-30 18:10:01,044 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1819, in _validate_response
    raise ValueError(f"Missing required fields in SQL generator response: {missing_fields}")
2025-04-30 18:10:01,049 - DEBUG - STDERR: ValueError: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:10:01,050 - DEBUG - STDOUT: SQLGenerator returned response: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  }
}
2025-04-30 18:10:01,053 - DEBUG - STDOUT: Found sql_query in sql_generator_response:
2025-04-30 18:10:01,053 - DEBUG - STDOUT: SQL query was not generated. Retrying with more explicit instructions.
2025-04-30 18:10:01,057 - DEBUG - STDOUT: Retrying with explicit prompt: 
            I need a SQL query to answer this question: "list all interfaces"

            If this is asking to list tables, use:
            SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';

            If this is asking about specific table contents, use:
            SELECT * FROM [table_name] LIMIT 10;

            Please generate ONLY the SQL query without any explanation.
2025-04-30 18:10:02,841 - DEBUG - STDOUT: Error in SQL generator: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:10:02,851 - DEBUG - STDERR: Traceback (most recent call last):
2025-04-30 18:10:02,852 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1763, in invoke
    self._validate_response(model_response)
2025-04-30 18:10:02,854 - DEBUG - STDERR:   File "D:\versa\project_Files\working\streamlitapp_10.3.2025\streamlit_app\agents\agents.py", line 1819, in _validate_response
    raise ValueError(f"Missing required fields in SQL generator response: {missing_fields}")
2025-04-30 18:10:02,857 - DEBUG - STDERR: ValueError: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']
2025-04-30 18:10:02,859 - DEBUG - STDOUT: Second attempt response: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  }
}
2025-04-30 18:10:02,862 - DEBUG - STDOUT: Second attempt generated SQL query:
2025-04-30 18:10:02,862 - DEBUG - STDOUT: WARNING: Failed to generate SQL query after multiple attempts
2025-04-30 18:10:02,868 - DEBUG - STDOUT: Final SQL query set in response:
2025-04-30 18:10:02,869 - DEBUG - STDOUT: SQL Generator node output: current_agent=reviewer
2025-04-30 18:10:02,870 - DEBUG - STDOUT: SQL query generated:
2025-04-30 18:10:02,872 - DEBUG - STDOUT: SQL Generator response being sent to reviewer: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  },
  "sql_query": ""
}
2025-04-30 18:10:02,879 - DEBUG - STDOUT: ==== SQL GENERATOR NODE END ====
2025-04-30 18:10:02,881 - INFO - Processing agent: SQLGenerator
2025-04-30 18:10:02,882 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:10:02,883 - DEBUG - Event keys: dict_keys(['SQLGenerator'])
2025-04-30 18:10:02,884 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator']
2025-04-30 18:10:02,886 - DEBUG - SQLGenerator response: {'sql_generator_response': {'sql_query': '', 'explanation': "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']", 'validation_checks': ['Query generation failed'], 'query_type': 'ERROR', 'estimated_complexity': 'UNKNOWN', 'required_indexes': []}, 'sql_query': ''}
2025-04-30 18:10:02,887 - DEBUG - STDOUT: 
==== REVIEWER NODE START ====
2025-04-30 18:10:02,888 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:10:02,891 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator']
2025-04-30 18:10:02,894 - DEBUG - STDOUT: SQL query to review:
2025-04-30 18:10:02,896 - DEBUG - STDOUT: SQLGenerator response received: {
  "sql_generator_response": {
    "sql_query": "",
    "explanation": "Error occurred: Missing required fields in SQL generator response: ['sql_query', 'explanation', 'validation_checks', 'query_type', 'estimated_complexity', 'required_indexes']",
    "validation_checks": [
      "Query generation failed"
    ],
    "query_type": "ERROR",
    "estimated_complexity": "UNKNOWN",
    "required_indexes": []
  },
  "sql_query": ""
}
2025-04-30 18:10:02,903 - DEBUG - STDOUT: Reviewer is analyzing SQL query for question: 'list all interfaces'
2025-04-30 18:10:02,905 - DEBUG - STDOUT: Using LLM-based ReviewerAgent to analyze the SQL query
2025-04-30 18:10:02,907 - DEBUG - STDOUT: Created ReviewerAgent with model=chatgpt-4o-latest, server=openai
2025-04-30 18:10:02,908 - DEBUG - STDOUT: Invoking ReviewerAgent with user_question: 'list all interfaces' and sql_query: ''
2025-04-30 18:10:02,912 - DEBUG - STDOUT: ReviewerAgent returned review: {
  "reviewer_response": {
    "is_correct": false,
    "issues": [
      "Empty SQL query provided"
    ],
    "suggestions": [
      "Fix the identified issues before proceeding"
    ],
    "explanation": "Review failed due to critical issues",
    "security_concerns": [],
    "performance_impact": "HIGH",
    "confidence_score": 1.0,
    "metadata": {
      "reviewed_at": "2025-04-30T18:10:02.912623",
      "review_status": "ERROR",
      "review_version": "1.0"
    }
  }
}
2025-04-30 18:10:02,921 - DEBUG - STDOUT: Reviewer node output: current_agent=sql_executor
2025-04-30 18:10:02,924 - DEBUG - STDOUT: Reviewer response being sent to sql_executor: {
  "reviewer_response": {
    "is_correct": false,
    "issues": [
      "Empty SQL query provided"
    ],
    "suggestions": [
      "Fix the identified issues before proceeding"
    ],
    "explanation": "Review failed due to critical issues",
    "security_concerns": [],
    "performance_impact": "HIGH",
    "confidence_score": 1.0,
    "metadata": {
      "reviewed_at": "2025-04-30T18:10:02.912623",
      "review_status": "ERROR",
      "review_version": "1.0"
    }
  }
}
2025-04-30 18:10:02,933 - DEBUG - STDOUT: ==== REVIEWER NODE END ====
2025-04-30 18:10:02,935 - INFO - Processing agent: reviewer
2025-04-30 18:10:02,936 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:10:02,937 - DEBUG - Event keys: dict_keys(['reviewer'])
2025-04-30 18:10:02,938 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:10:02,939 - DEBUG - reviewer response: {'reviewer_response': {'is_correct': False, 'issues': ['Empty SQL query provided'], 'suggestions': ['Fix the identified issues before proceeding'], 'explanation': 'Review failed due to critical issues', 'security_concerns': [], 'performance_impact': 'HIGH', 'confidence_score': 1.0, 'metadata': {'reviewed_at': '2025-04-30T18:10:02.912623', 'review_status': 'ERROR', 'review_version': '1.0'}}}
2025-04-30 18:10:02,943 - DEBUG - STDOUT: 
==== SQL EXECUTOR NODE START ====
2025-04-30 18:10:02,945 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:10:02,946 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer']
2025-04-30 18:10:02,950 - DEBUG - STDOUT: SQL query to execute:
2025-04-30 18:10:02,952 - DEBUG - STDOUT: Reviewer response received: {
  "reviewer_response": {
    "is_correct": false,
    "issues": [
      "Empty SQL query provided"
    ],
    "suggestions": [
      "Fix the identified issues before proceeding"
    ],
    "explanation": "Review failed due to critical issues",
    "security_concerns": [],
    "performance_impact": "HIGH",
    "confidence_score": 1.0,
    "metadata": {
      "reviewed_at": "2025-04-30T18:10:02.912623",
      "review_status": "ERROR",
      "review_version": "1.0"
    }
  }
}
2025-04-30 18:10:02,959 - DEBUG - STDOUT: SQL Executor is processing SQL query: ''
2025-04-30 18:10:02,960 - DEBUG - STDOUT: ERROR: SQL query is empty. Cannot execute empty query.
2025-04-30 18:10:02,963 - DEBUG - STDOUT: SQL Executor node error output (empty query): {
  "current_agent": "router",
  "errors": {
    "sql_executor": "Empty SQL query provided"
  },
  "execution_path": [
    "planner",
    "selector",
    "SQLGenerator",
    "reviewer",
    "sql_executor_error",
    "router",
    "planner",
    "selector",
    "SQLGenerator",
    "reviewer",
    "sql_executor_error",
    "router",
    "planner",
    "selector",
    "SQLGenerator",
    "reviewer",
    "sql_executor_error",
    "router",
    "planner",
    "selector",
    "SQLGenerator",
    "reviewer",
    "sql_executor_error"
  ],
  "is_error_state": true,
  "sql_query_results": {
    "status": "error",
    "error_message": "Empty SQL query provided. The SQL Generator failed to create a valid query.",
    "column_names": [
      "Error"
    ],
    "rows": [
      [
        "Empty SQL query provided"
      ]
    ],
    "row_count": 1,
    "execution_time": 0,
    "query": ""
  },
  "model": "chatgpt-4o-latest",
  "server": "openai",
  "temperature": 0.0,
  "model_endpoint": "https://api.openai.com/v1"
}
2025-04-30 18:10:02,984 - DEBUG - STDOUT: ==== SQL EXECUTOR NODE END (WITH ERROR) ====
2025-04-30 18:10:02,987 - INFO - Processing agent: sql_executor
2025-04-30 18:10:02,987 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:10:02,988 - DEBUG - Event keys: dict_keys(['sql_executor'])
2025-04-30 18:10:02,988 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error']
2025-04-30 18:10:02,992 - DEBUG - STDOUT: 
==== ROUTER NODE START ====
2025-04-30 18:10:02,994 - DEBUG - STDOUT: Input state: user_question=list all interfaces
2025-04-30 18:10:02,996 - DEBUG - STDOUT: Current execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error']
2025-04-30 18:10:02,999 - DEBUG - STDOUT: RouterAgent returned decision: {
  "router_response": {
    "route_to": "planner",
    "reason": "Starting new workflow",
    "feedback": "Initializing workflow with planner",
    "state_updates": {
      "workflow_started": true,
      "start_time": "2025-04-30T18:10:02.998171"
    },
    "confidence_score": 1.0,
    "requires_human_input": false
  }
}
2025-04-30 18:10:03,003 - DEBUG - STDOUT: Route decision: planner
2025-04-30 18:10:03,004 - DEBUG - STDOUT: Router node output: current_agent=planner
2025-04-30 18:10:03,005 - DEBUG - STDOUT: Router response: {
  "route_to": "planner",
  "reason": "Starting new workflow",
  "feedback": "Initializing workflow with planner",
  "state_updates": {
    "workflow_started": true,
    "start_time": "2025-04-30T18:10:02.998171"
  },
  "confidence_score": 1.0,
  "requires_human_input": false
}
2025-04-30 18:10:03,010 - DEBUG - STDOUT: ==== ROUTER NODE END ====
2025-04-30 18:10:03,013 - DEBUG - STDOUT: RECURSION GUARD: Node planner visited 4 times. Forcing to end.
2025-04-30 18:10:03,014 - INFO - Processing agent: router
2025-04-30 18:10:03,015 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:10:03,016 - DEBUG - Event keys: dict_keys(['router'])
2025-04-30 18:10:03,018 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router']
2025-04-30 18:10:03,018 - DEBUG - router response: {'route_to': 'planner', 'reason': 'Starting new workflow', 'feedback': 'Initializing workflow with planner', 'state_updates': {'workflow_started': True, 'start_time': '2025-04-30T18:10:02.998171'}, 'confidence_score': 1.0, 'requires_human_input': False}
2025-04-30 18:10:03,018 - DEBUG - STDOUT: 
==== END NODE START ====
2025-04-30 18:10:03,025 - DEBUG - STDOUT: Processing final state
2025-04-30 18:10:03,027 - DEBUG - STDOUT: Creating default final report
2025-04-30 18:10:03,028 - DEBUG - STDOUT: Final report prepared successfully
2025-04-30 18:10:03,029 - DEBUG - STDOUT: ==== END NODE END ====
2025-04-30 18:10:03,031 - INFO - Processing agent: end
2025-04-30 18:10:03,032 - DEBUG - Event type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:10:03,034 - DEBUG - Event keys: dict_keys(['end'])
2025-04-30 18:10:03,035 - DEBUG - Execution path: ['planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router', 'planner', 'selector', 'SQLGenerator', 'reviewer', 'sql_executor_error', 'router']
2025-04-30 18:10:03,036 - DEBUG - Final state type: <class 'langgraph.pregel.io.AddableUpdatesDict'>
2025-04-30 18:10:03,037 - DEBUG - Final state keys: dict_keys(['end'])
2025-04-30 18:10:03,038 - DEBUG - End node type: <class 'dict'>
2025-04-30 18:10:03,039 - DEBUG - End node keys: dict_keys(['current_agent', 'user_question', 'selected_schema', 'tool_responses', 'execution_path', 'errors', 'is_error_state', 'planner_response', 'selector_response', 'SQLGenerator_response', 'reviewer_response', 'router_response', 'final_report_response', 'final_report_data', 'schemas', 'sql_query', 'sql_query_results', 'previous_selections', 'previous_reports', 'start_time', 'retry_counts', 'last_successful_state', 'end_chain', 'current_node', 'iteration_count', 'error_count', 'last_error', 'last_success', 'metadata', 'workflow_completed', 'completion_timestamp'])
2025-04-30 18:10:03,044 - INFO - SQL query results: {'status': 'error', 'error_message': 'Empty SQL query provided. The SQL Generator failed to create a valid query.', 'column_names': ['Error'], 'rows': [['Empty SQL query provided']], 'row_count': 1, 'execution_time': 0, 'query': ''}
2025-04-30 18:10:03,046 - INFO - SQL query: 
